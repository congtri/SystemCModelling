<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.12.0">
  <compound kind="file">
    <name>sc_buffer.h</name>
    <path>sysc/communication/</path>
    <filename>a00263.html</filename>
    <includes id="a00296" name="sc_signal.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_signal.h</includes>
    <class kind="class">sc_core::sc_buffer</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_clock.h</name>
    <path>sysc/communication/</path>
    <filename>a00266.html</filename>
    <includes id="a00341" name="sc_module.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_module.h</includes>
    <includes id="a00296" name="sc_signal.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_signal.h</includes>
    <includes id="a00017" name="sc_trace.h" local="yes" import="no" module="no" objc="no">sysc/tracing/sc_trace.h</includes>
    <class kind="class">sc_core::sc_clock</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_clock_ports.h</name>
    <path>sysc/communication/</path>
    <filename>a00293.html</filename>
    <includes id="a00287" name="sc_signal_ports.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_signal_ports.h</includes>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_communication_ids.h</name>
    <path>sysc/communication/</path>
    <filename>a00323.html</filename>
    <includes id="a00212" name="sc_report.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_report.h</includes>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00323.html</anchorfile>
      <anchor>a3a0fa0aac7295df1391acf37d9d281f8</anchor>
      <arglist>(id, unused1, unused2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_event_finder.h</name>
    <path>sysc/communication/</path>
    <filename>a00308.html</filename>
    <includes id="a00281" name="sc_port.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_port.h</includes>
    <class kind="class">sc_core::sc_event_finder</class>
    <class kind="class">sc_core::sc_event_finder_t</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_event_queue.h</name>
    <path>sysc/communication/</path>
    <filename>a00299.html</filename>
    <includes id="a00302" name="sc_interface.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_interface.h</includes>
    <includes id="a00341" name="sc_module.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_module.h</includes>
    <includes id="a00398" name="sc_event.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_event.h</includes>
    <includes id="a00281" name="sc_port.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_port.h</includes>
    <class kind="class">sc_core::sc_event_queue_if</class>
    <class kind="class">sc_core::sc_event_queue</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_export.h</name>
    <path>sysc/communication/</path>
    <filename>a00317.html</filename>
    <includes id="a00323" name="sc_communication_ids.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_communication_ids.h</includes>
    <includes id="a00302" name="sc_interface.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_interface.h</includes>
    <includes id="a00380" name="sc_object.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_object.h</includes>
    <class kind="class">sc_core::sc_export_base</class>
    <class kind="class">sc_core::sc_export</class>
    <class kind="class">sc_core::sc_export_registry</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_fifo.h</name>
    <path>sysc/communication/</path>
    <filename>a00272.html</filename>
    <includes id="a00323" name="sc_communication_ids.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_communication_ids.h</includes>
    <includes id="a00242" name="sc_prim_channel.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_prim_channel.h</includes>
    <includes id="a00269" name="sc_fifo_ifs.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_fifo_ifs.h</includes>
    <includes id="a00398" name="sc_event.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_event.h</includes>
    <includes id="a00377" name="sc_simcontext.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_simcontext.h</includes>
    <includes id="a00017" name="sc_trace.h" local="yes" import="no" module="no" objc="no">sysc/tracing/sc_trace.h</includes>
    <class kind="class">sc_core::sc_fifo</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_fifo_ifs.h</name>
    <path>sysc/communication/</path>
    <filename>a00269.html</filename>
    <includes id="a00302" name="sc_interface.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_interface.h</includes>
    <class kind="class">sc_core::sc_fifo_nonblocking_in_if</class>
    <class kind="class">sc_core::sc_fifo_blocking_in_if</class>
    <class kind="class">sc_core::sc_fifo_in_if</class>
    <class kind="class">sc_core::sc_fifo_nonblocking_out_if</class>
    <class kind="class">sc_core::sc_fifo_blocking_out_if</class>
    <class kind="class">sc_core::sc_fifo_out_if</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_fifo_ports.h</name>
    <path>sysc/communication/</path>
    <filename>a00260.html</filename>
    <includes id="a00281" name="sc_port.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_port.h</includes>
    <includes id="a00269" name="sc_fifo_ifs.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_fifo_ifs.h</includes>
    <class kind="class">sc_core::sc_fifo_in</class>
    <class kind="class">sc_core::sc_fifo_out</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_host_mutex.h</name>
    <path>sysc/communication/</path>
    <filename>a00311.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00245" name="sc_mutex_if.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_mutex_if.h</includes>
    <class kind="class">sc_core::sc_host_mutex</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_host_semaphore.h</name>
    <path>sysc/communication/</path>
    <filename>a00257.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00314" name="sc_semaphore_if.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_semaphore_if.h</includes>
    <class kind="class">sc_core::sc_host_semaphore</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_interface.h</name>
    <path>sysc/communication/</path>
    <filename>a00302.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <class kind="class">sc_core::sc_interface</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_mutex.h</name>
    <path>sysc/communication/</path>
    <filename>a00284.html</filename>
    <includes id="a00398" name="sc_event.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_event.h</includes>
    <includes id="a00380" name="sc_object.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00332" name="sc_wait.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_wait.h</includes>
    <includes id="a00245" name="sc_mutex_if.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_mutex_if.h</includes>
    <class kind="class">sc_core::sc_mutex</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_mutex_if.h</name>
    <path>sysc/communication/</path>
    <filename>a00245.html</filename>
    <includes id="a00302" name="sc_interface.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_interface.h</includes>
    <class kind="class">sc_core::sc_mutex_if</class>
    <class kind="class">sc_core::sc_scoped_lock</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_port.h</name>
    <path>sysc/communication/</path>
    <filename>a00281.html</filename>
    <includes id="a00323" name="sc_communication_ids.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_communication_ids.h</includes>
    <includes id="a00302" name="sc_interface.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_interface.h</includes>
    <includes id="a00398" name="sc_event.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_event.h</includes>
    <includes id="a00380" name="sc_object.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00437" name="sc_process.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_process.h</includes>
    <class kind="class">sc_core::sc_port_base</class>
    <class kind="class">sc_core::sc_port_registry</class>
    <class kind="class">sc_core::sc_port_b</class>
    <class kind="class">sc_core::sc_port</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_prim_channel.h</name>
    <path>sysc/communication/</path>
    <filename>a00242.html</filename>
    <includes id="a00380" name="sc_object.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00332" name="sc_wait.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_wait.h</includes>
    <includes id="a00389" name="sc_wait_cthread.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_wait_cthread.h</includes>
    <class kind="class">sc_core::sc_prim_channel</class>
    <class kind="class">sc_core::sc_prim_channel_registry</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_semaphore.h</name>
    <path>sysc/communication/</path>
    <filename>a00251.html</filename>
    <includes id="a00398" name="sc_event.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_event.h</includes>
    <includes id="a00380" name="sc_object.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00314" name="sc_semaphore_if.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_semaphore_if.h</includes>
    <class kind="class">sc_core::sc_semaphore</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_semaphore_if.h</name>
    <path>sysc/communication/</path>
    <filename>a00314.html</filename>
    <includes id="a00302" name="sc_interface.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_interface.h</includes>
    <class kind="class">sc_core::sc_semaphore_if</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_signal.h</name>
    <path>sysc/communication/</path>
    <filename>a00296.html</filename>
    <includes id="a00281" name="sc_port.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_port.h</includes>
    <includes id="a00242" name="sc_prim_channel.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_prim_channel.h</includes>
    <includes id="a00278" name="sc_signal_ifs.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_signal_ifs.h</includes>
    <includes id="a00248" name="sc_writer_policy.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_writer_policy.h</includes>
    <includes id="a00398" name="sc_event.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_event.h</includes>
    <includes id="a00437" name="sc_process.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_process.h</includes>
    <includes id="a00377" name="sc_simcontext.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_simcontext.h</includes>
    <includes id="a00035" name="sc_logic.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_logic.h</includes>
    <includes id="a00017" name="sc_trace.h" local="yes" import="no" module="no" objc="no">sysc/tracing/sc_trace.h</includes>
    <class kind="class">sc_core::sc_signal_channel</class>
    <class kind="class">sc_core::sc_signal_t</class>
    <class kind="class">sc_core::sc_signal</class>
    <class kind="class">sc_core::sc_signal&lt; bool, POL &gt;</class>
    <class kind="class">sc_core::sc_signal&lt; sc_dt::sc_logic, POL &gt;</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_signal_ifs.h</name>
    <path>sysc/communication/</path>
    <filename>a00278.html</filename>
    <includes id="a00302" name="sc_interface.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_interface.h</includes>
    <includes id="a00248" name="sc_writer_policy.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_writer_policy.h</includes>
    <class kind="class">sc_core::sc_signal_in_if</class>
    <class kind="class">sc_core::sc_signal_in_if&lt; bool &gt;</class>
    <class kind="class">sc_core::sc_signal_in_if&lt; sc_dt::sc_logic &gt;</class>
    <class kind="class">sc_core::sc_signal_write_if</class>
    <class kind="class">sc_core::sc_signal_inout_if</class>
    <namespace>sc_dt</namespace>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_signal_ports.h</name>
    <path>sysc/communication/</path>
    <filename>a00287.html</filename>
    <includes id="a00308" name="sc_event_finder.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_event_finder.h</includes>
    <includes id="a00281" name="sc_port.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_port.h</includes>
    <includes id="a00278" name="sc_signal_ifs.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_signal_ifs.h</includes>
    <includes id="a00035" name="sc_logic.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_logic.h</includes>
    <includes id="a00017" name="sc_trace.h" local="yes" import="no" module="no" objc="no">sysc/tracing/sc_trace.h</includes>
    <class kind="struct">sc_core::sc_trace_params</class>
    <class kind="class">sc_core::sc_in</class>
    <class kind="class">sc_core::sc_in&lt; bool &gt;</class>
    <class kind="class">sc_core::sc_in&lt; sc_dt::sc_logic &gt;</class>
    <class kind="class">sc_core::sc_inout</class>
    <class kind="class">sc_core::sc_inout&lt; bool &gt;</class>
    <class kind="class">sc_core::sc_inout&lt; sc_dt::sc_logic &gt;</class>
    <class kind="class">sc_core::sc_out</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_signal_resolved.h</name>
    <path>sysc/communication/</path>
    <filename>a00290.html</filename>
    <includes id="a00296" name="sc_signal.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_signal.h</includes>
    <class kind="class">sc_core::sc_signal_resolved</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_signal_resolved_ports.h</name>
    <path>sysc/communication/</path>
    <filename>a00254.html</filename>
    <includes id="a00287" name="sc_signal_ports.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_signal_ports.h</includes>
    <includes id="a00035" name="sc_logic.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_logic.h</includes>
    <class kind="class">sc_core::sc_in_resolved</class>
    <class kind="class">sc_core::sc_inout_resolved</class>
    <class kind="class">sc_core::sc_out_resolved</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_signal_rv.h</name>
    <path>sysc/communication/</path>
    <filename>a00275.html</filename>
    <includes id="a00296" name="sc_signal.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_signal.h</includes>
    <includes id="a00050" name="sc_lv.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_lv.h</includes>
    <class kind="class">sc_core::sc_lv_resolve</class>
    <class kind="class">sc_core::sc_signal_rv</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_signal_rv_ports.h</name>
    <path>sysc/communication/</path>
    <filename>a00320.html</filename>
    <includes id="a00323" name="sc_communication_ids.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_communication_ids.h</includes>
    <includes id="a00287" name="sc_signal_ports.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_signal_ports.h</includes>
    <includes id="a00275" name="sc_signal_rv.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_signal_rv.h</includes>
    <includes id="a00050" name="sc_lv.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_lv.h</includes>
    <class kind="class">sc_core::sc_in_rv</class>
    <class kind="class">sc_core::sc_inout_rv</class>
    <class kind="class">sc_core::sc_out_rv</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_stub.h</name>
    <path>sysc/communication/</path>
    <filename>a00305.html</filename>
    <includes id="a00278" name="sc_signal_ifs.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_signal_ifs.h</includes>
    <includes id="a00242" name="sc_prim_channel.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_prim_channel.h</includes>
    <includes id="a00323" name="sc_communication_ids.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_communication_ids.h</includes>
    <includes id="a00377" name="sc_simcontext.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_simcontext.h</includes>
    <includes id="a00035" name="sc_logic.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_logic.h</includes>
    <class kind="class">sc_core::sc_stub_registry</class>
    <class kind="class">sc_core::sc_stub</class>
    <class kind="struct">sc_core::sc_unbound_impl</class>
    <namespace>sc_core</namespace>
    <namespace>sc_core::sc_tie</namespace>
  </compound>
  <compound kind="file">
    <name>sc_writer_policy.h</name>
    <path>sysc/communication/</path>
    <filename>a00248.html</filename>
    <includes id="a00329" name="sc_process_handle.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_process_handle.h</includes>
    <class kind="struct">sc_core::sc_writer_policy_nocheck_write</class>
    <class kind="struct">sc_core::sc_writer_policy_check_write</class>
    <class kind="struct">sc_core::sc_writer_policy_check_delta</class>
    <class kind="struct">sc_core::sc_writer_policy_nocheck_port</class>
    <class kind="struct">sc_core::sc_writer_policy_check_port</class>
    <class kind="struct">sc_core::sc_writer_policy_check&lt; SC_ONE_WRITER &gt;</class>
    <class kind="struct">sc_core::sc_writer_policy_check&lt; SC_MANY_WRITERS &gt;</class>
    <class kind="struct">sc_core::sc_writer_policy_check&lt; SC_UNCHECKED_WRITERS &gt;</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFAULT_WRITER_POLICY</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>a2e3da293d6ddebdfaaf2c66c9d7a0ccc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_bit.h</name>
    <path>sysc/datatypes/bit/</path>
    <filename>a00032.html</filename>
    <includes id="a00140" name="sc_nbdefs.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <class kind="class">sc_dt::sc_bit</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_TO_VALUE_T</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac719ac065d4292e13dc0b9e3b25416c5</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1934040fa312188630bdd1e211f41934</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FUN_T</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aec52316a67ebc4fdec89de6e35645ea8</anchor>
      <arglist>(ret, fun, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FUN</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5fa0312cbed03c95b2c1de57c8f7a48f</anchor>
      <arglist>(ret, fun)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_TRN_FUN_T</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af63b14ca9a34fbf6bab2204b7cd79fb4</anchor>
      <arglist>(fun, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_TRN_FUN</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8298fc178ef6feeb7b90753670440b7d</anchor>
      <arglist>(fun)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_bit_ids.h</name>
    <path>sysc/datatypes/bit/</path>
    <filename>a00038.html</filename>
    <includes id="a00212" name="sc_report.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_report.h</includes>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a3a0fa0aac7295df1391acf37d9d281f8</anchor>
      <arglist>(id, unused1, unused2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_bit_proxies.h</name>
    <path>sysc/datatypes/bit/</path>
    <filename>a00056.html</filename>
    <includes id="a00038" name="sc_bit_ids.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_bit_ids.h</includes>
    <includes id="a00047" name="sc_proxy.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_proxy.h</includes>
    <class kind="class">sc_dt::sc_bitref_conv_r</class>
    <class kind="class">sc_dt::sc_bitref_conv_r&lt; T, sc_proxy_traits&lt; sc_bv_base &gt; &gt;</class>
    <class kind="class">sc_dt::sc_bitref_r</class>
    <class kind="class">sc_dt::sc_bitref</class>
    <class kind="class">sc_dt::sc_subref_r</class>
    <class kind="class">sc_dt::sc_subref</class>
    <class kind="class">sc_dt::sc_concref_r</class>
    <class kind="class">sc_dt::sc_concref</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_bv.h</name>
    <path>sysc/datatypes/bit/</path>
    <filename>a00041.html</filename>
    <includes id="a00053" name="sc_bv_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_bv_base.h</includes>
    <class kind="class">sc_dt::sc_bv</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_bv_base.h</name>
    <path>sysc/datatypes/bit/</path>
    <filename>a00053.html</filename>
    <includes id="a00038" name="sc_bit_ids.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_bit_ids.h</includes>
    <includes id="a00056" name="sc_bit_proxies.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_bit_proxies.h</includes>
    <includes id="a00047" name="sc_proxy.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_proxy.h</includes>
    <includes id="a00173" name="sc_length_param.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_length_param.h</includes>
    <includes id="a00140" name="sc_nbdefs.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <class kind="class">sc_dt::sc_bv_base</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_logic.h</name>
    <path>sysc/datatypes/bit/</path>
    <filename>a00035.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00374" name="sc_macros.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_macros.h</includes>
    <includes id="a00218" name="sc_mempool.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_mempool.h</includes>
    <includes id="a00032" name="sc_bit.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_bit.h</includes>
    <class kind="class">sc_dt::sc_logic</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a33b1acf9dd47412aa96459b6e6840b06</anchor>
      <arglist>(ret, op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>aebb0d78a0c14894e7ed7ec5e28b0b96e</anchor>
      <arglist>(ret, op)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_lv.h</name>
    <path>sysc/datatypes/bit/</path>
    <filename>a00050.html</filename>
    <includes id="a00044" name="sc_lv_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_lv_base.h</includes>
    <class kind="class">sc_dt::sc_lv</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_lv_base.h</name>
    <path>sysc/datatypes/bit/</path>
    <filename>a00044.html</filename>
    <includes id="a00038" name="sc_bit_ids.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_bit_ids.h</includes>
    <includes id="a00053" name="sc_bv_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_bv_base.h</includes>
    <includes id="a00035" name="sc_logic.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_logic.h</includes>
    <includes id="a00173" name="sc_length_param.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_length_param.h</includes>
    <class kind="class">sc_dt::sc_lv_base</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_AND_ASN_OP_T</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a2290ba2a07745329ad17b08939e304e0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_AND_OP_T_NATIVE</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a2fb5ef33aa0e788a62295565656d9786</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_AND_OP_T_SYSTEMC</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a6f7873cdd0f20336e7a1cf0a5576d8cf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_AND_OP_T_A</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a0ecd56c5e26aee2200cb60ffc8d8dda2</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_AND_OP_T_B</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a027e6b9a0fd38c0bd97ccf91d1e1d8cd</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_OR_ASN_OP_T</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a8da21c6783ce5afa481e54724a50f47c</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_OR_OP_T_NATIVE</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a7cb37579a6a2c622b5c4c894a9a1a7bf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_OR_OP_T_SYSTEMC</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ae71ca380955d9ba64da98d9c2f87f9b8</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_OR_OP_T_A</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a51bb5cc3460e3f4d4400026f3413840e</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_OR_OP_T_B</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a45bc47b95ca49ff27f4420070eb3e664</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_XOR_ASN_OP_T</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a5c8c0c243ca4e8d1a8b86f9699a0be8f</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_XOR_OP_T_NATIVE</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a8b9e49c48029d8cbcf6f73e4a568c332</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_XOR_OP_T_SYSTEMC</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a44b637d76d95f4fa59782e720d0094aa</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_XOR_OP_T_A</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a6edbba209eb0caade0e66f17f721b231</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BITWISE_XOR_OP_T_B</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a87ddb1e080495399fbe006187b2a812b</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a98a013e830f530c47314f7d4ee023646</anchor>
      <arglist>(tp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_proxy.h</name>
    <path>sysc/datatypes/bit/</path>
    <filename>a00047.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00236" name="sc_iostream.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00128" name="sc_signed.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_signed.h</includes>
    <includes id="a00176" name="sc_unsigned.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_unsigned.h</includes>
    <includes id="a00191" name="sc_int_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_int_base.h</includes>
    <includes id="a00158" name="sc_uint_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_uint_base.h</includes>
    <includes id="a00203" name="sc_string.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_string.h</includes>
    <includes id="a00032" name="sc_bit.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_bit.h</includes>
    <includes id="a00038" name="sc_bit_ids.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_bit_ids.h</includes>
    <includes id="a00035" name="sc_logic.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_logic.h</includes>
    <includes id="a00374" name="sc_macros.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_macros.h</includes>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_bv_base &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_lv_base &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_bitref_r&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_bitref&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_subref_r&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_subref&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_proxy&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_mixed_proxy_traits_helper</class>
    <class kind="struct">sc_dt::sc_mixed_proxy_traits_helper&lt; X, X &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_concref_r&lt; X, Y &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_concref&lt; X, Y &gt; &gt;</class>
    <class kind="class">sc_dt::sc_proxy</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BITWISE_AND_OP_T</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a6beca6efa1b35c0b49d3ad81a1f3feea</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BITWISE_OR_OP_T</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ad4fae7e0571393b991041e0461c70dbc</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BITWISE_XOR_OP_T</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>afe29b2313b0af14de7019be209951a8c</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_T</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a46a5280a3151c51e7580c026f72c3a24</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a98a013e830f530c47314f7d4ee023646</anchor>
      <arglist>(tp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fx.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00074.html</filename>
    <includes id="a00107" name="sc_fixed.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fixed.h</includes>
    <includes id="a00104" name="sc_fxcast_switch.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fxcast_switch.h</includes>
    <includes id="a00077" name="sc_fxtype_params.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fxtype_params.h</includes>
    <includes id="a00071" name="sc_ufixed.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_ufixed.h</includes>
    <includes id="a00083" name="scfx_other_defs.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/scfx_other_defs.h</includes>
  </compound>
  <compound kind="file">
    <name>sc_context.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00059.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00086" name="sc_fx_ids.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fx_ids.h</includes>
    <includes id="a00377" name="sc_simcontext.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_simcontext.h</includes>
    <includes id="a00224" name="sc_hash.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_hash.h</includes>
    <class kind="class">sc_dt::sc_without_context</class>
    <class kind="class">sc_dt::sc_global</class>
    <class kind="class">sc_dt::sc_context</class>
    <namespace>sc_core</namespace>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_fix.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00113.html</filename>
    <includes id="a00119" name="sc_fxnum.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fxnum.h</includes>
    <class kind="class">sc_dt::sc_fix</class>
    <class kind="class">sc_dt::sc_fix_fast</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a527c827dcbd9e45098d2e90214092353</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_A</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a0806659dff0c9f2f91cbf08de13c0ecf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_B</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a4e3a0139b5778e36ae38658e3ce1c058</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a527c827dcbd9e45098d2e90214092353</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_A</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a0806659dff0c9f2f91cbf08de13c0ecf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_B</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a4e3a0139b5778e36ae38658e3ce1c058</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T_A</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a6db9161cdf4a85ecee77101a30ef3c13</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T_B</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a304f66e70293afd1bd0f125995305312</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a765c3b8c2bc5a94be853a374479f349d</anchor>
      <arglist>(op, op2, tp1, tp2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a84e85d84015c974edabb15baef654c6a</anchor>
      <arglist>(fnc, op2, tp1, tp2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ad35572d440c0c233f9f4fa8a2318de40</anchor>
      <arglist>(op, op2, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T_A</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a6db9161cdf4a85ecee77101a30ef3c13</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T_B</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a304f66e70293afd1bd0f125995305312</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a765c3b8c2bc5a94be853a374479f349d</anchor>
      <arglist>(op, op2, tp1, tp2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a84e85d84015c974edabb15baef654c6a</anchor>
      <arglist>(fnc, op2, tp1, tp2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ad35572d440c0c233f9f4fa8a2318de40</anchor>
      <arglist>(op, op2, tp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fixed.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00107.html</filename>
    <includes id="a00113" name="sc_fix.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fix.h</includes>
    <class kind="class">sc_dt::sc_fixed</class>
    <class kind="class">sc_dt::sc_fixed_fast</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_A</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a0806659dff0c9f2f91cbf08de13c0ecf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_B</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a4e3a0139b5778e36ae38658e3ce1c058</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_A</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a0806659dff0c9f2f91cbf08de13c0ecf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_B</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a4e3a0139b5778e36ae38658e3ce1c058</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>aa5e9f01b5c610018f766d9fad60886a0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>aa5e9f01b5c610018f766d9fad60886a0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fx_ids.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00086.html</filename>
    <includes id="a00212" name="sc_report.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_report.h</includes>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a3a0fa0aac7295df1391acf37d9d281f8</anchor>
      <arglist>(id, unused1, unused2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fxcast_switch.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00104.html</filename>
    <includes id="a00059" name="sc_context.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_context.h</includes>
    <class kind="class">sc_dt::sc_fxcast_switch</class>
    <namespace>sc_dt</namespace>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_fxdefs.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00101.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00209" name="sc_machine.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_machine.h</includes>
    <includes id="a00086" name="sc_fx_ids.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fx_ids.h</includes>
    <includes id="a00149" name="sc_nbutils.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_nbutils.h</includes>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_ERROR_IF_IMPL_</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>abaf601d66a32e7cc8531188bdcc94568</anchor>
      <arglist>(cnd, id, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_ASSERT_</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ae5e73b8499eec23dcadc17e0e46744d9</anchor>
      <arglist>(cnd, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_ERROR_IF_</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a259a26ad320641bed7309c258d174d83</anchor>
      <arglist>(cnd, id)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CHECK_WL_</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a3010f4a3829f246bd506a021dcdb5547</anchor>
      <arglist>(wl)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CHECK_N_BITS_</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a70c27d3300bb8299507478168e3cd5b6</anchor>
      <arglist>(n_bits)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CHECK_DIV_WL_</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>af8c32398727cd68b3c0773fc949af28c</anchor>
      <arglist>(div_wl)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CHECK_CTE_WL_</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aabed28aef808fadce47bce7a6eaa1d81</anchor>
      <arglist>(cte_wl)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CHECK_MAX_WL_</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a7d1e232d5c80ed2d5deabc9cb627781e</anchor>
      <arglist>(max_wl)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_OBSERVER_</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a28cb9f0dd2e8ec3512fd642e4f1f796d</anchor>
      <arglist>(object, observer_type, event)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_OBSERVER_DEFAULT_</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aac74384292ef3c836ae27dd80f3c09b5</anchor>
      <arglist>(observer_type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fxnum.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00119.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00044" name="sc_lv_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_lv_base.h</includes>
    <includes id="a00098" name="sc_fxval.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fxval.h</includes>
    <includes id="a00122" name="scfx_params.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/scfx_params.h</includes>
    <includes id="a00095" name="sc_fxnum_observer.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fxnum_observer.h</includes>
    <class kind="class">sc_dt::sc_fxnum_bitref_r</class>
    <class kind="class">sc_dt::sc_fxnum_bitref</class>
    <class kind="class">sc_dt::sc_fxnum_fast_bitref_r</class>
    <class kind="class">sc_dt::sc_fxnum_fast_bitref</class>
    <class kind="class">sc_dt::sc_fxnum_subref_r</class>
    <class kind="class">sc_dt::sc_fxnum_subref</class>
    <class kind="class">sc_dt::sc_fxnum_fast_subref_r</class>
    <class kind="class">sc_dt::sc_fxnum_fast_subref</class>
    <class kind="class">sc_dt::sc_fxnum</class>
    <class kind="class">sc_dt::sc_fxnum_fast</class>
    <namespace>sc_core</namespace>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a08afd11f6bfbbe041cbc731d74c6b388</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ad8ca203802035b801d9373a6443a5826</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a38d1621b1bc3b8e8089134b2783e5cad</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T_A</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a2df23f74802446a7d79c6615a51e627c</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_A</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ac1c34f2994492559591fa70c91370880</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a08afd11f6bfbbe041cbc731d74c6b388</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ad8ca203802035b801d9373a6443a5826</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a38d1621b1bc3b8e8089134b2783e5cad</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T_A</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a2df23f74802446a7d79c6615a51e627c</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_A</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ac1c34f2994492559591fa70c91370880</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTOR_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a16889944bdbdfcb77d66d0d1321b85d6</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a05774b3ea2367612def9565250689727</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP_OTHER</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a054023bf409b22a07bc9aa94201c8bb2</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ae0b5c4034f8c1b2fe3f65083a727834a</anchor>
      <arglist>(op, dummy)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a4a7e357a84fd89e3226c2ba8b8ee499e</anchor>
      <arglist>(fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC_OTHER</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a3e0f55d91ad5cf8b96f0c7e3308606b6</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a00f974f3761cc2ffa939c703235998d1</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a08afd11f6bfbbe041cbc731d74c6b388</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_OTHER</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a1d25ae3746ed42e5adc77d24c11c2c72</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ad8ca203802035b801d9373a6443a5826</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTOR_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a16889944bdbdfcb77d66d0d1321b85d6</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a05774b3ea2367612def9565250689727</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP_OTHER</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a054023bf409b22a07bc9aa94201c8bb2</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ae0b5c4034f8c1b2fe3f65083a727834a</anchor>
      <arglist>(op, dummy)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a4a7e357a84fd89e3226c2ba8b8ee499e</anchor>
      <arglist>(fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC_OTHER</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a3e0f55d91ad5cf8b96f0c7e3308606b6</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a00f974f3761cc2ffa939c703235998d1</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a08afd11f6bfbbe041cbc731d74c6b388</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_OTHER</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a1d25ae3746ed42e5adc77d24c11c2c72</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ad8ca203802035b801d9373a6443a5826</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a9ce95d837bcaac52c7a4a7bf7427cb77</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a6bf992c945fea7afc3a61ae20a1985c8</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_RED_FNC</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a1adcb49210a098c71b71a3a0421d7e5a</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aafc2f0a1d7bd39d819b7877624e23519</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a9ce95d837bcaac52c7a4a7bf7427cb77</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a6bf992c945fea7afc3a61ae20a1985c8</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_RED_FNC</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a1adcb49210a098c71b71a3a0421d7e5a</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aafc2f0a1d7bd39d819b7877624e23519</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>af2de12c787025ca23976ceb2f43389ee</anchor>
      <arglist>(tp, arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_A</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a5762ad586903df135b97eac548f61cc0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_B</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a34854a3bcaf1808a3cce7696b18f4dcb</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_C</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a3a4f168b0842a40debc40ed6d1f3edd3</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_D</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aa649739131e95ec6b4da0d422bd13e15</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a41dc909ee3659cca28b7a4a4f22871c7</anchor>
      <arglist>(op, fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_OTHER</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ade890965d9f4916970cbfd24ae35a26e</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a273f2d0fe0483a39fb162d989313cfc1</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a30ddfcd5028f3f4e2b30012d22b5d405</anchor>
      <arglist>(fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_OTHER</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a614eb667fee172b0e16fa0c5b1b46db1</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a0b803efa0b3bf66af70f22056cad9392</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a1999552b6d425eff4f719f47c56fa6a1</anchor>
      <arglist>(op, ret, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_OTHER</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a95a77a83af01830e8b7d0c0897064625</anchor>
      <arglist>(op, ret)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a063c804a23870ee20d7e763b2539eb33</anchor>
      <arglist>(op, ret)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aafc2f0a1d7bd39d819b7877624e23519</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>abdbf3346f0571d0d2c0656fdfb4fb229</anchor>
      <arglist>(op, fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>af40a6bd2e88f0791e08e12d3e760e788</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a824acdb63beb5f312daa3cbb87025fd7</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>af2de12c787025ca23976ceb2f43389ee</anchor>
      <arglist>(tp, arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_A</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a5762ad586903df135b97eac548f61cc0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_B</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a34854a3bcaf1808a3cce7696b18f4dcb</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_C</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a3a4f168b0842a40debc40ed6d1f3edd3</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aa2b28b4c2398636160e44ba69c5cc4d6</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_OTHER</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ab729d8ca96e5a31ee5dd8bc98f6de545</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a782e3b52cc4ad73f7161fab633b68b34</anchor>
      <arglist>(op, dummy)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a234eead18aac71ce9c14755b341df352</anchor>
      <arglist>(fnc, op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_OTHER</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>af5646975099f0855142c0a47314f3bbb</anchor>
      <arglist>(fnc, op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aa12b447e98aaee61e583483e17f09356</anchor>
      <arglist>(fnc, op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a9ce95d837bcaac52c7a4a7bf7427cb77</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_OTHER</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>af2e14b48dbb1717b796a714806f85233</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a6bf992c945fea7afc3a61ae20a1985c8</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aafc2f0a1d7bd39d819b7877624e23519</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a41dc909ee3659cca28b7a4a4f22871c7</anchor>
      <arglist>(op, fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a273f2d0fe0483a39fb162d989313cfc1</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a30ddfcd5028f3f4e2b30012d22b5d405</anchor>
      <arglist>(fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a0b803efa0b3bf66af70f22056cad9392</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a1999552b6d425eff4f719f47c56fa6a1</anchor>
      <arglist>(op, ret, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a063c804a23870ee20d7e763b2539eb33</anchor>
      <arglist>(op, ret)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aafc2f0a1d7bd39d819b7877624e23519</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>abdbf3346f0571d0d2c0656fdfb4fb229</anchor>
      <arglist>(op, fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a824acdb63beb5f312daa3cbb87025fd7</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a234eead18aac71ce9c14755b341df352</anchor>
      <arglist>(fnc, op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aa12b447e98aaee61e583483e17f09356</anchor>
      <arglist>(fnc, op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aafc2f0a1d7bd39d819b7877624e23519</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fxnum_observer.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00095.html</filename>
    <includes id="a00101" name="sc_fxdefs.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fxdefs.h</includes>
    <class kind="class">sc_dt::sc_fxnum_observer</class>
    <class kind="class">sc_dt::sc_fxnum_fast_observer</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_OBSERVER_CONSTRUCT_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a8b8acced2276b16af47677b715791cad</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_OBSERVER_DESTRUCT_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a8d3e51cd43bc5a894bc71a7d30c7a83a</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_OBSERVER_READ_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a4769a00a1e0b1b25dcff29bfc405ad21</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_OBSERVER_WRITE_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a23254e913090adfaef6da9900db099dc</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_OBSERVER_DEFAULT_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a3b810a4e286935dff0536a8a144c33ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_FAST_OBSERVER_CONSTRUCT_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a9c5f0460ed7a9c4b0a71f22161741e44</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_FAST_OBSERVER_DESTRUCT_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a65ce83fd05f31ab36ded43d3c3b13d73</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_FAST_OBSERVER_READ_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ace1285cb9ad0b5d11399e526fb50824d</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_FAST_OBSERVER_WRITE_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>acc36d6188e19146688d6b409fbd40002</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXNUM_FAST_OBSERVER_DEFAULT_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>add66f30e1d96da3534f09dc1b2cb7af5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fxtype_params.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00077.html</filename>
    <includes id="a00059" name="sc_context.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_context.h</includes>
    <class kind="class">sc_dt::sc_fxtype_params</class>
    <namespace>sc_dt</namespace>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_fxval.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00098.html</filename>
    <includes id="a00089" name="scfx_rep.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/scfx_rep.h</includes>
    <includes id="a00191" name="sc_int_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_int_base.h</includes>
    <includes id="a00158" name="sc_uint_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_uint_base.h</includes>
    <includes id="a00128" name="sc_signed.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_signed.h</includes>
    <includes id="a00176" name="sc_unsigned.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_unsigned.h</includes>
    <includes id="a00065" name="sc_fxval_observer.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fxval_observer.h</includes>
    <class kind="class">sc_dt::sc_fxval</class>
    <class kind="class">sc_dt::sc_fxval_fast</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SCFX_EXPLICIT_</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a3904bdeb9bf148c37fd3fd4ebc85a139</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCFX_EXPLICIT_OTHER_</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a96d6f8524e2aa1afa261547a3e1c692f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a05774b3ea2367612def9565250689727</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP_OTHER</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a054023bf409b22a07bc9aa94201c8bb2</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ae0b5c4034f8c1b2fe3f65083a727834a</anchor>
      <arglist>(op, dummy)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a4a7e357a84fd89e3226c2ba8b8ee499e</anchor>
      <arglist>(fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC_OTHER</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a3e0f55d91ad5cf8b96f0c7e3308606b6</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a00f974f3761cc2ffa939c703235998d1</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a08afd11f6bfbbe041cbc731d74c6b388</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_OTHER</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a1d25ae3746ed42e5adc77d24c11c2c72</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ad8ca203802035b801d9373a6443a5826</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a05774b3ea2367612def9565250689727</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP_OTHER</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a054023bf409b22a07bc9aa94201c8bb2</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_OP</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ae0b5c4034f8c1b2fe3f65083a727834a</anchor>
      <arglist>(op, dummy)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a4a7e357a84fd89e3226c2ba8b8ee499e</anchor>
      <arglist>(fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC_OTHER</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a3e0f55d91ad5cf8b96f0c7e3308606b6</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_BIN_FNC</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a00f974f3761cc2ffa939c703235998d1</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a08afd11f6bfbbe041cbc731d74c6b388</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP_OTHER</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a1d25ae3746ed42e5adc77d24c11c2c72</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_REL_OP</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ad8ca203802035b801d9373a6443a5826</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>af2de12c787025ca23976ceb2f43389ee</anchor>
      <arglist>(tp, arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_A</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a5762ad586903df135b97eac548f61cc0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_B</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a34854a3bcaf1808a3cce7696b18f4dcb</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_C</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a3a4f168b0842a40debc40ed6d1f3edd3</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a41dc909ee3659cca28b7a4a4f22871c7</anchor>
      <arglist>(op, fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_OTHER</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ade890965d9f4916970cbfd24ae35a26e</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a273f2d0fe0483a39fb162d989313cfc1</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a30ddfcd5028f3f4e2b30012d22b5d405</anchor>
      <arglist>(fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_OTHER</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a614eb667fee172b0e16fa0c5b1b46db1</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a0b803efa0b3bf66af70f22056cad9392</anchor>
      <arglist>(fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a1999552b6d425eff4f719f47c56fa6a1</anchor>
      <arglist>(op, ret, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_OTHER</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a95a77a83af01830e8b7d0c0897064625</anchor>
      <arglist>(op, ret)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a063c804a23870ee20d7e763b2539eb33</anchor>
      <arglist>(op, ret)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>aafc2f0a1d7bd39d819b7877624e23519</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>abdbf3346f0571d0d2c0656fdfb4fb229</anchor>
      <arglist>(op, fnc, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>af40a6bd2e88f0791e08e12d3e760e788</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a824acdb63beb5f312daa3cbb87025fd7</anchor>
      <arglist>(op, fnc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>af2de12c787025ca23976ceb2f43389ee</anchor>
      <arglist>(tp, arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_A</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a5762ad586903df135b97eac548f61cc0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_B</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a34854a3bcaf1808a3cce7696b18f4dcb</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTOR_T_C</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a3a4f168b0842a40debc40ed6d1f3edd3</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>aa2b28b4c2398636160e44ba69c5cc4d6</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_OTHER</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ab729d8ca96e5a31ee5dd8bc98f6de545</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a782e3b52cc4ad73f7161fab633b68b34</anchor>
      <arglist>(op, dummy)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a234eead18aac71ce9c14755b341df352</anchor>
      <arglist>(fnc, op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_OTHER</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>af5646975099f0855142c0a47314f3bbb</anchor>
      <arglist>(fnc, op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>aa12b447e98aaee61e583483e17f09356</anchor>
      <arglist>(fnc, op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a9ce95d837bcaac52c7a4a7bf7427cb77</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP_OTHER</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>af2e14b48dbb1717b796a714806f85233</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_REL_OP</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a6bf992c945fea7afc3a61ae20a1985c8</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>aafc2f0a1d7bd39d819b7877624e23519</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_fxval_observer.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00065.html</filename>
    <includes id="a00101" name="sc_fxdefs.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fxdefs.h</includes>
    <class kind="class">sc_dt::sc_fxval_observer</class>
    <class kind="class">sc_dt::sc_fxval_fast_observer</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_OBSERVER_CONSTRUCT_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>af9b58658ab42f9d123b87dcbb0ac3abd</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_OBSERVER_DESTRUCT_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a8404f7ee975a1f21e7d85412a670d59f</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_OBSERVER_READ_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>af5e64d2a859a1f8a4db68f75503b3eac</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_OBSERVER_WRITE_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a89c0a1e643584be8a57a200f982094f1</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_OBSERVER_DEFAULT_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a12ad4b75d762cd5c333387246d2cb6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_FAST_OBSERVER_CONSTRUCT_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a93256f75572a3c44060aba24a54b34e2</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_FAST_OBSERVER_DESTRUCT_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a54964ee356bfdf3c1f76e24556fd3a41</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_FAST_OBSERVER_READ_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a90d5abc46dbff59c2aaeeeb61d31fb3f</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_FAST_OBSERVER_WRITE_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ad3032b802cddd7be71d05b661c7abe05</anchor>
      <arglist>(object)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FXVAL_FAST_OBSERVER_DEFAULT_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ac4dcc6bc844cec41a494bf3a69c8f8f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_ufix.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00092.html</filename>
    <includes id="a00119" name="sc_fxnum.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fxnum.h</includes>
    <class kind="class">sc_dt::sc_ufix</class>
    <class kind="class">sc_dt::sc_ufix_fast</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a527c827dcbd9e45098d2e90214092353</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_A</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a0806659dff0c9f2f91cbf08de13c0ecf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_B</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a4e3a0139b5778e36ae38658e3ce1c058</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a527c827dcbd9e45098d2e90214092353</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_A</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a0806659dff0c9f2f91cbf08de13c0ecf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_B</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a4e3a0139b5778e36ae38658e3ce1c058</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T_A</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a6db9161cdf4a85ecee77101a30ef3c13</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T_B</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a304f66e70293afd1bd0f125995305312</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a765c3b8c2bc5a94be853a374479f349d</anchor>
      <arglist>(op, op2, tp1, tp2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a84e85d84015c974edabb15baef654c6a</anchor>
      <arglist>(fnc, op2, tp1, tp2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ad35572d440c0c233f9f4fa8a2318de40</anchor>
      <arglist>(op, op2, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T_A</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a6db9161cdf4a85ecee77101a30ef3c13</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T_B</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a304f66e70293afd1bd0f125995305312</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a765c3b8c2bc5a94be853a374479f349d</anchor>
      <arglist>(op, op2, tp1, tp2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_BIN_FNC_T</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a84e85d84015c974edabb15baef654c6a</anchor>
      <arglist>(fnc, op2, tp1, tp2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ad35572d440c0c233f9f4fa8a2318de40</anchor>
      <arglist>(op, op2, tp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_ufixed.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00071.html</filename>
    <includes id="a00092" name="sc_ufix.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_ufix.h</includes>
    <class kind="class">sc_dt::sc_ufixed</class>
    <class kind="class">sc_dt::sc_ufixed_fast</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_A</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a0806659dff0c9f2f91cbf08de13c0ecf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_B</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a4e3a0139b5778e36ae38658e3ce1c058</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_A</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a0806659dff0c9f2f91cbf08de13c0ecf</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_CTORS_T_B</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a4e3a0139b5778e36ae38658e3ce1c058</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_T</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ac919eecc0ae9d82c36ee542530f37cfd</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP_OTHER</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a2fc985c1b4d7c052c5407214cae5d831</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_ASN_OP</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>afcdb41d438a4d3542f00f4f12ddd2409</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>aa5e9f01b5c610018f766d9fad60886a0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_CTORS_T</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>aa5e9f01b5c610018f766d9fad60886a0</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_T</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a8d20a45ac165ec7ca334e44a0bdd33fa</anchor>
      <arglist>(op, tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP_OTHER</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ad4997c33c5ef0a70b7972f8f3cf43f2d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFN_ASN_OP</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a813e7689c7ceca0d2f103e0373b5e6ad</anchor>
      <arglist>(op)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scfx_ieee.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00110.html</filename>
    <includes id="a00101" name="sc_fxdefs.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fxdefs.h</includes>
    <class kind="union">sc_dt::ieee_double</class>
    <class kind="class">sc_dt::scfx_ieee_double</class>
    <class kind="union">sc_dt::ieee_float</class>
    <class kind="class">sc_dt::scfx_ieee_float</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SCFX_MASK_</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a4ea1170e3c13a3678ae194554f53a1ac</anchor>
      <arglist>(Size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MSB_STATEMENT</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>ad714ed744f53d9618bb8522411f97c6d</anchor>
      <arglist>(x, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LSB_STATEMENT</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>abd9722c6a656a6692e4e44229197ce81</anchor>
      <arglist>(x, n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scfx_mant.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00062.html</filename>
    <includes id="a00110" name="scfx_ieee.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/scfx_ieee.h</includes>
    <includes id="a00116" name="scfx_utils.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/scfx_utils.h</includes>
    <includes id="a00374" name="sc_macros.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_macros.h</includes>
    <class kind="class">sc_dt::scfx_mant</class>
    <class kind="class">sc_dt::scfx_mant_ref</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>scfx_other_defs.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00083.html</filename>
    <includes id="a00086" name="sc_fx_ids.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fx_ids.h</includes>
    <includes id="a00128" name="sc_signed.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_signed.h</includes>
    <includes id="a00176" name="sc_unsigned.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_unsigned.h</includes>
    <includes id="a00191" name="sc_int_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_int_base.h</includes>
    <includes id="a00158" name="sc_uint_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_uint_base.h</includes>
    <includes id="a00017" name="sc_trace.h" local="yes" import="no" module="no" objc="no">sysc/tracing/sc_trace.h</includes>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>scfx_params.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00122.html</filename>
    <includes id="a00086" name="sc_fx_ids.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fx_ids.h</includes>
    <includes id="a00104" name="sc_fxcast_switch.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fxcast_switch.h</includes>
    <includes id="a00077" name="sc_fxtype_params.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fxtype_params.h</includes>
    <class kind="class">sc_dt::scfx_params</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>scfx_pow10.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00080.html</filename>
    <includes id="a00089" name="scfx_rep.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/scfx_rep.h</includes>
    <class kind="class">sc_dt::scfx_pow10</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>scfx_rep.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00089.html</filename>
    <includes id="a00062" name="scfx_mant.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/scfx_mant.h</includes>
    <includes id="a00122" name="scfx_params.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/scfx_params.h</includes>
    <includes id="a00068" name="scfx_string.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/scfx_string.h</includes>
    <class kind="class">sc_dt::scfx_index</class>
    <class kind="class">sc_dt::scfx_rep</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>scfx_string.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00068.html</filename>
    <class kind="class">sc_dt::scfx_string</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>scfx_utils.h</name>
    <path>sysc/datatypes/fx/</path>
    <filename>a00116.html</filename>
    <includes id="a00101" name="sc_fxdefs.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_fxdefs.h</includes>
    <includes id="a00122" name="scfx_params.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/scfx_params.h</includes>
    <includes id="a00068" name="scfx_string.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/scfx_string.h</includes>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MSB_STATEMENT</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a842911b9a877b552c28fe646296dfad6</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LSB_STATEMENT</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a49a323234f71a30782f9771281a23a59</anchor>
      <arglist>(n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_big_ops.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00152.html</filename>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_BIG_MAX</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a0609636b1248ba2069b65857deb49c77</anchor>
      <arglist>(LEFT, RIGHT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_BIG_MIN</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>aaa2a1e1b11772bc7f4218aeee1e286c1</anchor>
      <arglist>(LEFT, RIGHT)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_bigint.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00125.html</filename>
    <includes id="a00128" name="sc_signed.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_signed.h</includes>
    <includes id="a00176" name="sc_unsigned.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_unsigned.h</includes>
    <class kind="class">sc_dt::sc_bigint</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_bigint_inlines.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00164.html</filename>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_biguint.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00146.html</filename>
    <includes id="a00128" name="sc_signed.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_signed.h</includes>
    <includes id="a00176" name="sc_unsigned.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_unsigned.h</includes>
    <class kind="class">sc_dt::sc_biguint</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_biguint_inlines.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00134.html</filename>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_int.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00137.html</filename>
    <includes id="a00191" name="sc_int_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_int_base.h</includes>
    <class kind="class">sc_dt::sc_int</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_int_base.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00191.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00380" name="sc_object.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00029" name="sc_value_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/misc/sc_value_base.h</includes>
    <includes id="a00161" name="sc_int_ids.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_int_ids.h</includes>
    <includes id="a00173" name="sc_length_param.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_length_param.h</includes>
    <includes id="a00140" name="sc_nbdefs.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00158" name="sc_uint_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_uint_base.h</includes>
    <includes id="a00236" name="sc_iostream.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00230" name="sc_temporary.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_temporary.h</includes>
    <class kind="class">sc_dt::sc_int_bitref_r</class>
    <class kind="class">sc_dt::sc_int_bitref</class>
    <class kind="class">sc_dt::sc_int_subref_r</class>
    <class kind="class">sc_dt::sc_int_subref</class>
    <class kind="class">sc_dt::sc_int_base</class>
    <namespace>sc_dt</namespace>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_int_ids.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00161.html</filename>
    <includes id="a00212" name="sc_report.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_report.h</includes>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a3a0fa0aac7295df1391acf37d9d281f8</anchor>
      <arglist>(id, unused1, unused2)</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_REGISTER_ID_FAILED_</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a57a5e8c62eef63667106ff8246604140</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_int_inlines.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00131.html</filename>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_length_param.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00173.html</filename>
    <includes id="a00059" name="sc_context.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/sc_context.h</includes>
    <class kind="class">sc_dt::sc_length_param</class>
    <namespace>sc_dt</namespace>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_nbdefs.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00140.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00236" name="sc_iostream.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00203" name="sc_string.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_string.h</includes>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DT_MIXED_COMMA_OPERATORS</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a14cc9339249bf50a84ed70c74c812a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_BIGINT_CONFIG_TEMPLATE_CLASS_HAS_STORAGE</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a727642114fd59eb649dd560c99fca95e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FREE_DIGIT</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>ad1bbe7739dbab5222883043131952d63</anchor>
      <arglist>(FLAG)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_BASE_VEC_DIGITS</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>af4fa1c288ae08cb4d26f66294d38e76e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_BYTE</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a369ecd38b3ab077fc235f892354bb46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BYTE_RADIX</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>af813bcb05e1dcf204e1404395ac4e237</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BYTE_MASK</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a25c8363b88d9b8f73cc6b1a98bba8d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG2_BITS_PER_BYTE</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a9794a22e433da1780d89dc408f225192</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BYTES_PER_DIGIT_TYPE</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a18464109b5f4fc79dd2891dc544ffd12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_DIGIT_TYPE</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a2ebb0ab20be1fcafcf9762f604500366</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BYTES_PER_DIGIT</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a6294f65ce9fd0f3a47a51f47d0712a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_DIGIT</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>ac151ab516815f02c5566c6db21dd3850</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGIT_RADIX</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a15926de397795b354e674374a1ae9237</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGIT_MASK</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a24522358dc4e1957d6b2afcf64adc4f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_BIT_INDEX</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a5556867b582ac1a0f05a10a83be6a03e</anchor>
      <arglist>(BIT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_DIGIT_INDEX</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a05bd16cb75520a1afe4fe933a1700db8</anchor>
      <arglist>(BIT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_MASK_DIGIT</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>aba0a65b115dc03b8b7bec15064538c16</anchor>
      <arglist>(v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_DIGIT_COUNT</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a0d321b32428d1af52688a7c6bb148f5a</anchor>
      <arglist>(BIT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_BIT_MASK</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>aa4ef518888f64bac09b9a84199f4e486</anchor>
      <arglist>(BITS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_BIT_MASK1</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a559cd5886122f3cb2b41ea9480441ad6</anchor>
      <arglist>(BITS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_HALF_DIGIT</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>ad5ccd4e50df2f3e89e4bc018dce43153</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HALF_DIGIT_RADIX</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a02c4f0a5ee7b5ffe06ec568e115e71d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HALF_DIGIT_MASK</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a3053d55bf90330c5d0d0c46d16c2cba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIV_CEIL2</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a6d90f649df39da8c7e440e79dd908fbd</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIV_CEIL</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a490ec0bd20745b2aaeab3d3eeff2f4cc</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_CHAR</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a844b54f8b6fad96bcab1648f54651aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_INT</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>af07b5175fb8244fc1bdd27f9012243fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_LONG</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a2f660aa23a5dbc0f4b8df48b4302b8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_INT64</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a00d403d53e8ff422fc838892b967e2b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_UINT</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>aa177baea59265c6711cc4d3888f95eab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_ULONG</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a158233c933acbd5262ad2a61f10d6451</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_UINT64</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a4a634f84877904d1c7efe1c6f24b6244</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGITS_PER_CHAR</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a2cd91a7889b99ce787efa35f4942ea08</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGITS_PER_INT</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>aeacc1a5741545b52ac65a9b08168b293</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGITS_PER_LONG</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a68febac496c913325534f8fb6724c88c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGITS_PER_INT64</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a4dd0c14291e9ccd90b6e47ac45fc9aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGITS_PER_UINT</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a3082149415e86f56f5df86f30e55d8de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGITS_PER_ULONG</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a1e7ac1f05e6b679b21d1592d761e000f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIGITS_PER_UINT64</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>abeca2ddcaac1f020fb793cf47d5b10ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LLWIDTH</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>ae878d433a84ab8f5626810dc7ba720d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INTWIDTH</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>aeedc66c3baa6469c2924a58fd3613bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_INTWIDTH</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a6edb67bade708e206888b4c84fa3638b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_nbutils.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00149.html</filename>
    <includes id="a00038" name="sc_bit_ids.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_bit_ids.h</includes>
    <includes id="a00161" name="sc_int_ids.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_int_ids.h</includes>
    <includes id="a00140" name="sc_nbdefs.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00203" name="sc_string.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_string.h</includes>
    <includes id="a00212" name="sc_report.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_report.h</includes>
    <class kind="class">sc_dt::sc_digit_heap</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_signed.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00128.html</filename>
    <includes id="a00380" name="sc_object.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00029" name="sc_value_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/misc/sc_value_base.h</includes>
    <includes id="a00236" name="sc_iostream.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00230" name="sc_temporary.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_temporary.h</includes>
    <includes id="a00173" name="sc_length_param.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_length_param.h</includes>
    <includes id="a00140" name="sc_nbdefs.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00149" name="sc_nbutils.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_nbutils.h</includes>
    <includes id="a00167" name="sc_vector_utils.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_vector_utils.h</includes>
    <includes id="a00176" name="sc_unsigned.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_unsigned.h</includes>
    <includes id="a00155" name="sc_signed_friends.h" local="yes" import="no" module="no" objc="no">sc_signed_friends.h</includes>
    <class kind="class">sc_dt::sc_signed_bitref_r</class>
    <class kind="class">sc_dt::sc_signed_bitref</class>
    <class kind="class">sc_dt::sc_signed_subref_r</class>
    <class kind="class">sc_dt::sc_signed_subref</class>
    <class kind="class">sc_dt::sc_signed</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SCFP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aa8351c116f477646e475a94b64036596</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCFP</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aa8351c116f477646e475a94b64036596</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_signed_friends.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00155.html</filename>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a0a3963670e95aad89ac2d17cc93f8bd8</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a5365c8989160266f1c2042b0cd0b65ea</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa5ee0c3dd8a826142ed9b0fc570f3ff3</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a810b981070ac25a2844eb0f87180b3eb</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a2b12ef322d551a6854a24712eec17e85</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae31710581526f37c8fe903c2e79e6deb</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>acd38ea2fe477f2410e38fdac701576bb</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a1029a6e26c29fef952b0b3045fca4fd2</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab5d05ef2f661ce30cbd12423cb454309</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>af0801c9ce9a43058ca9d45bcadf4f602</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a5de771fc926eb5eff65399cc0f76a88d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a4bf86143c0017355ab21c522ad6a3871</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa86e79499f8ae6693b54b3c812cc7ff8</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a2d5c674fc25ca0a220ff55313e54dfdb</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a888b157f3b4a8018d1ad98b93c7353c1</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a72cd882297b8f42451ca131c76c85d38</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa0f905fa762e77eb1a504b4fb8d30e9d</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a493540e7e0a4dc9332403258c11d88c0</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a7e03c38826c9e73d428a1b75bd635fbb</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aec84ad76105ab966eaf24d92f6f1092e</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ade94358b12e265b925f1a17a3a1f4045</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a92fe773dfac3d6b7b7f97c5e97cf5c3c</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae1e874f17fed22945f9089d989f9fcbb</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a31d1c07386b73217ceec9ddaf55a3d56</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a0ff841821c0876cbe420d86b0f1ba541</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aaf04a48e5eb2ceded2b15defd075fbaf</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab96f7920066c9d4d5facf21f0cfcc331</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a482f8de5711a40a138a83a0b6b3c2e9f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a5adb6b18f1d99737e8e94554575ba1e6</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a23febdbe7f7666ab6d163cbd973cb677</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a90bc4d12b724f69ed1ddae9b1994620d</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>add0668ed47c241ce98156e59f7c4efce</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a7c94cf5725986e00e04460b9a84c623f</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a5f6c58aff7063ea1c0646f63a4cdb9e3</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a56ecafc19fe1f58966ab2adf5f4e21d5</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>afaf3aa8b2cecf61d286f18b0c1bd89fc</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a500051773e135eb3567f0d402b1b6783</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6d0e5457525bf053bcd7e86c5b5198b9</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a26f235ca3e04f4a4eebbb602b18a4bf5</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a4221cc940dd023354d47b3da6d46b909</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a5be7575ba5824276ce1dd1d83754c14d</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab447bc2c23f8998c8667a59fca84fdc0</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a63b6634e9013eaacdfe73c92a63c95e7</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a097f18a4fb84f3a77ba7aa9e3e2c1927</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a7edc66426e6dff5258d1614ee77f52da</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ac3b9ba1c23f740987ed9971c74a18f28</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad3172689fde7bd4cdbab264f079ad29d</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>abed79f3ab3967fb3ded2d2d3e44be5f1</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a93ce57789f3db96d1f47bb2ece1bd125</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>af15a0816cd5183fec1190340e46b99d5</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a088ec795b7dfd60b4718d7da5667595f</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a83f6fa06b4251c1326b8f7a34468fb21</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab06519be2281a207bbf405bea3ade861</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a670de03ac9058f975401f3836f0db9ae</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a0acf057ccf1bce545040aed2a4755c81</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a303078416dac4138b84c426766a9f63b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a61c264b774fdec2faf3e5b5842352a06</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a2d7eb22dee9da16cc6d724a24fe15aca</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a137528557f6953c6795abb4ace714306</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae3e7f2e45b65633a5ec2f5ba6ed3e8a7</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aff462872aa6c8f43bdc83a62492b9ecf</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a3bc1fb8bef750f081d9d27493042c781</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a08a01499e101c5ef5b3fa65e610fc947</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a4ce30686e41b9a835fc4d100ed8b4d43</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a68ae0d0b74e002aa408906d18cf1b2ba</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>accc703f8c78eab7a0d17dc28d3a3cfe6</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a3cd3a07e4213675234244527da3456bb</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a726d516def22e02fbe70db67bb2faf2f</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab77302885ae2e8f2e0215f46025cddca</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae297cb5f460f5ed2ef234c8fbe90b8a2</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6f3b8dadc6af61e8c900025e99649788</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a9bdf12ab1c74d87cc32f8c16c752cdf4</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6d4d8c319f2bc15ad7d28456abde8d53</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae1c66cf668e4ed0e9253e96bc17f9267</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a35fd2fb3fbb5e5658b5c8e58e22a66b1</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a232d4feb5d97b434b4e1b2c28f3d0a44</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6fe73a564bb7f6eb99d9ffab5cc70e0b</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa06158bc53498eb2876dd7151d4ac4e6</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa3bb3d06a0ae6668261263da665cbdd7</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad526d4aba534ff20cab92682b2a973f7</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a67e505398021749464a9761a6a7b6344</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a7fe4df2b2db5bbeb9fee28f9a76c29f1</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ac89f1d328640b59ac100a3f80b43775b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a2b617d5ffb31b938fe7d01bf070d1502</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a263c2e53c4e360d90aece6064a271b03</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad3635bf2289a0c0f5162cf6f82d34ba4</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a014225267a0cf3bf01f8a433bfae84c5</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a463df0d18340b7d5d8ebd4931f088268</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a25373f6fc10417b86e8fdc051c9325db</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a4e0fac399d06f7a7d2ac1539e64f5401</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a28650735231d00bb8cd186ba393864ae</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a0768226dc4bc07c603e96dcaab2b4bdd</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a2ff83e339a2f3ad53c369ba52f397322</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a30099cb0e823faee614f42eb7f173c4b</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a7c02b2c76f6cdd0604ba972bc60bc98d</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ac36c97b8bc79d23614d0c582bbd02bc7</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a231a5a45dbf40e03cb9b538965b9a684</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>acedd73a9e2bad2cf9f201a7fac6d2ab7</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a2bd53f7fc940834029f105cbf37afecd</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a7b525d131dd76ee6b96837bd02f0ecae</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aef5e4b266b0f9a6a70df5efa91321d77</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a202940e2acf5fbd35d958e0f50743e6b</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a2601db096d866abfc307fbda649b9e7a</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>af79e53688ac2bff794c132adf46dea09</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6e230f8d807fde51ce6c2cc8b7b0154c</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a0dc74c717a95fd5714f1d2984c934612</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a321a73aa46181eba8c796898a27c0aae</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a37603c5dda1f98da24e98452f2b2eff5</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a19165a459f0047edae4ca95ead5bd4f0</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab333bbe91621502c21b85e89e4ea0e3a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a458c912c80314345c108d5ff8100a41c</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a74f4c15972418db58c3e8de71f2205c7</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae24e5fec39d8f2915466d5428df118dd</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a4a1aee9a305c72c9f66161841db64e1e</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab3146df994e786ec8d595242876fcf40</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a08d0429d1a63bd4ffe0f88521a339deb</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a5a922d359e206172bb1c9933cddb50c4</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a18d0b5c16d707b795221eaebd714c34d</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a2bf4d7bbb9e0a94ddc839087dfea4136</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a3319923e76edaaf10dc6907238f0f5e0</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a446d98a7a9879e2f9ac18fd312f172c8</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>acf70f6dd98e341d82fccd6e2348bff98</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a91de90ccf7405afeb7e45c731f81798e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a760cbfbb7a53d6d58e22bfbe20f13ac8</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae953f87754580026804822e44060ee90</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a170cda6573a6f162d2afabfbf330da9b</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>af82c1b07d8f21076af0a576544fda96e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a585a34cc04b51610948bf2a0ef43bb1b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a91890f67f7371d5df996f4a8c44e29ea</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aaa28ed10b31dcbd66e07769dbe16f948</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a2db3635f89dc3e8b9f18ccb41c2440df</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a5c665624f8cac7acc23d6a4ce563b131</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a23a886daee6c27d88c7b53a08b26fed2</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab1e0d524f39c19c7bdaa2b017af89688</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a625ac289bdc333f0b9a925778076ce15</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>acb353838c0a9804b312c2f3b3f37263c</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a95e536b28fbbb89c4a9e56ac9dcd3c35</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a40ee21552d544020b4d08462f3c5b150</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a98a43ac910d9c8a666a784acf7677eb0</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a4de22683668d3703363a0255ab86f13f</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aeb9f38ce30c1ef1c45a6743cfb1ed7b3</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a3c838b4c7a2da7aab452c2c8019850f7</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a8c828cb8b2e78f4747f63442c7aa66b6</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a995bbadf7cd6651d06d9a7017087f1c3</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aabc613d77f31b61a6d5175ff5d3f73dc</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa13cdacea129c59f9fa0d0de82b4e4e1</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>afd9631f78aa5a3954bca8e9e09e1cf3e</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6954d17ed14ed754aa9b6f87ce6ff74d</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a1e7b1605325fe81c71b5c7e968d582a6</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a5a4baa49e4a236e6126e3427b2161ddd</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a84d32180b3943c2dd482ab41277e6908</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a19ef5be4dde3abfcf1313b91e881469d</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a23088ae85a27064fc69f11e4c4a3fd19</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aad38206b9ec9e597779e28e0f940634a</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>abfa3eecc00a777a94fbc80ba86e05ae4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a1b1fb5ec624c24a29688d0d2966d49ec</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>acfe5a5785488ad423810c60fb0f1d98b</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae1f6442bce830084960a0437a696dcaf</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a5423e4bfd1557ac57c2427d38a6d30c9</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a9fbefafc6601ddc32242c7523981e6a0</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>af6392e0fe8dfbe97c491b099c1c94ca9</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>af6e16f364cb06c3c502410967b550253</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a08a01f729850e79a31de928afd6a8cd1</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a242181ffb3fb7c7d443aa9435790a50b</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa99a282a8207d98ae8efb0df31693602</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a05176b4f5d8d383b1eed2cd77de93123</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a9477e1606247ef84f67fca9c35113544</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aca238c312baed0554f89d90d90a61129</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad55c3dd62fe48ac5780e555fbf8c9ff1</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>adef5fd2be62812caacd4a16d9b0de23c</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a7d9cabd4cd9b3c044a988e254b7c8850</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aee48172d20730f6b33087851aa728d66</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa93a42a8b0a029dec26b79370c36d830</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a96a911589079bcc6d40f3dce8f004edb</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a319e7796a76a2307774990415810c9f7</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>acabef20889a526c178f752a219c00f56</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa341f82bc48236d2e577b2bbb92d598c</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ac2d8b1452cf7d657bb5933418c40be5b</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a84f6d6881239ca8422fedca74f892c02</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa604bc3a61a5b5f43c6fa1ece1ef5dbd</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa1e63b7e2ff2e95d9d08ce6568be3ce1</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a9a10b3c3932e90fd3deef2e8e40ce7aa</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6ea38811e509a4d2548318ccfc53c598</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a377976bdedc8dcb216b0f9dbc183d7af</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aca3157e3205a115823c3162406feb3de</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>afa4746f2c04b453dd5df4647c2c6b09e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a06042f5c86813338aa8141360968a44c</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>adecde300441f8b650f3df1b3856293cc</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab3bda6478088c0be7fd68c8bd79b2350</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6cd1b4e654fa1937ed099e61e27ba3f9</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a0218fa8aed6683e4f8b6f8d4ea23aa3b</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa3dbd41a112fa0afe67e1343b26f1b03</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a83946b80e67452576ba6d86189c15e2c</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae4d47b4f80bfe5493235a3826185b612</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad3e3d2fd6b89e2f06c781fb18b2f7258</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a1f7e6e9356e8f9beaaf2edd9b6a187cd</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a74e74ae31668e9abc19805bfa280e9e4</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>abd5877c787e2960b4556a2c07b6fa6c9</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a724e3074c9522f1c281be73858d923ab</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae26fbfb7433d10629a6c3d3e348408bb</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>af6863ed9ec161b750a986099e8d54dd8</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a8df466b24806bd843bbd619c852b3024</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae6212900d764c0c8c2919e7857e15063</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a43c92753603abdfec4e07af359f49a5c</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a03f441e4b25fc0880d283487cc5fbd73</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a21bb2f5ad2d47229654fe77de4592924</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad3e4a9b95f79a16d2395d3066eb09360</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a71ebc52f05e6c27d71bf0346c0ef36f2</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a30c093b828d6c6e91c77e284523bf88c</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>adea241707f3da7e070797f8aa40c7152</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>acb0bf97f0f93602b045219f2d91700e4</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a87d7eb3a62755d2241aa97efa04aadd4</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae8ef407d0929f088990758d3ec53dba5</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a15eaac87a9a4178727ef12be9a3c141a</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a1e0a9c72039ca2c410590b77a52bb597</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a7c8340d23e00e459c624efc64a9c9dee</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a34c08cb230010c71e738f14dd1cb4a12</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a8b22d0a9349619b537ee1d3aea9ce06d</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a2bed309e5701b5255f1b013217202849</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a4adf385b713928eaab04ec3cdbd1c977</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab49b3a7dd563c3e221f462f63e563ac8</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a82e59b7ebfdde2e3bb74b4ef720d80c1</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a4839efa755f594b68a67721deb685540</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a235938ec8329df69a6c044939f9263d0</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a5daf99b4f026402042b72b3c2684d4ca</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a796c2d3dbf6ecd54abc36f6260ee5e1e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ac2530e2c983c25e57ef1a11f07a79592</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a24df4c354400a9b532ddb3340226158d</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a86ab2868b37b7a4bc0134a2f27ab592f</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a7bbd6303eb47241429b8014693615726</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a104a40a3d64cfbb2bb8eb93ff7b838aa</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aee235b148c58818c31e528266d7be717</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a320445f8e9936ac8033ce168e2b23968</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a94feb39183fc5199acdcc6b9fad8c0ed</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa9ee0bc887dc22abfb7ba2959a2c382a</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa12fa06478951670ec8b5a5f76bd96bc</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a7e1b749474a1670210129af0fc70a0a0</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab465e86c59309980a8cb60cd4044176c</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a4a035731cb1ef51ecd5a943e01b6cbe9</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae2e83b4b5f7b08616485450b72d3c229</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a8811db6eae6d8fbbfe4dc3bd4f398dc6</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad29e3afb08e22701a94176616833b86d</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a434ea328292c57940a952aa4668bdfb2</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa1d320cff4ca6579e724787e1581d13a</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa7ccd4223e854bfc650ad08ee214def5</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>abf5b30bd992dcb4aafe0e10d2d209735</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a270cd06ca1a90f281d6b092c0dc09dbd</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae34e3e417d71a0a1ee21574bfc2bd8d8</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a281574557153ac611cee36e08f335348</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a1124848ddab659404f1b26292cfa80fb</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a70678083f6bb09563be606db46f0e506</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae41a4f100a88d0c11414df5fa2995a76</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6e9651ab1e05d6415425afbab50beb9d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa7a6ac38e27b8d5621773cba43de5f2c</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a9191665747a9a189f39d495c72d5dd03</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>af62863f1a40374c245e4b55e5488a556</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a1b413a096e00fc9ee3d51b47f7311218</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a2f6b57b6ae569c0533f1e15791a6e04f</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aeae75455e9076a2931a1ff2eb937073c</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a0fcf4af3ed67f5e640224c100e4fbea6</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad8c77252c48f1ce29797e5ec1c7d8156</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>af3be724c1f6ef57727f3fa6fd6870feb</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6b11707d008f05632252cb72609b4481</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a24bb53c02b857ea2e6c3176f2e9898dd</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a65260075e696c5c25c5faae11f6a59b0</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a405cc7dc1608015797e2415b65ec3957</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a9f2953217b4bd7e37b82c1684b3a66d5</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>abeed4b3ab9414b15d2ceed37d51a6e8a</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a87a9955d354ea54aeacba2247f69d028</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a69049db55979439c8cc406377dea48d6</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa6da67eef85005d06c3bfdbae0e32194</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a27bf0493e8a11abf5a5cc571604be3f4</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa70db77bae7b4c0dc3f85bdbdbd1d7f4</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aaf22d6b3e96086e794368a3c3fbbde95</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a47c255a8ae08d463371e96e36a084576</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aca46c8e94cdfbe2b2a4f3d6160b3c877</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a8d739fa56bbcadf6bea582dc6e153c33</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae579a4c88d48496b79d57d298947a102</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a682e78d237b474a839c11ce87f3b99e1</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ac3f30df26d1b83612d6fb6c213838b78</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa8a39cfd4e9c01d0fccffbbac522abba</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a2b4ee05125892166a57f4f0468bfc58a</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a8603cdb188ebf5d50becee8405efa233</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aff144d38a293005fc56fe87205a92de6</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a927c212afe21ecdf9b53056c423a3611</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a188dbc5fdb7b993987203d0879eb88b5</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a097bc88703a726fc1a2e6383de17b288</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a50d5f4874d18d89bb96efebdf3778947</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a65353d1cf3fa7c5bc89ab1c6c55a919e</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a59c52461eb0e7957e40248b13c895cda</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a5c94d1492aeee5e0622b306fc339f962</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab385a07a80bf5f3c67ec2a60af2f0f74</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a30a8d16035cbf0a1455cd058cc6cf146</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad6d76686712b1f8d9dfb5891e14c8144</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a5fa151862d0eb19118a563a58b56c3a4</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a732b23e364e20786e1c9ff19961d420c</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a23f472b80606550f4c4a9581751538c2</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>acf5b776578f24161ab260ba61cadec05</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab57a36ce1464386aa59837186155a8a9</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a334fa51636284bc186cbedc11557dc30</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a3a719bdd65e5759f3c2fcebc97921727</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a9c055b966a30f21c51f7afa86b3becb1</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a1903fa0fa2a6638c3b967c2ba7f05ce0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a7bf4f3cf9055d542c7ed2d85ef20a3e8</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a27fe126af541f5a6652c171d5a6a68a7</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a1afd829d9e96170f1fb90bc8785a37c0</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a161ecd1e61079031b3d5741699b0d8e9</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ace4dc8efc0a81a654be203d11c8879f7</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>adf65f03295dc2b7fc648cb238443721f</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6bcc5c2f3c3f269b6eb2923d02aa541e</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>af61b9e97e97173836befbe1602111d16</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae0cc7bb2c1335c19bca6b2602b8517aa</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6ada046b185eeecbbc2dbbc225a80af1</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a39d05575d43433fd282fafefdf8e9676</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a1073314567dc79e4b07d887f3aeba5b0</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a8e56f86c2685c08b82f555ee9e7cb479</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a9aa53af3770a014d0b124c6c93ff048b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad92466c36693dd92d1393a64d5390c66</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad2749d95f9d673ad1e6998b682e42337</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae305a73e495dce5cbd9e9885364e223e</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae704f1464e6738bddf0751c1569eda0d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>abe3f371a672295675ed807cc8b03c2b8</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab03ec2bba03e97a4f0d2bb6bf46aaccb</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a902b37ffc8b04d7da861e290295df327</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a79a1db10526709af7764a8e393447a99</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6878f84200c4276aa4aa3a8dc7c737b0</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ac677d49e6a995506477f17e13f5c2e3f</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a3015adc5a789d547e1d3e76cf4f2449e</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad49ae46f2deb8ce23ebdb04660a29082</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ac4817c4b057a11c5c125d6a1d2183590</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad1158c1166b9cc496894690aaf0f2aa9</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>abad26104c9aee91b47b9d3aad485e3a7</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ada265d2812f8321edcfcf888c1a707d7</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a59c49ec662e3ff6c318e6af840747ec1</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6a41ca80e64d1c1a9f899ed39e1bbf1d</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a1c053cc2bffc7b42d9360ecd4de68446</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a4e4fb6d72fab4565ed92c9a55d6be97b</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a51738aabe599004af8c349897a1dc7f7</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae6934b3578249d96dd4e6b25d8c7c4e6</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad8729588d38263160930c4018565d980</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a0b01c6a3a8aca675cf156bc521d859ab</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae9e6a5d1df8b7a2f410da6eb3f42fe37</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae06e248866c57464a10570604b6e5bff</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a7eded84033bd3f200bbfdf4ffff83694</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a0d9d0edcf03eb39db688f7c91ceb6902</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae17924df03e2bafaee63b7cc91213f41</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a2c4faa4f22e7d9f53a8cf878248d2aaf</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae99dc56b10b161e0eaf18bf7d260f940</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a2ffebf876d272d7d7f6173c43b42ad85</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a652abc5f47c4e3fa0afc875df04f7c5f</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae27b3331ba05b599d83fd47dd17d19ac</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ac7101e4b9f16cd4304dbc92761267373</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a4d60de479212d951a27a34433cafb1a6</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aaede57017d264aba82637ca31ebcc0aa</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ae7c3d6509874d7b11d5b6369b6989d15</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a57eeb29433fbd31e804522424ae9cdc4</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ac27f828277f9f4876a8773712f922fb0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a882f96f00cff4d9821726935b3615934</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a92e4df74f69060d1d96001e832996b34</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a81cddfb8964386e166c8039c8e1f9f4e</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a7dd1412d5c374ce1d52d8e103ee710e6</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aab0bf4d340b99069e7ef6854ab7f83bc</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a02113cf0dcd10d6b7898f9b5d498fc73</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6351f09a53140d6440120acdb2a74f5c</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a94057e32d1b8b4da3a4265976ef6042e</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a5facfab742b29399cc6e9d6313b343d9</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a13fea1aad1a973c10a4337c6f42ec7a8</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>adc4b452e3712d9b3807bd8c8c4fb9f86</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6ca631a91ad7b70a52236f5c69a641e2</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a82ec1e51cd1df43c1eca49b81a7b58cf</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>acc17d1846fc176a9ccac89666428379c</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a0024dcc120870bb3708b443b56a62916</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a76193203df5d3f2f69a5ec65e4eeeb99</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a03a2d49ceb1b9ee587ba52e4dd995b0b</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa3c3b0f229f7f88e368e0efab1b83952</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a01b9bf3e31ffdee51763ac6ad7806f78</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a05dcbb4031e92abdc10a4617bde429d9</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a36d4aab1bcf22c69f0ca06d50fd9d282</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6558c2b935bf1aab07e140c7ea1bfa68</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab37d129dd02f86df77dbe603ed63b447</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a0d5baf22aa3337394317651505428bd0</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a266d0750e1b3dd26f5c049969001c0f8</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>acb49d7a29c0ed461a80e0ce6b70acdc9</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a9820f04956f9392cb85e9f59b72182f1</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad6c5c19bcfd0c092db8df0011f82430a</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a469df02bb009d72807ee1b42bef99031</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a9fb559ca43da6d7451765c5d3a2dde81</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_signed_inlines.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00182.html</filename>
    <includes id="a00167" name="sc_vector_utils.h" local="yes" import="no" module="no" objc="no">sc_vector_utils.h</includes>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_signed_ops.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00170.html</filename>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OPS_MIN</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>aeb173eb61dd23d205081f9c551eafcab</anchor>
      <arglist>(A, B)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OPS_MAX</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>aa35014ec16d50eadc58f1cf27c1771ba</anchor>
      <arglist>(A, B)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ADD_BIG_BIG</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>af3f4a9f3ca51139d146208a767eea939</anchor>
      <arglist>(RESULT_TYPE, LEFT_TYPE, RIGHT_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ADD_BIG_NATIVE</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>af84cc741e49ccb1e25b0296deefab699</anchor>
      <arglist>(RESULT_TYPE, BIG_TYPE, NATIVE_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ADD_NATIVE_BIG</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a527be4556b8c2bc511b4efef5068c391</anchor>
      <arglist>(RESULT_TYPE, NATIVE_TYPE, BIG_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIVIDE_BIG_BIG</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a4ac4a629db82358e42b1e307c9ce900f</anchor>
      <arglist>(RESULT_TYPE, LEFT_TYPE, RIGHT_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIVIDE_BIG_NATIVE</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ad086ca47c8f80e33aff1a801e7bffb1c</anchor>
      <arglist>(RESULT_TYPE, BIG_TYPE, NATIVE_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIVIDE_NATIVE_BIG</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a47904edf0433327998b5dbc45aef2c7e</anchor>
      <arglist>(RESULT_TYPE, NATIVE_TYPE, BIG_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MODULO_BIG_BIG</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>aaecac1bc6b9fd033d98f1c3eac4be298</anchor>
      <arglist>(RESULT_TYPE, LEFT_TYPE, RIGHT_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MODULO_BIG_NATIVE</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a96d015b3c8285188fd225fb8b8dd1bd1</anchor>
      <arglist>(RESULT_TYPE, BIG_TYPE, NATIVE_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MODULO_NATIVE_BIG</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a900f645a8ea407a8027e7e620511acf4</anchor>
      <arglist>(RESULT_TYPE, NATIVE_TYPE, BIG_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MULTIPLY_BIG_BIG</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a9112c4a897a672108841bb339544a30a</anchor>
      <arglist>(RESULT_TYPE, LEFT_TYPE, RIGHT_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MULTIPLY_BIG_NATIVE</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a7075ef8583e80deae2da67846aeb5e96</anchor>
      <arglist>(RESULT_TYPE, BIG_TYPE, NATIVE_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MULTIPLY_NATIVE_BIG</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ac640091c9e1766713d3a9de9e74766af</anchor>
      <arglist>(RESULT_TYPE, NATIVE_TYPE, BIG_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SUBTRACT_BIG_BIG</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a63d864976d87e0fa2d19f54a5665f7dc</anchor>
      <arglist>(LEFT_TYPE, RIGHT_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SUBTRACT_BIG_NATIVE</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a594c236b7f285792f517a40cfd79f4f4</anchor>
      <arglist>(BIG_TYPE, NATIVE_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SUBTRACT_NATIVE_BIG</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a0814fe6017f82c2f5b36ea3b50c342ea</anchor>
      <arglist>(NATIVE_TYPE, BIG_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BIT_OP_BIG_BIG</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a04c9b3b0624761b069d843443a5af695</anchor>
      <arglist>(OP, BIT_OP_RTN, RESULT_TYPE, LEFT_TYPE, RIGHT_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BIT_OP_BIG_NATIVE</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a2474e20e563cfe845b38426b26abbc16</anchor>
      <arglist>(OP, BIT_OP_RTN, RESULT_TYPE, BIG_TYPE, NATIVE_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BIT_OP_NATIVE_BIG</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a506ac5c8c2bca56e8e7cff9701a7cded</anchor>
      <arglist>(OP, BIT_OP_RTN, RESULT_TYPE, NATIVE_TYPE, BIG_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BIT_OPS_BIG</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>aefa19726ae07d753319955667b5dc972</anchor>
      <arglist>(OPER, BIT_OP_RTN)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_BIG_BIG</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>af6272b18f490b30b4f4a7e9c13c14b40</anchor>
      <arglist>(OP, LEFT_TYPE, RIGHT_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_BIG_NATIVE</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a36a1737505b0ca0a142c8797f1e7fc8a</anchor>
      <arglist>(OP, BIG_TYPE, NATIVE_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_NATIVE_BIG</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>aa842d6335743e7d350b3af7a0c6dbc47</anchor>
      <arglist>(OP, NATIVE_TYPE, BIG_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPARE_BIG_OPS</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a56e866ad7f8dae67ce723ea12903eded</anchor>
      <arglist>(OP)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BIG_OP_EQUALS</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ab9fed0cb956167da4cf4d60b3706e713</anchor>
      <arglist>(OPEQ, OP, BASE_TYPE, OTHER_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BIG_OPS_EQUALS</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a0567f0c5e7b6c4cf6e46508e407650d4</anchor>
      <arglist>(OPEQ, OP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_uint.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00185.html</filename>
    <includes id="a00158" name="sc_uint_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_uint_base.h</includes>
    <class kind="class">sc_dt::sc_uint</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_uint_base.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00158.html</filename>
    <includes id="a00380" name="sc_object.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00029" name="sc_value_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/misc/sc_value_base.h</includes>
    <includes id="a00161" name="sc_int_ids.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_int_ids.h</includes>
    <includes id="a00173" name="sc_length_param.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_length_param.h</includes>
    <includes id="a00140" name="sc_nbdefs.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00110" name="scfx_ieee.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/scfx_ieee.h</includes>
    <includes id="a00236" name="sc_iostream.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00230" name="sc_temporary.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_temporary.h</includes>
    <class kind="class">sc_dt::sc_uint_bitref_r</class>
    <class kind="class">sc_dt::sc_uint_bitref</class>
    <class kind="class">sc_dt::sc_uint_subref_r</class>
    <class kind="class">sc_dt::sc_uint_subref</class>
    <class kind="class">sc_dt::sc_uint_base</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_uint_inlines.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00179.html</filename>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_unsigned.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00176.html</filename>
    <includes id="a00380" name="sc_object.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00029" name="sc_value_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/misc/sc_value_base.h</includes>
    <includes id="a00236" name="sc_iostream.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00230" name="sc_temporary.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_temporary.h</includes>
    <includes id="a00173" name="sc_length_param.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_length_param.h</includes>
    <includes id="a00140" name="sc_nbdefs.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00149" name="sc_nbutils.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_nbutils.h</includes>
    <includes id="a00167" name="sc_vector_utils.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_vector_utils.h</includes>
    <includes id="a00143" name="sc_unsigned_friends.h" local="yes" import="no" module="no" objc="no">sc_unsigned_friends.h</includes>
    <class kind="class">sc_dt::sc_unsigned_bitref_r</class>
    <class kind="class">sc_dt::sc_unsigned_bitref</class>
    <class kind="class">sc_dt::sc_unsigned_subref_r</class>
    <class kind="class">sc_dt::sc_unsigned_subref</class>
    <class kind="class">sc_dt::sc_unsigned</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SCFP</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>aa8351c116f477646e475a94b64036596</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCFP</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>aa8351c116f477646e475a94b64036596</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_unsigned_friends.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00143.html</filename>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5365c8989160266f1c2042b0cd0b65ea</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7e03c38826c9e73d428a1b75bd635fbb</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aef8bab49516eeeb423551f42c24536d4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aec84ad76105ab966eaf24d92f6f1092e</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ade94358b12e265b925f1a17a3a1f4045</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a92fe773dfac3d6b7b7f97c5e97cf5c3c</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae1e874f17fed22945f9089d989f9fcbb</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af1a474bf689b807f9c0f557866db600a</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae682eb0d5da7a623f91260b85df72493</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9f6ede41777969e75be1bda94cc19280</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af6e3fe65aa1f49f4877adad53565f358</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a31d1c07386b73217ceec9ddaf55a3d56</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0ff841821c0876cbe420d86b0f1ba541</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aaf04a48e5eb2ceded2b15defd075fbaf</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab96f7920066c9d4d5facf21f0cfcc331</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af3c4f1d0481c7105899c35f9ab4d92aa</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a651d3c217b58352f47060b8bc1baaaaa</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a981215284a9aa2bb4ce3812dfed03a4d</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afd8de74db4ced0cece7866f21ed1be56</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5adb6b18f1d99737e8e94554575ba1e6</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac3b9ba1c23f740987ed9971c74a18f28</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a318e9ed4def5df630e168c382f8d9441</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad3172689fde7bd4cdbab264f079ad29d</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abed79f3ab3967fb3ded2d2d3e44be5f1</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a93ce57789f3db96d1f47bb2ece1bd125</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af15a0816cd5183fec1190340e46b99d5</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abdaa8c8a33280cd02fdbe924aa229c1f</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5cb11c26b1e164e25ad3b28ef89e54e8</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a716a56b8f176ce5c76bd83e71c82d738</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9d11982deb82301fe07cbedfa567d54a</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a088ec795b7dfd60b4718d7da5667595f</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a83f6fa06b4251c1326b8f7a34468fb21</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab06519be2281a207bbf405bea3ade861</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a670de03ac9058f975401f3836f0db9ae</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3e2431721de09d7a3fc8200f698eafe6</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9060b24beff73c20865e0884a2b49705</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a11ba187546089b6cd1fc690b9322e4bf</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae5c58081bab913344468f8765c6a5a11</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a303078416dac4138b84c426766a9f63b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6d4d8c319f2bc15ad7d28456abde8d53</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab4264241af9d2b444ecb76f1e50d1e4a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae1c66cf668e4ed0e9253e96bc17f9267</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a35fd2fb3fbb5e5658b5c8e58e22a66b1</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a232d4feb5d97b434b4e1b2c28f3d0a44</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6fe73a564bb7f6eb99d9ffab5cc70e0b</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a543217be7ef44b00e71568e037daa937</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4e53645e34ed85acd76bbfc135a9a056</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af860f3f807ec3178e8513077af340aa9</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a450f0f835c91d15dfbac0fff7f722d64</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa06158bc53498eb2876dd7151d4ac4e6</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa3bb3d06a0ae6668261263da665cbdd7</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad526d4aba534ff20cab92682b2a973f7</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a67e505398021749464a9761a6a7b6344</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6ff36feafa35df57c11cd79eb727a1ae</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2f6daac9549f979be206d564a1757ebc</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0e480a456fe3c07bef6e21012c2ce6a3</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a433009f31188b3f0ac3da74477eb59da</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac89f1d328640b59ac100a3f80b43775b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7b525d131dd76ee6b96837bd02f0ecae</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aef5e4b266b0f9a6a70df5efa91321d77</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a202940e2acf5fbd35d958e0f50743e6b</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2601db096d866abfc307fbda649b9e7a</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af79e53688ac2bff794c132adf46dea09</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6e230f8d807fde51ce6c2cc8b7b0154c</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0dc74c717a95fd5714f1d2984c934612</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a321a73aa46181eba8c796898a27c0aae</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a37603c5dda1f98da24e98452f2b2eff5</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2030c05660b8ef54c7c9ccbbdfa804f9</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afcffefc20e3785d745e28a2107548a07</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a43ed8bfdab90634514bbedaccb172078</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abd766a333dc4e90bd6bf81ffa3379d6d</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac0162addf9a2dc11925397279d922851</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1f183e524609108623bb9bfd1f2a0a04</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2776e1b8d1011b0dadf4c15432a8c91e</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>afe94e7a5616559fecd717db67818e776</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a383b9626ff2b52afb771166b7cf48560</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab333bbe91621502c21b85e89e4ea0e3a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af82c1b07d8f21076af0a576544fda96e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a585a34cc04b51610948bf2a0ef43bb1b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a91890f67f7371d5df996f4a8c44e29ea</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aaa28ed10b31dcbd66e07769dbe16f948</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2db3635f89dc3e8b9f18ccb41c2440df</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5c665624f8cac7acc23d6a4ce563b131</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23a886daee6c27d88c7b53a08b26fed2</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab1e0d524f39c19c7bdaa2b017af89688</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a625ac289bdc333f0b9a925778076ce15</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acb353838c0a9804b312c2f3b3f37263c</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a95e536b28fbbb89c4a9e56ac9dcd3c35</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a40ee21552d544020b4d08462f3c5b150</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a98a43ac910d9c8a666a784acf7677eb0</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4de22683668d3703363a0255ab86f13f</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aeb9f38ce30c1ef1c45a6743cfb1ed7b3</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3c838b4c7a2da7aab452c2c8019850f7</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8c828cb8b2e78f4747f63442c7aa66b6</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a995bbadf7cd6651d06d9a7017087f1c3</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa13cdacea129c59f9fa0d0de82b4e4e1</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a08a01f729850e79a31de928afd6a8cd1</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a242181ffb3fb7c7d443aa9435790a50b</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa99a282a8207d98ae8efb0df31693602</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a05176b4f5d8d383b1eed2cd77de93123</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9477e1606247ef84f67fca9c35113544</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aca238c312baed0554f89d90d90a61129</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad55c3dd62fe48ac5780e555fbf8c9ff1</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>adef5fd2be62812caacd4a16d9b0de23c</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7d9cabd4cd9b3c044a988e254b7c8850</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7a95e0f034ba3aa14c6fffde80386a0a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1769e09216290da90c60c14bc6fd58fc</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4a09570b50163d5a385f71ff42ec5dfa</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8c7d001d6354e9ed23e109c87b21ca21</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4d4a3ac145a29263b41790c83b4094db</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a717ddd0f052d063dec73c514ce827e37</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3695ba345523b7291d3461db147c70e2</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6d5dc4a31170d6d750112891bf335ce0</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aad44394e13a734b4c969c3033d2eb2b3</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa93a42a8b0a029dec26b79370c36d830</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6cd1b4e654fa1937ed099e61e27ba3f9</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0218fa8aed6683e4f8b6f8d4ea23aa3b</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa3dbd41a112fa0afe67e1343b26f1b03</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a83946b80e67452576ba6d86189c15e2c</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae4d47b4f80bfe5493235a3826185b612</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad3e3d2fd6b89e2f06c781fb18b2f7258</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1f7e6e9356e8f9beaaf2edd9b6a187cd</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a74e74ae31668e9abc19805bfa280e9e4</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abd5877c787e2960b4556a2c07b6fa6c9</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a67f406542c02ce1a6fa9c344ce8ef751</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a193fb71f3288433ca985d65a8320a346</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a953aef00ac593795d6c3c6790d7385d1</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2dc44a24df0ebc911aa98baa60b4ed7e</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7b58a64000baa0dd4b7da1bdb7846d88</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad1ae68cd3f5aa4711f4a3f5022bc16cf</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4cf4232b3a641327e2850a4458e77afb</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2d919c2ebaba9c22cf7c084153560e73</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae925cb30ac9bd535eea8ee6f4e3826c6</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae26fbfb7433d10629a6c3d3e348408bb</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a34c08cb230010c71e738f14dd1cb4a12</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8b22d0a9349619b537ee1d3aea9ce06d</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a2bed309e5701b5255f1b013217202849</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4adf385b713928eaab04ec3cdbd1c977</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab49b3a7dd563c3e221f462f63e563ac8</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a82e59b7ebfdde2e3bb74b4ef720d80c1</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4839efa755f594b68a67721deb685540</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a235938ec8329df69a6c044939f9263d0</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5daf99b4f026402042b72b3c2684d4ca</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>addf876450a258dd22565933cbd0108ed</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>af381b188c4c5d5c59756257fb678d0c7</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aae708539be731c51825a5e82b5d91b5d</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a97c5f51af5ce00b9b6fc3138db26c800</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4e54ab7d67ac2b2aa60447962f174f8f</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae0c7fbc319345b9d0b7b3a4b9f3d3161</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a40f2d790e82b5038cc0c9c41a8a1ddbd</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad22cc0335eae282f7ef3aa27784fe120</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a88fa42325a5a20769c27b41f098051b0</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac2530e2c983c25e57ef1a11f07a79592</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa1d320cff4ca6579e724787e1581d13a</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7b405712f3a952b69ca235d3c4583299</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa7ccd4223e854bfc650ad08ee214def5</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abf5b30bd992dcb4aafe0e10d2d209735</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a270cd06ca1a90f281d6b092c0dc09dbd</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae34e3e417d71a0a1ee21574bfc2bd8d8</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0d2f9f1c2415a41e856320c23dba4c5a</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aad6dc5c237623b8f39071fb779082cd1</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9b9b325ed400c17941c180502ba297e3</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a030b23af58c120c712e3cdf20d5600b1</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a281574557153ac611cee36e08f335348</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1124848ddab659404f1b26292cfa80fb</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a70678083f6bb09563be606db46f0e506</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae41a4f100a88d0c11414df5fa2995a76</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7ee0d7b6b61a6d9bc971ae26d36eed7d</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3d7798ce6d44da6cf8961433011bb4d5</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a718e9109589efa00c9fe56c9a5620a77</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a75666af3aeaf0fa970d2a55b391ed5f8</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa7a6ac38e27b8d5621773cba43de5f2c</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa6da67eef85005d06c3bfdbae0e32194</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abbb996ee470e0ba7e6ae38da17a81017</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a27bf0493e8a11abf5a5cc571604be3f4</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa70db77bae7b4c0dc3f85bdbdbd1d7f4</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aaf22d6b3e96086e794368a3c3fbbde95</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a47c255a8ae08d463371e96e36a084576</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae12f4bdc406c310f982f0bb88e50f684</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5e722fcee0497ab5a098906d8f9365cd</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae0ed4a22a9f84c423863c89c3e5de48f</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a198f1cebdb93b8db04eaef4a6c7f38c1</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aca46c8e94cdfbe2b2a4f3d6160b3c877</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a8d739fa56bbcadf6bea582dc6e153c33</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae579a4c88d48496b79d57d298947a102</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a682e78d237b474a839c11ce87f3b99e1</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa31a8b0d909d4b2b9f965e3b69f236b6</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab3497985a7bf8c963e1779482487662e</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a38ec430ef2e96094b981650792eff6fa</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae0de524015751d59f45438c7ba2edd33</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa8a39cfd4e9c01d0fccffbbac522abba</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acf5b776578f24161ab260ba61cadec05</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a27a47db9c7f1000b1137dcf270d3342d</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab57a36ce1464386aa59837186155a8a9</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a334fa51636284bc186cbedc11557dc30</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3a719bdd65e5759f3c2fcebc97921727</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9c055b966a30f21c51f7afa86b3becb1</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9351ffbf164ba0e8954b7629ae204ed5</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3fcae6448fd0a657987a62a701cbef63</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a11f7e560ea1cc0ea9f5f091460f955f7</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0e473f77362c56a688d4dcd7e8da3acc</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1903fa0fa2a6638c3b967c2ba7f05ce0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7bf4f3cf9055d542c7ed2d85ef20a3e8</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a27fe126af541f5a6652c171d5a6a68a7</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1afd829d9e96170f1fb90bc8785a37c0</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad4ea7baf14a8e717b6ea7a303c242881</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a454e8904676f78321302aab8b988d8f0</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a627d418291e0cef31850982bb5362ec3</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5cfafff8382bf931113d53cade429bfe</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ace4dc8efc0a81a654be203d11c8879f7</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a79a1db10526709af7764a8e393447a99</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a5d2789298a027aa4598944de586b66a3</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6878f84200c4276aa4aa3a8dc7c737b0</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac677d49e6a995506477f17e13f5c2e3f</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3015adc5a789d547e1d3e76cf4f2449e</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad49ae46f2deb8ce23ebdb04660a29082</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aea504bb4ae6498e102f830daa24b0697</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9ad436a8f2782776fc8dd0ebce1147a1</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acf24f5109ca141b51d9273895650a96d</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a60a84accfa0b3805cd687a0f690bdf9e</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac4817c4b057a11c5c125d6a1d2183590</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad1158c1166b9cc496894690aaf0f2aa9</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>abad26104c9aee91b47b9d3aad485e3a7</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ada265d2812f8321edcfcf888c1a707d7</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aadae3496f14125ba05a01d624d0f08d8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a88a692503da559d5b6e258860acc646a</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a45f01dfd044b5c9ca74e2db2ecfb42ce</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1c3fb9e174777a51f4855fb3929d6022</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6a41ca80e64d1c1a9f899ed39e1bbf1d</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac7101e4b9f16cd4304dbc92761267373</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ace21527a6be58246e8f8dc5312d15d1d</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a4d60de479212d951a27a34433cafb1a6</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aaede57017d264aba82637ca31ebcc0aa</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae7c3d6509874d7b11d5b6369b6989d15</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a57eeb29433fbd31e804522424ae9cdc4</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a145b0191ef230a7b7532032b80de8ed0</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a71659f50bec91d3beb28b57443cb4d4d</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a06947c2694d3378dfc0d3ca0d495fb6c</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1ff92fa2cd00190f079a018a1936dfa3</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac27f828277f9f4876a8773712f922fb0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a882f96f00cff4d9821726935b3615934</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a92e4df74f69060d1d96001e832996b34</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a81cddfb8964386e166c8039c8e1f9f4e</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a73a653a9e1c4c852436300a18210e935</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3921ba4b7c07cbf56fa01a6149f49c8c</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a28f1ef6ba2e1bdb804777c45916bd996</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a3abfe1bc6dd9314becb514df355ebbb7</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aab0bf4d340b99069e7ef6854ab7f83bc</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a6558c2b935bf1aab07e140c7ea1bfa68</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a24ab9751a385b776f750b92e78a336f0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab37d129dd02f86df77dbe603ed63b447</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0d5baf22aa3337394317651505428bd0</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a266d0750e1b3dd26f5c049969001c0f8</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>acb49d7a29c0ed461a80e0ce6b70acdc9</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a23f1b12aa3c3621ef212263ec1f97f73</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7c725c55ae5a57d721ce19781e8a8c83</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a7804553f805f82f896a5e9f22d747ebf</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aebfcf9bce03f33f47c1362bc532adc65</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9820f04956f9392cb85e9f59b72182f1</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad6c5c19bcfd0c092db8df0011f82430a</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a469df02bb009d72807ee1b42bef99031</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a9fb559ca43da6d7451765c5d3a2dde81</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a55f95709037c5259154fd9c11024b8d7</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1da9de1908bb13f7c0a8e810f035541d</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1ff0d4f35555ef0cc798062db7c8de44</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac333b14f9eaf001ed535e806fe744c88</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_unsigned_inlines.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00188.html</filename>
    <includes id="a00167" name="sc_vector_utils.h" local="yes" import="no" module="no" objc="no">sc_vector_utils.h</includes>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_vector_utils.h</name>
    <path>sysc/datatypes/int/</path>
    <filename>a00167.html</filename>
    <includes id="a00140" name="sc_nbdefs.h" local="yes" import="no" module="no" objc="no">sc_nbdefs.h</includes>
    <includes id="a00149" name="sc_nbutils.h" local="yes" import="no" module="no" objc="no">sc_nbutils.h</includes>
    <class kind="class">sc_dt::sc_big_op_type&lt; WIDTH, true &gt;</class>
    <class kind="class">sc_dt::sc_big_op_type&lt; WIDTH, false &gt;</class>
    <class kind="class">sc_dt::sc_big_op_info</class>
    <class kind="class">sc_dt::ScNativeDigits&lt; int64 &gt;</class>
    <class kind="class">sc_dt::ScNativeDigits&lt; uint64 &gt;</class>
    <class kind="class">sc_dt::ScNativeDigits&lt; long &gt;</class>
    <class kind="class">sc_dt::ScNativeDigits&lt; unsigned long &gt;</class>
    <class kind="class">sc_dt::ScNativeDigits&lt; int &gt;</class>
    <class kind="class">sc_dt::ScNativeDigits&lt; unsigned int &gt;</class>
    <class kind="class">sc_dt::vector_mac</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>VEC_MIN</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ab13a1466eece4b59b5cf7875851d6699</anchor>
      <arglist>(A, B)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VEC_MAX</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a9e445cbc90660fedf30a6f533a5d9746</anchor>
      <arglist>(A, B)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_concatref.h</name>
    <path>sysc/datatypes/misc/</path>
    <filename>a00026.html</filename>
    <includes id="a00380" name="sc_object.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00029" name="sc_value_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/misc/sc_value_base.h</includes>
    <includes id="a00230" name="sc_temporary.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_temporary.h</includes>
    <includes id="a00203" name="sc_string.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_string.h</includes>
    <includes id="a00041" name="sc_bv.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_bv.h</includes>
    <includes id="a00050" name="sc_lv.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_lv.h</includes>
    <includes id="a00191" name="sc_int_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_int_base.h</includes>
    <includes id="a00158" name="sc_uint_base.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_uint_base.h</includes>
    <includes id="a00128" name="sc_signed.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_signed.h</includes>
    <includes id="a00176" name="sc_unsigned.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_unsigned.h</includes>
    <includes id="a00167" name="sc_vector_utils.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_vector_utils.h</includes>
    <includes id="a00182" name="sc_signed_inlines.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_signed_inlines.h</includes>
    <includes id="a00188" name="sc_unsigned_inlines.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_unsigned_inlines.h</includes>
    <includes id="a00170" name="sc_signed_ops.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_signed_ops.h</includes>
    <class kind="class">sc_dt::sc_concatref</class>
    <class kind="class">sc_dt::sc_concat_bool</class>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_CONCAT_OP_TYPE</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a159127fe83ced79748eb34e49ae217ac</anchor>
      <arglist>(RESULT, OP, OTHER_TYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CONCAT_OP</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a23967b280995669eaa2ce47dd513453b</anchor>
      <arglist>(RESULT, OP)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CONCAT_BOOL_OP</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ae25ab91d8b3368afd1ea67a0db09f2cd</anchor>
      <arglist>(OP)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_value_base.h</name>
    <path>sysc/datatypes/misc/</path>
    <filename>a00029.html</filename>
    <includes id="a00140" name="sc_nbdefs.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <class kind="class">sc_dt::sc_value_base</class>
    <class kind="class">sc_dt::sc_generic_base</class>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_attribute.h</name>
    <path>sysc/kernel/</path>
    <filename>a00449.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <class kind="class">sc_core::sc_attr_base</class>
    <class kind="class">sc_core::sc_attr_cltn</class>
    <class kind="class">sc_core::sc_attribute</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_cmnhdr.h</name>
    <path>sysc/kernel/</path>
    <filename>a00428.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>SC_LIKELY_</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>acf2e425249d8e3ebb7e2f79a5c56a2bc</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_UNLIKELY_</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a3caa42f97b389c2842a212d80af8548b</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CPLUSPLUS_BASE_</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a0928772a61e9918db1524c5593637423</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IEEE_1666_CPLUSPLUS</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a20a83b4467f29c44a07a7ea00f7d7872</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_API</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aff4a86b3f5de3ac2097081e7166fe89f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_API_TEMPLATE_DECL_</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>afd296367ff4ff514096587ab9244e39f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_constants.h</name>
    <path>sysc/kernel/</path>
    <filename>a00401.html</filename>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_cor.h</name>
    <path>sysc/kernel/</path>
    <filename>a00368.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <class kind="class">sc_core::sc_cor</class>
    <class kind="class">sc_core::sc_cor_pkg</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_cor_fiber.h</name>
    <path>sysc/kernel/</path>
    <filename>a00362.html</filename>
  </compound>
  <compound kind="file">
    <name>sc_cor_pthread.h</name>
    <path>sysc/kernel/</path>
    <filename>a00443.html</filename>
  </compound>
  <compound kind="file">
    <name>sc_cor_qt.h</name>
    <path>sysc/kernel/</path>
    <filename>a00338.html</filename>
    <includes id="a00368" name="sc_cor.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cor.h</includes>
    <class kind="class">sc_core::sc_cor_qt</class>
    <class kind="class">sc_core::sc_cor_pkg_qt</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_cthread_process.h</name>
    <path>sysc/kernel/</path>
    <filename>a00413.html</filename>
    <includes id="a00356" name="sc_thread_process.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_thread_process.h</includes>
    <class kind="class">sc_core::sc_cthread_process</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_dynamic_processes.h</name>
    <path>sysc/kernel/</path>
    <filename>a00353.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00410" name="sc_except.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_except.h</includes>
    <includes id="a00422" name="sc_spawn.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_spawn.h</includes>
    <includes id="a00434" name="sc_join.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_join.h</includes>
    <namespace>sc_unnamed</namespace>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_event.h</name>
    <path>sysc/kernel/</path>
    <filename>a00398.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00386" name="sc_kernel_ids.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_kernel_ids.h</includes>
    <includes id="a00377" name="sc_simcontext.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_simcontext.h</includes>
    <includes id="a00248" name="sc_writer_policy.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_writer_policy.h</includes>
    <includes id="a00239" name="sc_ptr_flag.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_ptr_flag.h</includes>
    <class kind="class">sc_core::sc_event_expr</class>
    <class kind="class">sc_core::sc_event_list</class>
    <class kind="class">sc_core::sc_event_and_list</class>
    <class kind="class">sc_core::sc_event_or_list</class>
    <class kind="class">sc_core::sc_event</class>
    <class kind="class">sc_core::sc_event_timed</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_except.h</name>
    <path>sysc/kernel/</path>
    <filename>a00410.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <class kind="class">sc_core::sc_user</class>
    <class kind="class">sc_core::sc_halt</class>
    <class kind="class">sc_core::sc_kill</class>
    <class kind="class">sc_core::sc_unwind_exception</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_externs.h</name>
    <path>sysc/kernel/</path>
    <filename>a00431.html</filename>
    <namespace>sc_core</namespace>
    <member kind="function">
      <type>int</type>
      <name>sc_main</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a82266acdd954cb0398aa91e591db9b99</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_initializer_function.h</name>
    <path>sysc/kernel/</path>
    <filename>a00335.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00374" name="sc_macros.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_macros.h</includes>
    <includes id="a00341" name="sc_module.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_module.h</includes>
    <class kind="class">sc_core::sc_initializer_function</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_INIT</name>
      <anchorfile>a00335.html</anchorfile>
      <anchor>afdfb153667a9f27a3b016ec378bdcb44</anchor>
      <arglist>(object_name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_NAMED_WITH_INIT</name>
      <anchorfile>a00335.html</anchorfile>
      <anchor>afac1864e5a1202bb7a226f26ec4c457f</anchor>
      <arglist>(object_name,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_THREAD_IMP</name>
      <anchorfile>a00335.html</anchorfile>
      <anchor>ae378da842cb361026997af160b6e5a33</anchor>
      <arglist>(thread_name,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CTHREAD_IMP</name>
      <anchorfile>a00335.html</anchorfile>
      <anchor>a2b81a9d636b1ec067afe175019ff93d0</anchor>
      <arglist>(thread_name, edge,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_METHOD_IMP</name>
      <anchorfile>a00335.html</anchorfile>
      <anchor>abf96ae3b049e1735dfe3902c74b35da0</anchor>
      <arglist>(method_name,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_join.h</name>
    <path>sysc/kernel/</path>
    <filename>a00434.html</filename>
    <includes id="a00437" name="sc_process.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_process.h</includes>
    <includes id="a00332" name="sc_wait.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_wait.h</includes>
    <class kind="class">sc_core::sc_join</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_CJOIN</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>a6732ab71df2dd267fa98b6528d44f742</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_FORK</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>aa6488e2f40cebc11798144712cfcfd4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_JOIN</name>
      <anchorfile>a00434.html</anchorfile>
      <anchor>adcabfc9c61137bd1ac57a025083d79a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_kernel_ids.h</name>
    <path>sysc/kernel/</path>
    <filename>a00386.html</filename>
    <includes id="a00212" name="sc_report.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_report.h</includes>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a3a0fa0aac7295df1391acf37d9d281f8</anchor>
      <arglist>(id, unused1, unused2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_macros.h</name>
    <path>sysc/kernel/</path>
    <filename>a00374.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <namespace>sc_dt</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_STRINGIFY_HELPER_</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>a8417e584380e3c0fe8f8e1f8b00d78ec</anchor>
      <arglist>(Arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_STRINGIFY_HELPER_DEFERRED_</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>aaf78fdf4a5876b04d090b4c1a0ef6307</anchor>
      <arglist>(Arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_STRINGIFY_HELPER_MORE_DEFERRED_</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>aaa96f8e478a10d388b7ddcdb8ea3f335</anchor>
      <arglist>(Arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CONCAT_HELPER_</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>a73563c25b807e67f019c8a016be0aaf7</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CONCAT_HELPER_DEFERRED_</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>a64c4a37a8ef04c1ed432e1c9259eac69</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CONCAT_HELPER_MORE_DEFERRED_</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>ab4771a61142e3d0112cb9e6841c862ed</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CONCAT_UNDERSCORE_</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>a69ead502416164223e166df9b5456a7f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_EXPAND_HELPER_</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>af773b4c3454826fa862b0f73f54f6e95</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_WAIT</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>a31d156b7692a413e7efa331d23fc9287</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_WAITN</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>a3a0cd0660a747f1742fb3bd833bfa174</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_WAIT_UNTIL</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>a27533601118c353c2352e355e4edb34a</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_NAMED</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>a8dcbd24c1474924a24e3b693eef6e317</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_NAMED_IMPL_ONE_</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>a7cf00960d853a8a4328387b6ab8d2767</anchor>
      <arglist>(inst)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_NAMED_IMPL_MORE_</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>aee8545c457a9e9845a9dd95c64718463</anchor>
      <arglist>(inst,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_NAMED_IMPL_</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>a06b28bd67f7c103f4414732e1dda61dc</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_VARARG_HELPER_EXPAND_</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>ac5aefdd6814c23c3f3d0e4d85423dce3</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_VARARG_HELPER_EXPAND_SEQ_</name>
      <anchorfile>a00374.html</anchorfile>
      <anchor>a72667f80b921a239ebacfeb45b1bdcee</anchor>
      <arglist>(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, N,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_method_process.h</name>
    <path>sysc/kernel/</path>
    <filename>a00404.html</filename>
    <includes id="a00437" name="sc_process.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_process.h</includes>
    <includes id="a00395" name="sc_spawn_options.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_spawn_options.h</includes>
    <includes id="a00368" name="sc_cor.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cor.h</includes>
    <includes id="a00398" name="sc_event.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_event.h</includes>
    <includes id="a00410" name="sc_except.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_except.h</includes>
    <class kind="class">sc_core::sc_method_process</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_MSG</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>a50c4771b351410a2a97e1be09e93686d</anchor>
      <arglist>(NAME, P, MSG)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_module.h</name>
    <path>sysc/kernel/</path>
    <filename>a00341.html</filename>
    <includes id="a00386" name="sc_kernel_ids.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_kernel_ids.h</includes>
    <includes id="a00374" name="sc_macros.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_macros.h</includes>
    <includes id="a00371" name="sc_module_name.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_module_name.h</includes>
    <includes id="a00437" name="sc_process.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_process.h</includes>
    <includes id="a00329" name="sc_process_handle.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_process_handle.h</includes>
    <includes id="a00419" name="sc_sensitive.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_sensitive.h</includes>
    <includes id="a00365" name="sc_time.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_time.h</includes>
    <includes id="a00332" name="sc_wait.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_wait.h</includes>
    <includes id="a00389" name="sc_wait_cthread.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_wait_cthread.h</includes>
    <includes id="a00233" name="sc_list.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_list.h</includes>
    <class kind="struct">sc_core::sc_bind_proxy</class>
    <class kind="class">sc_core::sc_module</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_SEMICOLON_</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a4a954d544935178dbc4a7ee854031eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_MODULE</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a0e65c5055705b9e5f558d3f0ec28a120</anchor>
      <arglist>(user_module_name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_HAS_PROCESS</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a8ecd4d18226f8805d755c5e76a880dfd</anchor>
      <arglist>(user_module_type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CURRENT_USER_MODULE_TYPE</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a4ab28414180ec8b44a0aba1978126ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CTOR</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a1556d0389050e68155d1a15ff3065e60</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CTOR_IMPL_ONE_</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>ae5de4661104bca7fad5a718c95e5c498</anchor>
      <arglist>(user_module_name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CTOR_IMPL_MORE_</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a36b46b09bb89c88ef6e4895fe733b8e7</anchor>
      <arglist>(user_module_name,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CTOR_IMPL_</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a06b1bfe56708243e13c3a852c863bb34</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_CTHREAD</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a23883363081d0be73feee33386613ca5</anchor>
      <arglist>(func, edge)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_METHOD</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>abae90c038bc848595410dcddde76358a</anchor>
      <arglist>(func)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_THREAD</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a78f626bc71b853c1f8618e74ec6f0512</anchor>
      <arglist>(func)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_module_name.h</name>
    <path>sysc/kernel/</path>
    <filename>a00371.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <class kind="class">sc_core::sc_module_name</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_module_registry.h</name>
    <path>sysc/kernel/</path>
    <filename>a00350.html</filename>
    <class kind="class">sc_core::sc_module_registry</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_name_gen.h</name>
    <path>sysc/kernel/</path>
    <filename>a00347.html</filename>
    <includes id="a00224" name="sc_hash.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_hash.h</includes>
    <class kind="class">sc_core::sc_name_gen</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_object.h</name>
    <path>sysc/kernel/</path>
    <filename>a00380.html</filename>
    <includes id="a00449" name="sc_attribute.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_attribute.h</includes>
    <class kind="class">sc_core::sc_hierarchy_scope</class>
    <class kind="class">sc_core::sc_object</class>
    <class kind="class">sc_core::sc_object_host</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_object_int.h</name>
    <path>sysc/kernel/</path>
    <filename>a00407.html</filename>
    <includes id="a00380" name="sc_object.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00341" name="sc_module.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_module.h</includes>
    <includes id="a00425" name="sc_simcontext_int.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_simcontext_int.h</includes>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_object_manager.h</name>
    <path>sysc/kernel/</path>
    <filename>a00446.html</filename>
    <class kind="class">sc_core::sc_object_manager</class>
    <class kind="struct">sc_core::sc_object_manager::table_entry</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_process.h</name>
    <path>sysc/kernel/</path>
    <filename>a00437.html</filename>
    <includes id="a00401" name="sc_constants.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_constants.h</includes>
    <includes id="a00380" name="sc_object.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00386" name="sc_kernel_ids.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_kernel_ids.h</includes>
    <includes id="a00317" name="sc_export.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_export.h</includes>
    <class kind="class">sc_core::sc_process_host</class>
    <class kind="class">sc_core::sc_process_monitor</class>
    <class kind="class">sc_core::sc_throw_it_helper</class>
    <class kind="class">sc_core::sc_throw_it</class>
    <class kind="class">sc_core::sc_process_b</class>
    <class kind="struct">sc_core::scoped_flag</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_MAKE_FUNC_PTR</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>a580e4861b4550717077ee2267c2097ca</anchor>
      <arglist>(callback_tag, func)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_process_handle.h</name>
    <path>sysc/kernel/</path>
    <filename>a00329.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00380" name="sc_object.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00437" name="sc_process.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_process.h</includes>
    <class kind="class">sc_core::sc_process_handle</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_reset.h</name>
    <path>sysc/kernel/</path>
    <filename>a00359.html</filename>
    <includes id="a00248" name="sc_writer_policy.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_writer_policy.h</includes>
    <class kind="class">sc_core::sc_reset_target</class>
    <class kind="class">sc_core::sc_reset_finder</class>
    <class kind="class">sc_core::sc_reset</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_runnable.h</name>
    <path>sysc/kernel/</path>
    <filename>a00383.html</filename>
    <includes id="a00437" name="sc_process.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_process.h</includes>
    <class kind="class">sc_core::sc_runnable</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_runnable_int.h</name>
    <path>sysc/kernel/</path>
    <filename>a00416.html</filename>
    <includes id="a00383" name="sc_runnable.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_runnable.h</includes>
    <includes id="a00404" name="sc_method_process.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_method_process.h</includes>
    <includes id="a00356" name="sc_thread_process.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_thread_process.h</includes>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_MSG</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a50c4771b351410a2a97e1be09e93686d</anchor>
      <arglist>(NAME, P, MSG)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_NO_METHODS</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>acd8f4b9f3b5a551e6c7da1b19427206b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_NO_THREADS</name>
      <anchorfile>a00416.html</anchorfile>
      <anchor>a7598419fb77433874564e1e2ee430832</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_sensitive.h</name>
    <path>sysc/kernel/</path>
    <filename>a00419.html</filename>
    <includes id="a00437" name="sc_process.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_process.h</includes>
    <class kind="class">sc_core::sc_sensitive</class>
    <class kind="class">sc_core::sc_sensitive_pos</class>
    <class kind="class">sc_core::sc_sensitive_neg</class>
    <namespace>sc_dt</namespace>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_simcontext.h</name>
    <path>sysc/kernel/</path>
    <filename>a00377.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00437" name="sc_process.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_process.h</includes>
    <includes id="a00440" name="sc_status.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_status.h</includes>
    <includes id="a00365" name="sc_time.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_time.h</includes>
    <includes id="a00392" name="sc_stage_callback_if.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_stage_callback_if.h</includes>
    <includes id="a00224" name="sc_hash.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_hash.h</includes>
    <includes id="a00197" name="sc_pq.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_pq.h</includes>
    <includes id="a00311" name="sc_host_mutex.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_host_mutex.h</includes>
    <class kind="struct">sc_core::sc_curr_proc_info</class>
    <class kind="class">sc_core::sc_simcontext</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_simcontext_int.h</name>
    <path>sysc/kernel/</path>
    <filename>a00425.html</filename>
    <includes id="a00377" name="sc_simcontext.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_simcontext.h</includes>
    <includes id="a00383" name="sc_runnable.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_runnable.h</includes>
    <includes id="a00416" name="sc_runnable_int.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_runnable_int.h</includes>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_MSG</name>
      <anchorfile>a00425.html</anchorfile>
      <anchor>a50c4771b351410a2a97e1be09e93686d</anchor>
      <arglist>(NAME, P, MSG)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_spawn.h</name>
    <path>sysc/kernel/</path>
    <filename>a00422.html</filename>
    <includes id="a00329" name="sc_process_handle.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_process_handle.h</includes>
    <includes id="a00395" name="sc_spawn_options.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_spawn_options.h</includes>
    <class kind="class">sc_core::sc_spawn_object</class>
    <class kind="class">sc_core::sc_spawn_object_v</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_spawn_options.h</name>
    <path>sysc/kernel/</path>
    <filename>a00395.html</filename>
    <includes id="a00317" name="sc_export.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_export.h</includes>
    <includes id="a00287" name="sc_signal_ports.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_signal_ports.h</includes>
    <class kind="class">sc_core::sc_spawn_options</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_stage_callback_if.h</name>
    <path>sysc/kernel/</path>
    <filename>a00392.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <class kind="class">sc_core::sc_stage_callback_if</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_stage_callback_registry.h</name>
    <path>sysc/kernel/</path>
    <filename>a00344.html</filename>
    <includes id="a00377" name="sc_simcontext.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_simcontext.h</includes>
    <includes id="a00407" name="sc_object_int.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_object_int.h</includes>
    <includes id="a00440" name="sc_status.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_status.h</includes>
    <class kind="class">sc_core::sc_stage_callback_registry</class>
    <class kind="struct">sc_core::sc_stage_callback_registry::entry</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_status.h</name>
    <path>sysc/kernel/</path>
    <filename>a00440.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_thread_process.h</name>
    <path>sysc/kernel/</path>
    <filename>a00356.html</filename>
    <includes id="a00395" name="sc_spawn_options.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_spawn_options.h</includes>
    <includes id="a00437" name="sc_process.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_process.h</includes>
    <includes id="a00368" name="sc_cor.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cor.h</includes>
    <includes id="a00398" name="sc_event.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_event.h</includes>
    <includes id="a00410" name="sc_except.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_except.h</includes>
    <includes id="a00359" name="sc_reset.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_reset.h</includes>
    <class kind="class">sc_core::sc_thread_process</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_MSG</name>
      <anchorfile>a00356.html</anchorfile>
      <anchor>a50c4771b351410a2a97e1be09e93686d</anchor>
      <arglist>(NAME, P, MSG)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_time.h</name>
    <path>sysc/kernel/</path>
    <filename>a00365.html</filename>
    <includes id="a00140" name="sc_nbdefs.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00110" name="scfx_ieee.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/fx/scfx_ieee.h</includes>
    <class kind="class">sc_core::sc_time</class>
    <class kind="class">sc_core::sc_time_tuple</class>
    <class kind="struct">sc_core::sc_time_params</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_TIME_DT</name>
      <anchorfile>a00365.html</anchorfile>
      <anchor>afb269f3f7a6663a8627975ba1bfb1303</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_ver.h</name>
    <path>sysc/kernel/</path>
    <filename>a00326.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00374" name="sc_macros.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_macros.h</includes>
    <includes id="a00248" name="sc_writer_policy.h" local="yes" import="no" module="no" objc="no">sysc/communication/sc_writer_policy.h</includes>
    <class kind="struct">sc_core::SC_API_VERSION_STRING</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SYSTEMC_3_0_0</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>ad90e8467bae60ec0e768447368172fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SYSTEMC_VERSION</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>af04cf0eaeea1a50f32df3788f78da074</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_VERSION_ORIGINATOR</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>ad4a1bf41f3e81f7011b5dc06ee50e76e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_VERSION_MAJOR</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>a1464b562168b1e994e4aa0cc6f78848c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_VERSION_MINOR</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>a6ac5c04d22c8ae0191deddf4658af15a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_VERSION_PATCH</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>a5f5c5e0461a418af591d5a7212d04f64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_IS_PRERELEASE</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>a5216b3dfe891e36e6cc326a9d610bfa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IEEE_1666_SYSTEMC</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>ac96bc610253f718cae5e7383b00aa1e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_COPYRIGHT</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>aa89a8f9501aeb33bab35104989a09618</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_VERSION_RELEASE_DATE</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>aa19d2b19c8b0b1e5b11459432a4635c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_VERSION_PRERELEASE</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>a10ec59a37a52504f8bfc27004d1d55c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_VERSION</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>a3eeebacd4d590b3bd58f5422b06b4045</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_API_VERSION_STRING</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>a5b633ceba4460e02975526ca2a0acb4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_API_DEFINED_</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>a00106cab546b720160009c3f5516581f</anchor>
      <arglist>(Symbol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_API_UNDEFINED_</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>a834202b882a812b099432da3a54e116e</anchor>
      <arglist>(Symbol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_HAS_COVARIANT_VIRTUAL_BASE_</name>
      <anchorfile>a00326.html</anchorfile>
      <anchor>ae55b35b74c0d655500e80600a556909c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_wait.h</name>
    <path>sysc/kernel/</path>
    <filename>a00332.html</filename>
    <includes id="a00377" name="sc_simcontext.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_simcontext.h</includes>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_wait_cthread.h</name>
    <path>sysc/kernel/</path>
    <filename>a00389.html</filename>
    <includes id="a00377" name="sc_simcontext.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_simcontext.h</includes>
    <includes id="a00035" name="sc_logic.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/bit/sc_logic.h</includes>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_trace.h</name>
    <path>sysc/tracing/</path>
    <filename>a00017.html</filename>
    <includes id="a00140" name="sc_nbdefs.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00365" name="sc_time.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_time.h</includes>
    <class kind="class">sc_core::sc_trace_file</class>
    <namespace>sc_dt</namespace>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DECL_TRACE_METHOD_A</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>af93866d388b887dc75711f0174af7ad3</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_TRACE_METHOD_B</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ab568c9d909bceecf9a2d1273e4cfb4ed</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_TRACE_FUNC_REF_A</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ac2fb330a885a54053e68526a24aa992f</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_TRACE_FUNC_PTR_A</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a56d754df61bc4ef1f614ccc2ec82ab01</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_TRACE_FUNC_A</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a98fcb6dc85a1a8b5c5cc43bfe1d84967</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_TRACE_FUNC_REF_B</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a40e57d6a4c9848778aa0ef06c411be6a</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_TRACE_FUNC_PTR_B</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a093fb0d6b1178ce7c03e5d2b0d172b4c</anchor>
      <arglist>(tp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_TRACE_FUNC_B</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1b677a5aeaf259d21ba1477ddaa11c6e</anchor>
      <arglist>(tp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_trace_file_base.h</name>
    <path>sysc/tracing/</path>
    <filename>a00020.html</filename>
    <includes id="a00392" name="sc_stage_callback_if.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_stage_callback_if.h</includes>
    <includes id="a00017" name="sc_trace.h" local="yes" import="no" module="no" objc="no">sysc/tracing/sc_trace.h</includes>
    <includes id="a00023" name="sc_tracing_ids.h" local="yes" import="no" module="no" objc="no">sysc/tracing/sc_tracing_ids.h</includes>
    <class kind="class">sc_core::sc_trace_file_base</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_tracing_ids.h</name>
    <path>sysc/tracing/</path>
    <filename>a00023.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a3a0fa0aac7295df1391acf37d9d281f8</anchor>
      <arglist>(id, unused1, unused2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_vcd_trace.h</name>
    <path>sysc/tracing/</path>
    <filename>a00011.html</filename>
    <includes id="a00020" name="sc_trace_file_base.h" local="yes" import="no" module="no" objc="no">sysc/tracing/sc_trace_file_base.h</includes>
    <class kind="class">sc_core::vcd_trace_file</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_wif_trace.h</name>
    <path>sysc/tracing/</path>
    <filename>a00014.html</filename>
    <includes id="a00140" name="sc_nbdefs.h" local="yes" import="no" module="no" objc="no">sysc/datatypes/int/sc_nbdefs.h</includes>
    <includes id="a00020" name="sc_trace_file_base.h" local="yes" import="no" module="no" objc="no">sysc/tracing/sc_trace_file_base.h</includes>
    <class kind="class">sc_core::wif_trace_file</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_hash.h</name>
    <path>sysc/utils/</path>
    <filename>a00224.html</filename>
    <includes id="a00377" name="sc_simcontext.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_simcontext.h</includes>
    <class kind="class">sc_core::sc_phash_base</class>
    <class kind="class">sc_core::sc_phash_base_iter</class>
    <class kind="class">sc_core::sc_phash</class>
    <class kind="class">sc_core::sc_phash_iter</class>
    <class kind="class">sc_core::sc_pdhash</class>
    <class kind="class">sc_core::sc_pdhash_iter</class>
    <class kind="class">sc_core::sc_strhash</class>
    <class kind="class">sc_core::sc_strhash_iter</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_iostream.h</name>
    <path>sysc/utils/</path>
    <filename>a00236.html</filename>
  </compound>
  <compound kind="file">
    <name>sc_list.h</name>
    <path>sysc/utils/</path>
    <filename>a00233.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="no" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <class kind="class">sc_core::sc_plist_base</class>
    <class kind="class">sc_core::sc_plist_base_iter</class>
    <class kind="class">sc_core::sc_plist</class>
    <class kind="class">sc_core::sc_plist_iter</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_machine.h</name>
    <path>sysc/utils/</path>
    <filename>a00209.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>SC_LITTLE_ENDIAN</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a7b5db14575ecbce6805fead56ccede8d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_mempool.h</name>
    <path>sysc/utils/</path>
    <filename>a00218.html</filename>
    <class kind="class">sc_core::sc_mempool</class>
    <class kind="class">sc_core::sc_mpobject</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_pq.h</name>
    <path>sysc/utils/</path>
    <filename>a00197.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <class kind="class">sc_core::sc_ppq_base</class>
    <class kind="class">sc_core::sc_ppq</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_ptr_flag.h</name>
    <path>sysc/utils/</path>
    <filename>a00239.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <class kind="class">sc_core::sc_ptr_flag</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_pvector.h</name>
    <path>sysc/utils/</path>
    <filename>a00227.html</filename>
    <class kind="class">sc_core::sc_pvector</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ACCESS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ae1378dd54ebc6f450b432cb399000525</anchor>
      <arglist>(I)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ADDR_ACCESS</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a1d877b321dbdd4dbdcb3c5aeb733628e</anchor>
      <arglist>(I)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_report.h</name>
    <path>sysc/utils/</path>
    <filename>a00212.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <includes id="a00206" name="sc_report_handler.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_report_handler.h</includes>
    <class kind="class">sc_core::sc_report</class>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_REPORT_INFO</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a96d99fea4b785441c169dd3b365d890a</anchor>
      <arglist>(msg_type, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_REPORT_INFO_VERB</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a38fc0dfb8d6fcd6bd5d907b46e16fce9</anchor>
      <arglist>(msg_type, msg, verbosity)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_REPORT_WARNING</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>acfe483c250d556bb8a833e3e05da6654</anchor>
      <arglist>(msg_type, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_REPORT_ERROR</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ad5720f0a4adf8866eb628b62a4fde9bf</anchor>
      <arglist>(msg_type, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SC_REPORT_FATAL</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a3661cb5dd8c369e6838f91847cdb6d07</anchor>
      <arglist>(msg_type, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>sc_assert</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a74afc5942d7b28d11f360a6f03181daa</anchor>
      <arglist>(expr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_report_handler.h</name>
    <path>sysc/utils/</path>
    <filename>a00206.html</filename>
    <class kind="struct">sc_core::sc_msg_def</class>
    <class kind="class">sc_core::sc_report_handler</class>
    <class kind="struct">sc_core::sc_report_handler::msg_def_items</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_stop_here.h</name>
    <path>sysc/utils/</path>
    <filename>a00200.html</filename>
    <includes id="a00212" name="sc_report.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_report.h</includes>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_string.h</name>
    <path>sysc/utils/</path>
    <filename>a00203.html</filename>
    <includes id="a00236" name="sc_iostream.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_iostream.h</includes>
    <includes id="a00212" name="sc_report.h" local="yes" import="no" module="no" objc="no">sysc/utils/sc_report.h</includes>
    <namespace>sc_dt</namespace>
  </compound>
  <compound kind="file">
    <name>sc_string_view.h</name>
    <path>sysc/utils/</path>
    <filename>a00221.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <class kind="class">sc_core::sc_string_view</class>
    <class kind="class">sc_core::sc_zstring_view</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_temporary.h</name>
    <path>sysc/utils/</path>
    <filename>a00230.html</filename>
    <includes id="a00428" name="sc_cmnhdr.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_cmnhdr.h</includes>
    <class kind="class">sc_core::sc_vpool</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>sc_utils_ids.h</name>
    <path>sysc/utils/</path>
    <filename>a00215.html</filename>
    <namespace>sc_core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SC_DEFINE_MESSAGE</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a3a0fa0aac7295df1391acf37d9d281f8</anchor>
      <arglist>(id, unused1, unused2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sc_vector.h</name>
    <path>sysc/utils/</path>
    <filename>a00194.html</filename>
    <includes id="a00380" name="sc_object.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_object.h</includes>
    <includes id="a00392" name="sc_stage_callback_if.h" local="yes" import="no" module="no" objc="no">sysc/kernel/sc_stage_callback_if.h</includes>
    <class kind="class">sc_core::sc_vector_base</class>
    <class kind="struct">sc_core::sc_direct_access</class>
    <class kind="class">sc_core::sc_member_access</class>
    <class kind="class">sc_core::sc_vector_iter</class>
    <class kind="class">sc_core::sc_vector</class>
    <class kind="class">sc_core::sc_vector_assembly</class>
    <namespace>sc_core</namespace>
  </compound>
  <compound kind="file">
    <name>systemc</name>
    <path></path>
    <filename>a00002.html</filename>
  </compound>
  <compound kind="file">
    <name>systemc.h</name>
    <path></path>
    <filename>a00008.html</filename>
    <includes id="a00002" name="systemc" local="yes" import="no" module="no" objc="no">systemc</includes>
    <member kind="typedef">
      <type>::std::string</type>
      <name>sc_string</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac7b26facad67d273d895d435af2f3d32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_stage_callback_registry::entry</name>
    <filename>a02233.html</filename>
    <member kind="variable">
      <type>cb_type *</type>
      <name>target</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>ad66c88ffdeb5de55b5334d4d1590675e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mask_type</type>
      <name>mask</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a7201f7f21287851afeb515ee8a9dadc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>sc_dt::ieee_double</name>
    <filename>a01793.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>d</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>a976791ee8d928a23d7af46d861208825</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>mantissa1</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>ad67632f302789cbd3eb3be56fc93e563</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>mantissa0</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>a0b64727e46fd54abb4f036b933c55cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>exponent</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>ac58a8205df21caa50bd3c44fcc5c9d0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>negative</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>aa18302f472220f8248c2d05d85f0fdd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct sc_dt::ieee_double::@0</type>
      <name>s</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>a86aed1ac90fbdcba0582c6b404dec1d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>sc_dt::ieee_float</name>
    <filename>a01805.html</filename>
    <member kind="variable">
      <type>float</type>
      <name>f</name>
      <anchorfile>a01805.html</anchorfile>
      <anchor>a7d3cefca55e25fd3a14efe9a7c527d00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>mantissa</name>
      <anchorfile>a01805.html</anchorfile>
      <anchor>a823b5ff6cac6ddb4bc3ee4fafbec3390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>exponent</name>
      <anchorfile>a01805.html</anchorfile>
      <anchor>a239007061270205e8f9d653c5b3d9a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>negative</name>
      <anchorfile>a01805.html</anchorfile>
      <anchor>ae7dc67997641e70d60d8b97ae79f8429</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct sc_dt::ieee_float::@1</type>
      <name>s</name>
      <anchorfile>a01805.html</anchorfile>
      <anchor>abe2d10566d0ba3462f580aaa0ebfe8cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_report_handler::msg_def_items</name>
    <filename>a02365.html</filename>
    <member kind="variable">
      <type>sc_msg_def *</type>
      <name>md</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a25f7fcfd203938cfd56d7e88ccd06c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>count</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a8253f5d219b3ce22d23a188d0d54aaa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>allocated</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a8682742558710f31eca63bb7d3dfc7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>msg_def_items *</type>
      <name>next</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>aaec30d923e1cff4e0070210eff0442b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::SC_API_VERSION_STRING</name>
    <filename>a02257.html</filename>
    <member kind="function">
      <type></type>
      <name>SC_API_VERSION_STRING</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>ae06bfa6f85f41b2eebbb8870a58ce63b</anchor>
      <arglist>(sc_writer_policy default_writer_policy, bool has_covariant_virtual_base)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_attr_base</name>
    <filename>a02005.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_attr_base</name>
      <anchorfile>a02005.html</anchorfile>
      <anchor>a6fe38d9a0c5ed0fe5271deaafaae339e</anchor>
      <arglist>(const std::string &amp;name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_attr_base</name>
      <anchorfile>a02005.html</anchorfile>
      <anchor>aab1ae284a844d9516932e36799aba9ec</anchor>
      <arglist>(const sc_attr_base &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_attr_base</name>
      <anchorfile>a02005.html</anchorfile>
      <anchor>a6ba4840bf7e4832161805fcc8cd97581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a02005.html</anchorfile>
      <anchor>adce1a3c24d4484389842ab8fe9552b23</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_attr_cltn</name>
    <filename>a02009.html</filename>
    <member kind="typedef">
      <type>sc_attr_base *</type>
      <name>elem_type</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>aea20f6a3b7af84e9b5475a9e572fffa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; elem_type &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>a95f20a29a9083a485555d9435fe89bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; elem_type &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>a46b331f97ada81b9cc9bb6632ce47128</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_attr_cltn</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>a82589994753cdc670d0512dbda24f6df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_attr_cltn</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>aa0eb369fa22dddb26a49bc7c065530aa</anchor>
      <arglist>(const sc_attr_cltn &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_attr_cltn</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>a807623d079e221721c5ae11c2bfc2065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>push_back</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>aad50aebc6052125814548b7aea98b3c7</anchor>
      <arglist>(sc_attr_base *)</arglist>
    </member>
    <member kind="function">
      <type>sc_attr_base *</type>
      <name>operator[]</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>a7006a67ae73638af5e3053479edfb07c</anchor>
      <arglist>(const std::string &amp;name_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_attr_base *</type>
      <name>operator[]</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>a14b871bbd7086e656762e58c8aa58371</anchor>
      <arglist>(const std::string &amp;name_) const</arglist>
    </member>
    <member kind="function">
      <type>sc_attr_base *</type>
      <name>remove</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>a86227d01818a3f0abb633b0dcf629f25</anchor>
      <arglist>(const std::string &amp;name_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_all</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>a08a8485f48c8e87bc7ccd1a44f8b8344</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>a5df5aec140fd83207b4fba049195bc6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>abf59d0f702a9447ef5f9a881d245c5a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>a5a7781c0a7c7bf8ca6003e981b2ea263</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>a3343e58d7910c0cc30b4f2326d8cf09e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02009.html</anchorfile>
      <anchor>a7c7e480c0d11489dd5846a65a9216f24</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_attribute</name>
    <filename>a02013.html</filename>
    <templarg>class T</templarg>
    <base>sc_core::sc_attr_base</base>
    <member kind="function">
      <type></type>
      <name>sc_attribute</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a452a0fffc5ed8bbcde646042e0dda313</anchor>
      <arglist>(const std::string &amp;name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_attribute</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a322abd8fc1f25974610905ecc14d216c</anchor>
      <arglist>(const std::string &amp;name_, const T &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_attribute</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a4ba8ccff7df06a7f0ba413d98f49e39b</anchor>
      <arglist>(const sc_attribute&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_attribute</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a690e24e09b1940b146e5338a2b5ed959</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>value</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a2d57adacac63804b18c323e742ac2121</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_big_op_info</name>
    <filename>a01953.html</filename>
    <templarg>int WL</templarg>
    <templarg>bool SL</templarg>
    <templarg>int WR</templarg>
    <templarg>bool SR</templarg>
    <member kind="enumvalue">
      <name>signed_result</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a7a3bbf065690ab47a1cbaf19a7ba4ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>left_count</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65af4b85bedb636a6b00c2c3f71cfb312aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>left_extra</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65ad08902a26304df6d6cfac7403778c69c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>left_hod</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a19880865e1aa760873db02e30148107e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>right_count</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65ab88a2b3d6958a94d7e8d4597856887f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>right_extra</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a0016f802636570d549fa8e246d1a690b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>right_hod</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a5e1c96658259c9c53f7d15a9e5f66943</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>add_bits</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a72ca8106a3293e6c57aed94c9caf8d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bit_bits</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65afdcf543869f5a1c449e7a06da3876828</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>div_bits</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a407dbc2c50d392148dfc594662cf7f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mod_bits</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a8357fafd28d8b665e92d0f83a64d8083</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mul_bits</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a5b58a5f5bed8089b87173af07484d6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sub_bits</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65ab47e78a1e0fcce8d501a467f3fb8509f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>add_hod</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a9e725530b9a0ad3b08d69b8e572ca0f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bit_hod</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65af36b82ad543652f769c26c7f4919e3a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>div_hod</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65ab99da8698fa652ed4b350876fe3f004c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mod_hod</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a0d023864a60c4bcc9b41b7d1667427ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mul_hod</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a68515829b206a066db290e253ab13c59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sub_hod</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a66ac8f1643038335d95e437a5437101c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>add_mask</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a9947e79e7704aa8374e471f48ecf0a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bit_mask</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65acdc906ff45c113660d66f39f00cd925c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>div_mask</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a2fa2ba46ccc73bbc1c7c5fd11fcd4e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mod_mask</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a096d8166f8b912ba95e140c289d38056</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mul_mask</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65aca78e46c9bed906ca0c266ce970c2fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sub_mask</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65ad48ccf35e111a2e3c6bb18668300d87a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shorter_length</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65ab90d32489466492cce4932d79e790c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_big_op_type&lt; WL, SL &gt;::base_type</type>
      <name>left_base</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>ae67d9f2d16c295184da95c2437d32fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_big_op_type&lt; WL, SL &gt;::top_type</type>
      <name>left_op</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>aa4aedb3218ef88960d4180c6d7d5dbfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_big_op_type&lt; WR, SR &gt;::base_type</type>
      <name>right_base</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a67b06152006cc7c06435a6a188b144ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_big_op_type&lt; WR, SR &gt;::top_type</type>
      <name>right_op</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a04c57234731c5cc7846ad1962a1562cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_big_op_type&lt; add_bits, signed_result &gt;::top_type</type>
      <name>add_result</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a0eb9602d1e4f98347f5d74702ed87371</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_big_op_type&lt; bit_bits, signed_result &gt;::top_type</type>
      <name>bit_result</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>af351f032a3e2083877c6aaae8fb54c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_big_op_type&lt; div_bits, signed_result &gt;::top_type</type>
      <name>div_result</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a67ec26db66c9f30bca7b963a0a52b47b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_big_op_type&lt; mod_bits, signed_result &gt;::top_type</type>
      <name>mod_result</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7229a375cfcda2bfa035896ebd3525e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_big_op_type&lt; mul_bits, signed_result &gt;::top_type</type>
      <name>mul_result</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>aaad0027cdf95cf3329e9051953783242</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_big_op_type&lt; sub_bits, signed_result &gt;::top_type</type>
      <name>sub_result</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a137a4049497c113833745b76a9b4efd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>signed_result</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a7a3bbf065690ab47a1cbaf19a7ba4ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>left_count</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65af4b85bedb636a6b00c2c3f71cfb312aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>left_extra</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65ad08902a26304df6d6cfac7403778c69c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>left_hod</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a19880865e1aa760873db02e30148107e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>right_count</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65ab88a2b3d6958a94d7e8d4597856887f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>right_extra</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a0016f802636570d549fa8e246d1a690b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>right_hod</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a5e1c96658259c9c53f7d15a9e5f66943</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>add_bits</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a72ca8106a3293e6c57aed94c9caf8d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bit_bits</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65afdcf543869f5a1c449e7a06da3876828</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>div_bits</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a407dbc2c50d392148dfc594662cf7f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mod_bits</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a8357fafd28d8b665e92d0f83a64d8083</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mul_bits</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a5b58a5f5bed8089b87173af07484d6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sub_bits</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65ab47e78a1e0fcce8d501a467f3fb8509f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>add_hod</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a9e725530b9a0ad3b08d69b8e572ca0f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bit_hod</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65af36b82ad543652f769c26c7f4919e3a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>div_hod</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65ab99da8698fa652ed4b350876fe3f004c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mod_hod</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a0d023864a60c4bcc9b41b7d1667427ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mul_hod</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a68515829b206a066db290e253ab13c59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sub_hod</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a66ac8f1643038335d95e437a5437101c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>add_mask</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a9947e79e7704aa8374e471f48ecf0a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bit_mask</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65acdc906ff45c113660d66f39f00cd925c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>div_mask</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a2fa2ba46ccc73bbc1c7c5fd11fcd4e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mod_mask</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65a096d8166f8b912ba95e140c289d38056</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mul_mask</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65aca78e46c9bed906ca0c266ce970c2fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sub_mask</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65ad48ccf35e111a2e3c6bb18668300d87a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shorter_length</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a7ef93a0a62fe4d184e5ae109a6959c65ab90d32489466492cce4932d79e790c80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_big_op_type</name>
    <filename>a01941.html</filename>
    <templarg>int WIDTH</templarg>
    <templarg>bool SIGNED</templarg>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_big_op_type&lt; WIDTH, false &gt;</name>
    <filename>a01949.html</filename>
    <templarg>int WIDTH</templarg>
    <member kind="typedef">
      <type>sc_unsigned</type>
      <name>base_type</name>
      <anchorfile>a01949.html</anchorfile>
      <anchor>a3ce085ed0099dc3e55006a2f04016a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_digit</type>
      <name>hod_type</name>
      <anchorfile>a01949.html</anchorfile>
      <anchor>aa6f7fc60a2a4897265944ec0a96fa034</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_biguint&lt; WIDTH &gt;</type>
      <name>top_type</name>
      <anchorfile>a01949.html</anchorfile>
      <anchor>a9a65d2b95fcbaf870c9d92768bab261c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_big_op_type&lt; WIDTH, true &gt;</name>
    <filename>a01945.html</filename>
    <templarg>int WIDTH</templarg>
    <member kind="typedef">
      <type>sc_signed</type>
      <name>base_type</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a33270b5a5b169fd5330f04de4f979e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>hod_type</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>aa87bf503cb76ea906a3fe4bd5534aca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_bigint&lt; WIDTH &gt;</type>
      <name>top_type</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a68f5536f61775ac6b86a980dc5522e55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_bigint</name>
    <filename>a01601.html</filename>
    <templarg>int W</templarg>
    <base>sc_dt::sc_signed</base>
    <member kind="enumvalue">
      <name>ACTUAL_WIDTH</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a93df4bb2d9c20e23b4b0489113e00498a6b8cfe92c03298a7633c441531601e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITS_N</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a93df4bb2d9c20e23b4b0489113e00498aa5091a11cee6cf37e6a7f6645e5fe041</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOB</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a93df4bb2d9c20e23b4b0489113e00498a75e62e990b2300c4e64f0cca25b50320</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOD</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a93df4bb2d9c20e23b4b0489113e00498a020560c0366b707891efcb341e150f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a93df4bb2d9c20e23b4b0489113e00498a1b727b1819c84375b4f22acfa4063c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIDTH</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a93df4bb2d9c20e23b4b0489113e00498ab3f5ea2260e8cca3b4897adc2cd17dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>HOD_TYPE</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>adad84ebd56f270bbdeea97186f02d3a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACTUAL_WIDTH</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a93df4bb2d9c20e23b4b0489113e00498a6b8cfe92c03298a7633c441531601e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITS_N</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a93df4bb2d9c20e23b4b0489113e00498aa5091a11cee6cf37e6a7f6645e5fe041</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOB</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a93df4bb2d9c20e23b4b0489113e00498a75e62e990b2300c4e64f0cca25b50320</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOD</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a93df4bb2d9c20e23b4b0489113e00498a020560c0366b707891efcb341e150f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a93df4bb2d9c20e23b4b0489113e00498a1b727b1819c84375b4f22acfa4063c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIDTH</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a93df4bb2d9c20e23b4b0489113e00498ab3f5ea2260e8cca3b4897adc2cd17dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ae5c31ed76db68b7c21cae1dbfd1e2962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ace676c8d5149472facdc39e16d90c9a4</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ac7aedd55a95cd469b453acaa13b54bd2</anchor>
      <arglist>(const sc_bigint&lt; W &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a30e7098210f1881c2470eafc988f4d4d</anchor>
      <arglist>(const sc_bigint&lt; WO &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ae3c985d833fd32a690b18098956ebd67</anchor>
      <arglist>(const sc_biguint&lt; WO &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a87dfe8ea9ae987c984fec692a72729de</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a2d0481788703eadbe2f3bfaad9b211c6</anchor>
      <arglist>(const sc_signed_subref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a9867a6f314f7077eb716e0e01fbd4aff</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a87096563738ffb05b63fc55781f8692b</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aee099955be25313aab2c888d338df072</anchor>
      <arglist>(const sc_unsigned_subref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ad9385f49cf8d304cce99da3ad39f955c</anchor>
      <arglist>(const char *v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ac8a7c2786d2ca13989672864a51a6dfd</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a54a78ecf80047658d0d7a6660bc8dfc7</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ac8b17f032fdac83f6cb7d10ad496d25a</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a44134125508c2d163d05dd0b16937471</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>adf2900a80d548269e52bb90175136f6c</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a9f82b29706714d4a739de1a84dcacb35</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a571c254c8e09a1fbf81d2363ca121b94</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a2e9d45e80d72ba66b9bbbef783c9d11a</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a7e6afc075e8f1c98e999b279551453fe</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_bigint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a198c7f69c0ef16869a1475edcf0f03ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt;</type>
      <name>operator-</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a711395a4d86f39dc5ae49cc5d3da54b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt;</type>
      <name>operator~</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aaab50a9588f748ded7175a59b258ac7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>abe46c64a1685a8f5d1f45133b195155a</anchor>
      <arglist>(const sc_bigint&lt; W &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a40c6f210d7988da02c36288e26d7b2fe</anchor>
      <arglist>(const sc_bigint&lt; WO &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>af8d1c237cbb36f8314e8498e24dbbb7f</anchor>
      <arglist>(const sc_biguint&lt; WO &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a9ff0f4822f914de3910572fc2c20a501</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>abe4c0dbb4150b3b1b2b3be3082af953c</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a38b4dcd5d0863c60a0589bb783df83f8</anchor>
      <arglist>(const sc_signed_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a52b88604d389d2e796c6de4cf6219bac</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a73dcca6703d0eeb656f230fa6ccf566a</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a80299c07d01e3f826c1520cee7905193</anchor>
      <arglist>(const char *v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>adc24ced70932451f473107e5df9f3f02</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a9539c626fefd26866d5a0d8c299c7cbc</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a02c6c26d178ab5f62e6e0349be86e948</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ae4ac4dab1822a73869cfe96ab26f2207</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a47e4edb5a95b4049ee268f508077e6c0</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a3dc730eef8142cd31ae83e4844cc9059</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aa54f323a499953bd113008866cb1076b</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a321778e3ca158639348d3b2b7ac0f8a5</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a46efc05b5f03ec50c2a73164c1ecd29b</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a4195ecc74a8a8224297e20d6a5a5b749</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ab08c203969ae559ef199540e361da83d</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a110539c3fa0703e9045b6db09b54605b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a36dc18a3fec6ec89224f4c4c413cc0f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a0f8c08c01935561910bf1dd5d7bca1e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aa718773dcf2170bd0dbf39569ba10000</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a3de51114f2d9196934f4ef4ff5f0ef0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>af5ab8aa6ab5cdc8ce6de199f17acdc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aa2e3ec55677ca87c5194e3a996262b73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a549991558b0239162cd4661bb4ee60b5</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a6e71b308ed5cd9453db102b556244042</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ae71b5ff918c9b6f767f6a736e8e1e3ef</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ababbd927e699c28df2f3a89fa2333b42</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a99ba4b46a0c120267ec08c2fdbcf6185</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a25601c697048260f980a88dcf0d3059b</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>adcc5deb68754e38249252ccb6bec75b8</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>adb172b7bc7ff1a19ba2da9b7d3ebe3cb</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a0455990634ba53ad1dce4431feaabb58</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a5cacaa18db38279401209452625cbb4a</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ac6c7de95702b97fcc637422ff5fed3fd</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a20b8c2b5ed909a7ca2dc49b45136ed06</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a70104e2b186e5117d7f0591231536657</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a9364c5241600a1763b89f220c9be8dfb</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a8a51d660f8a1c0ee9574ecec18daa303</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a3a4e2326e14431ec3c6c255013c831a2</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aa814e0067bb36fbb20a175458a0747c5</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a3084987010072e78b0d22b5881213697</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ace1bb2e9c9b1643fe9c7745e6e7b438d</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a6b650320ef973b8aa988ecb3806edd91</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a37be367186dad24c60542044b0ecd47c</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a687985170b84a8cbf81c7f91292e5fb3</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a8661ac6e8b6d3cee0c707ca0aa5822b4</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a29bdb62487d2557dc6cbf905944eab9d</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a945f17b55fb960380eed51f918872fa1</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a23a492ce95121df62ac3fe6ce98d2990</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a8f2cc9feff44f989dad1207a73d17e1f</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a02dce8bdc4d7574bb676cacce87e4eab</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a6d303717f4a956f93c19f3105f1cdcfb</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>acf2e471812d292104f90e897dfd7f517</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ab9ab8e60c82a7cceaac90196a3349942</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aa6bb9c2a0b014eec06152d1240dd21c9</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a015fc926ea668a23b8a25167465ad2aa</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ae417e9a73bca509f3b7bc1b7b954c36b</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a5f4e2887c8994b5602169f18bdbe3195</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a8b9e376185db549ed5e390701ffaf066</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>af6f504c7680be2ea3e3d857c370f4bf0</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a3ac51e027c3ee8846a8860c950100fd6</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a0fa5106e663caa97b587b0a695715027</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a7026553d060fff17dd9664fdbd07410d</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a8eba74de0ee7a122bda2ad9c6205458e</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a20e1140fe5fe7b30934e57d0132f23c4</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a4d46e2d076f35af49d52f38611bcc3da</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a42fe2404aba57dfbea1a97f1937e6e0c</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aac1434331d190ebc0193116e368c8eab</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>add7c6f13c70b08cd7a683f5ed0e43931</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a887e5913e1f152abd708acc40eb3258c</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a834be64d85f5cdf6eec89fb097401853</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a7c06702018e445a343809f519c92d05c</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ac6bdafaec41598740920e9415d73095b</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ac34cc70d2001cfa59735c8cb1866373f</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a7356847300b603819b34bcabbb10858e</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a4ec581e1511317945da7f7dcc8c5ffc0</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>af94ceb7a35719443b9861daa2346412a</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a07f8bfdd5cd8073330d99198c22a2a00</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a0d33ae3f35783a3bc01d4aa64f6a7b3d</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>afa8be23b564ff69d9796e5e6fc6d0e5f</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>af6de2d30e5fac8541a965c5875b30c71</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aff06d458a028773e3ec1c2c4860e7494</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a8bb46855da45733e32dda0c6ec7e682e</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a407444b2e4c510cc5e234db3a445a514</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ad425dd1979d36a68df091d831b3381f4</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a87582f28eca6e915f57f88326a5c5a78</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ad8e8d3bb09e67083b6c434df66c6566a</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a254cc275212a18a074b3c6d9ba2f73a9</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ab05386ff5ec6c6b04808cf3c097b3784</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a99ffb8c2e8693a754ef90c5495ef6660</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>af1dacf2d0d4450ecbb313e1e3777115b</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a42018b64bd419e4a0ab3b6d95d40c19e</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a4660f3feca9e192d29bb502ca4c7926c</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>addeeeafa968ba606701c6e23c5dc565e</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a6a61b5f4cefa2bf6efaa08949fcb1a73</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ac4850856cb8e2c4122bd27b350298b6b</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a2e0b165b0bb20252539d36e40321df23</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aef04fc79339f7ccaa7eabcffad48ea15</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>abbf1e93885c4018d7b71af7c0b9e7c30</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a0ca0d5dffe968d863a908e840c0e8418</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a5c6346efa7a8cb806271d1a85e9f8a99</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a2049bf187d104fcebb13c78b91dc6077</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a0bf91c2507eb39a8a024421274be5a62</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed_bitref &amp;</type>
      <name>bit</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ad1faa8ab219b2cb8e2498ef54aa954ad</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref_r &amp;</type>
      <name>bit</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a644b78d75bc9f8eb4d5540b8adfffc61</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed_bitref &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a33893945ac79d781a87724f7c05eb11f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref_r &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ad63d7dbb435094e783b0be0d05b68fcc</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed_subref &amp;</type>
      <name>range</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a6bd087dcf8a8bd935dc0a99a522fd31b</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref_r &amp;</type>
      <name>range</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a72063d0d6e7505927f0964bb142e400f</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed_subref &amp;</type>
      <name>operator()</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a8059258c97c01ea0930dbd2b50e7e40b</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref_r &amp;</type>
      <name>operator()</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a69880eefac5cf0378214ed2188e17517</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a8018815fd8ff89c8b99d9855775c17f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a533a66713bf84b0ed6f9cb1ed6914d3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a32afe4ccecf1d2df3882f3c91533f698</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a3d974cf588ff1c680bc542a3e1dbcb99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a724d0f6907e8c0fda3c19d22ca779779</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a5233408b8a4c51ebcefd52081c94484a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>afc77ce98e0144740f51c2770cd7756ca</anchor>
      <arglist>(int v) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a795d753f50753c919daec2b081206402</anchor>
      <arglist>(const sc_signed &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a1643c9cc91a93ba67a9931d9518be6c7</anchor>
      <arglist>(const sc_unsigned &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a87ed272507345a99e087abbfaebc569d</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>af0cae6fc390379e8e4656e62712885fd</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a1ea337d4b0d0fd15046a9604c9267b64</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a20cdea9a1aaef22706dc9fe0a36ee894</anchor>
      <arglist>(int v) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a63c062b73852d1ce4ed509a1d3fe4b65</anchor>
      <arglist>(const sc_signed &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a862921aeeb979dc98e608ce236953bcc</anchor>
      <arglist>(const sc_unsigned &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a08d429ac3f0289087ee14670db02de74</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a47591303fc7fe999611161f73c7395a1</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aadc51d33c013babb899854685a473916</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a7685ab5bd3d1e3176acc69a22eec59f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt;</type>
      <name>operator++</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a7c501d4528075ba4673218fe96996322</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ac4f0c994fae34fdbc5270439c514bce3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_bigint&lt; W &gt;</type>
      <name>operator--</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ae799fccc4fe4a03d85d7fe0e5c4ed068</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjust_hod</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a7c37c1c6b43d3ec9f1f03ade7d5cda67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>sc_signed_proxy</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aba13db9b8bf990d8015735895d1caffd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>sc_signed_proxy</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a1a2f26ab3ab94ebbcc04bdaacb4d4b45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>abd903e700eebb792a6ebbfe707028b6a</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a4f82944d2084a6743834aa58b8cd5dd7</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_actual_length</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ac2e00c23b924cf753c29f431167d3130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a482bf5a6fd36fde9db42fb1a7dc0ae3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a29d63db5cffe21d77a2cf9621c567afc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_digits_n</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>ac850cea9f8fcf0e21bad5bb360e5acbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_hod</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a7fd648dd76964fe3956851fae6fae765</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_raw</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a3d976ae3e2fe00ed087d28038b7453fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>aa8b4b5e2a845c5b95892a8195644da50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit</type>
      <name>compile_time_digits</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>a7152bd089db14a26f7cc442e2e79e04e</anchor>
      <arglist>[DIV_CEIL(W)&gt;SC_BASE_VEC_DIGITS?DIV_CEIL(W):1]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_biguint</name>
    <filename>a01605.html</filename>
    <templarg>int W</templarg>
    <base>sc_dt::sc_unsigned</base>
    <member kind="enumvalue">
      <name>ACTUAL_WIDTH</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9b4725620ef686e154caccda454de6c8a30bec41004fe6d48a84dbe5783cb9737</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITS_N</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9b4725620ef686e154caccda454de6c8a263d527a6903d73b925315aa5402163c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOB</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9b4725620ef686e154caccda454de6c8aa12cb2fb1abb65465348a2d053bf6458</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOD</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9b4725620ef686e154caccda454de6c8ad10511bad854077f0dd7dceff6b01f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9b4725620ef686e154caccda454de6c8af7c6ffd89cf8488255830553c47371bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIDTH</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9b4725620ef686e154caccda454de6c8a864fc1dfe3fb06983fc976b986565c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>HOD_TYPE</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a911e45f865a20dc59153dd3fef326d14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACTUAL_WIDTH</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9b4725620ef686e154caccda454de6c8a30bec41004fe6d48a84dbe5783cb9737</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITS_N</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9b4725620ef686e154caccda454de6c8a263d527a6903d73b925315aa5402163c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOB</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9b4725620ef686e154caccda454de6c8aa12cb2fb1abb65465348a2d053bf6458</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOD</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9b4725620ef686e154caccda454de6c8ad10511bad854077f0dd7dceff6b01f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9b4725620ef686e154caccda454de6c8af7c6ffd89cf8488255830553c47371bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIDTH</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9b4725620ef686e154caccda454de6c8a864fc1dfe3fb06983fc976b986565c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9e8641bc7d153d0518ce5472d88362be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>adf0a30eb0be8461d62b37dc873ffbc7d</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aecf4114c83331e704a9401061a3d7e44</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ade2e79e36c49975a6d19acd10fbed6d9</anchor>
      <arglist>(const sc_biguint&lt; W &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a8d4db8f1df03f9e80d4fa9485929f6f5</anchor>
      <arglist>(const sc_biguint&lt; WO &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a0d2c5c617a7203800bcad46440dba173</anchor>
      <arglist>(const sc_bigint&lt; WO &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aab9ced9e5c3eb4d5964d7d1f0c63d804</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a73ee85f36a5b34f8d94ca97ba9c1436c</anchor>
      <arglist>(const sc_unsigned_subref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a01912961a37ea8e05f1a839784cb730d</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a4629b00535fe3abf1923afc9cd9dd7d3</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ab4d266ddf7ef3263bab1d1d4e1c8cd97</anchor>
      <arglist>(const sc_signed_subref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a391803a50de53af3b1ba305e70130186</anchor>
      <arglist>(const char *v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a4b51392e7edc97cf5a1d0899f170e2c0</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a73187c2bb67bc2d38eb6e0589981cf23</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ab74d7e242290e5917a59a0f555e8773a</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a8154d68addde6b1f5a4f6356daf3f3e1</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ae9bee6e0a73353fab34310678cfe064e</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a8552a430d7288a9c555596b81a851fea</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a656386130f589bbb8f788f1005247c88</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ac67e112b84457f35b7d70fccf331bcad</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ab3f866b68cba5b95e406a8786da29850</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_biguint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a5f3f2a844f9f16d2d8b5720ae2dd6532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W+1 &gt;</type>
      <name>operator-</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9c960c6516ca2eea1ceca3f408caad5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_bigint&lt; W+1 &gt;</type>
      <name>operator~</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ae7656ac4079129b9f6ec5be7a6d34502</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a867b51f01c19048d548d4a4fa389097e</anchor>
      <arglist>(const sc_biguint&lt; W &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a8b66f08c26478c9b9c13cd90e9146f31</anchor>
      <arglist>(const sc_biguint&lt; WO &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a0ce4d3af8925fa69d3fbd127a7fcbd2a</anchor>
      <arglist>(const sc_bigint&lt; WO &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a3298d85246cf6eedb5e189fde940196f</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ab8187dc468632d1aa4c6a4215e69df6a</anchor>
      <arglist>(const sc_unsigned_subref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a21b0d68e3b5d59db0df65551083173d4</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a650e137a1782ae558b3431eb72688080</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a05719b7b1ae53301a6ec9f4a813a67b1</anchor>
      <arglist>(const sc_signed_subref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a748cd3608eda8ceeb7ad804e17a9ef9c</anchor>
      <arglist>(const char *v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a40156bf260fc96c4e14aacf00ec55ea3</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a83ac2fb067f3ba9cfa1eeefc65178c48</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a339b67827d1f53ea1a6619c2444da657</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ab17066bc1868191ee6857b02366c4e57</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ae39b4dcc559ea32d407a90a87a6c1177</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a6dcdd0fcb6c79d732b3875e292b48ec1</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a569d6cb0c7ff4ec8df8ac58535852301</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a7cd9d2ffd735ab15a22aa7e36ddcff97</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a37fd1bc1509e279afd9c9659a4dab4e7</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a3d4a738c5c9cc67f4bb6b06597089ae7</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a38abdc664fb94f9ab0915a6b094d616f</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ac14ad13e013842be27f85cae439398c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a13f7e89781fe6777f311102d72fd0a84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a6101cb13af6dbd83d5ca55ef510805c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a36957641fca17cfd47e40c4cffa9e4e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a32da685e9df679f27fbecbfa35cc130f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ab181da9b0a4cdb354b47541cd288de06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a4c29e1fcfb177864fb6504ae5208f565</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ab7eb0bb2833bea87a1b5689743251021</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a50b6de1d2585ae790c684c264acc6432</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>acde9da0d2b08b507e813042131464dc3</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a2c5b2389658a366d2f0d5b0046301f34</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9ea8df4091dc3ea282f06fef0bdf2e11</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a80ef5c9c9e93fc1d18724e3e29d1d431</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ae13663c63c7da219889d78709958b3de</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a64eae61379cdb0fbbcd6212ad090ee2c</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a60332c74769a04d1a78ef156b3045467</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a81cea503b950fec9011894a3d67d0af6</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a0dc638b3803297c5f12861f399c58fc6</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a3b0925f704707f7007a47c04cef81794</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ac1a2556fc348d41316546b04b6ecc53d</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aaf0d7696533ab387769fe43b18b286f6</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a84bd4a78d8b81b4f599a2216591ab4e7</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a35700c572c34948a3e8d85e4d7a4701b</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a2137b378b2b07b79dce72eb1e32af635</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a7944201bc93e7cee2233fa1e423907b7</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ac15289d6f6d885bedc7f053144b42ef0</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a2b60044c9a4840d97e1cf918eb93f15f</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ae51612f4f3a3108286c2b2523b0302ec</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a17d241463012e8674af2aa494d1eff63</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a63362c4dfadab75d856b914d6fe22776</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>af4819694355aab7f7149f12509e8aa9b</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a1124fb2c8afbc12452b095c4cc8ba429</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>af6f3fff37c10f508c6bfd47971a014cc</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a70ad4ddc88f836c0a37678c095b73c34</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ae665041dd2146b52dcb6014fa05c8625</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aa538ec702d0960d6aaf412e384e460b3</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a6f8664f88c9dd0d82918c9dce4e0dd0c</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a8c434aeca0302649b8bd46fba6472540</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aa1bb848e985963824dd479448bedb2fd</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a93b4ec9ce3b5fe402d76ee4ec088086b</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a1d6a4deaab8d80778ad868743d65e84e</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a0bfb5aa6f581b13c17bda5786f0e2539</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a3b033681392e6052166b770cf37e2431</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9a5f8366d6afc084e2b7cbe76d8b8ef3</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a87342db47f03a07fe8d75a75e75da68c</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ac5d753c94cfadcee36886d46403b7846</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>abdb876d4810bf42c041ec2e5754d6408</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a50e7759b05f9a2d5759bfeb249b8bf3e</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>abe974b044dfbfd699d399cd0aca76b45</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>af541023c9e2ec3468354f7131d2e41bb</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a0e33d9d93b53cc753e42440adcdd69e4</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a6beda552e6716d3ea868765936a152c0</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a42af404354fc85507e60e86abf2a6d10</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ab3707a1b6a5b65c1c59b660bb0d6e740</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aef7967d4fa925d4636761c06306d0ed8</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a04d170677083ce9c2546cf48390b4e3e</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a2518c80785b6e857ca2bf24479af5b1e</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a830f181280ff0178f1021c86e96b27fa</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aa66c2cf6b7dc66ec0a09662487b06cd2</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ac757d988b344bb732bcb7608d77fc4ad</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a93c05de34bca27ae057aa94595c2a205</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ab82889e1f549f6449697cfa0a0c7468c</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a625964b383da5e650ce213458209b13d</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a52bf9e8cf4cf48a30fec65233053cab2</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>adc969728a21dd3a9c65d8fea4e894d84</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>acef4a7422ef1849542b9eb16bbb1af6a</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ae1898d8aff4b4ddc5d303b64233c4517</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a5508354378222a753e84270f640bd734</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a3edaa1a67bb3fc535ff9c368ea762408</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a4549ab9db6f766597b3d2a86a8a4150a</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aef2392cd971d6b9b33604f51983feb94</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aa363eaf677794e1f6a095a6dcf83af6e</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aead0ed6ca223ae1b3528aca0c37c7af0</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a2b243d6a2094536fb2b5ffcec0629d5a</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a791d32d845946d9bb397cf68fc34cc7f</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a2a51b1c1f7413a0ef0f63bda4ed125c0</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a8d9e3219033d371ff978c8cc5e676fbd</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>af3c1953ce7578b9d3a9906c6acc76c66</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a924894e6888e7e8855e4ef54c9a5e7d2</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aa79db7b8745d69e8daf4b6fe7c29b776</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a0f44dbba3dbb13e67fed0aedcea5a1b4</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a299b7b37c57f4e4749cb56c3c9a77d69</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9250084e9ef7f12fb6fb3aa055587f5a</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aa8fc2b1be156c7cf2dcf67d8d29555ed</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ae605eef81601c9627ef7ed851bf7e824</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ae76ded3384d291a76d18c4b9bfcf9706</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a67e2513a2ba4b36f2899a3cd5c9f3bfd</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ab80ddb3c71bda139486dbaec26beedf2</anchor>
      <arglist>(int v) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ab9d01f1129222da3ac1641c8620ba2e2</anchor>
      <arglist>(const sc_signed &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a12315d4ae43171008cf3fb2290776df5</anchor>
      <arglist>(const sc_unsigned &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9a3be8295813ad2f104cba995fd53e18</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ad2d207699f475a24bf848f921e2e6e3a</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a91ea07b94b3bbf41af1290d3c8914db1</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a167915e89b55d841090834ceea0420fb</anchor>
      <arglist>(int v) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>af255c19b740e10eaa5f6c3c150a54047</anchor>
      <arglist>(const sc_signed &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>afd8b4289290072183f7bced6d3fa3522</anchor>
      <arglist>(const sc_unsigned &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a5766e311c735bf9e29b84bbbd1c99c5a</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aab4c9b8cb2aad70f57c5e2e51c8a8783</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_biguint&lt; W &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ad2ae08b46e5b7660278e90e0dcf60cf4</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned_bitref &amp;</type>
      <name>bit</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a05c65c9e058dbbe4bc8b4a3b18f7279b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref_r &amp;</type>
      <name>bit</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a3da5c64fb9ea24746760e624602c3645</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned_bitref &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a67d3933bc6b96c37fe066e80606fbff5</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref_r &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ab508267224b2a67028422b8ea1d41478</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned_subref &amp;</type>
      <name>range</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a9d35e2236265329612023a5fc4939a90</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref_r &amp;</type>
      <name>range</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a132b5453fc9da792f1cc3ba5d9af343a</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned_subref &amp;</type>
      <name>operator()</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a41fd4c14bd97e60710cba2f2058c9c92</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref_r &amp;</type>
      <name>operator()</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ae44f88620708f020d8fcb3b891d403d9</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a68cb2bb9f121c69017b53a82f2c804db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a000c5d4c96838c1301f3e1a118c59e40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a959eb5f7ef6ad4d833c4504693034b6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a14d52c7f6399e37cb6b5c50583175586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ab131b84ed923db55354fa250f8db56b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a6bff767682b42c4fb94aec3d6ea2f1bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a8925b72f6e51a42002d088917349e5c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt;</type>
      <name>operator++</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a5d5e4c28a64f19deca5732a2dc6ef17d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>af0280b6832b327cd9f00f475f3ce6546</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_biguint&lt; W &gt;</type>
      <name>operator--</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ad2b8442ba7c407a1e938c18bdf9edf1b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjust_hod</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ac13c94aff04dfde572b2b09e94a069fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>sc_unsigned_proxy</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ac56e949ae180dea3097f7e1d39ab7f31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>sc_unsigned_proxy</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ac33968c67dee3094b147689e2e8a63d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a31d056b73b3da1b1a0a82136bbeaa16c</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>af8fb096f14a0238eadb9df51c6609fb5</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_actual_length</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a13be0522e76ed43c4fff98c169cfc9d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a83ddae20be0ead0e4563b01ab86c8a85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ae4de5fad5f24b7976e69d4b843c07bd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_digits_n</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a59db8dc7986d1f67b7ffa91caf577b5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_hod</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>ac62cb811a0194985c963033f02175773</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_raw</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a8a0866076c767bf72a68c18f2f198650</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_raw</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a64b748f8446c31ddd5bf0bb9b15a85e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>afcc55c6e417f0c5e145fb9b554234c03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>sc_digit</type>
      <name>compile_time_digits</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aa9bbf54d254c62de927ac345b90d68a8</anchor>
      <arglist>[DIV_CEIL(W+1)&gt;SC_BASE_VEC_DIGITS?DIV_CEIL(W+1):1]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_bind_proxy</name>
    <filename>a02093.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_bind_proxy</name>
      <anchorfile>a02093.html</anchorfile>
      <anchor>ad982918a6ce3dc5313ce2ae59bda2240</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bind_proxy</name>
      <anchorfile>a02093.html</anchorfile>
      <anchor>aac239e4b99295e629c810906212d3f13</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bind_proxy</name>
      <anchorfile>a02093.html</anchorfile>
      <anchor>a51aa646139da624060f5c5eaaca1fb87</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>sc_interface *</type>
      <name>iface</name>
      <anchorfile>a02093.html</anchorfile>
      <anchor>acf5e1d9812e35aeb1c47a480fcdb4a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_port_base *</type>
      <name>port</name>
      <anchorfile>a02093.html</anchorfile>
      <anchor>a421f0418c5ee2789169dbc84d8518cc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_bit</name>
    <filename>a01561.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_bit</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>adbc1ba5dd4b67aa0efab53e7bf138280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bit</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>a568ceea0f9fd082bbdde608aebdb7f9a</anchor>
      <arglist>(const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bit</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>a97a9d33dac5c7effd57b28566f8ff73a</anchor>
      <arglist>(const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_bit</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>aa8cb46d7d3c9c06dc78684a901bc0750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_bit &amp;</type>
      <name>operator=</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>a192426cf70b8bfb0b7cf518cc0abbb07</anchor>
      <arglist>(const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bit &amp;</type>
      <name>operator=</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>af63642ebee97336ec05765889dd4b336</anchor>
      <arglist>(const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bit &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>af686db678ca8fb215c6fff868d0143fc</anchor>
      <arglist>(const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bit &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>a3910395177e22c23b8c2d20de2b58ec5</anchor>
      <arglist>(const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bit &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>a77aec43f8008b3b27b116ea9e68a7994</anchor>
      <arglist>(const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>a503da97c216948ac0f3c0e6538b58d08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>a4a6d3d6a8e42c4939ef02b8430ff50a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_bool</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>a5e66930489f6ad7de9f846095fde4bcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>to_char</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>a6489a7ee3a5872a7d5652753f2a5d469</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_bit &amp;</type>
      <name>b_not</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>a656b2e538d9e25d84431a84da9305114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>a4e7a70bdde815be8f5513367186ecffb</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>aa3879d5a40fcfa5edaa4bc8bceb9de2d</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>a0878ac213532d2986a86870b7473585a</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>afc9c399a2b2115248a2bd3d018ab7059</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_bit</type>
      <name>operator~</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>ab054c860466b94f3a82ecb0b940c7fb4</anchor>
      <arglist>(const sc_bit &amp;a)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_bit</type>
      <name>operator|</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>a70d55e0d0124e908d13e9046f3ffeff1</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_bit</type>
      <name>operator&amp;</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>aba58577deceee93303d97e47fa90eed9</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_bit</type>
      <name>operator^</name>
      <anchorfile>a01561.html</anchorfile>
      <anchor>a760f0046a747af25b107493450ca6064</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_bitref</name>
    <filename>a01573.html</filename>
    <templarg>class X</templarg>
    <base>sc_dt::sc_bitref_r&lt; X &gt;</base>
    <member kind="typedef">
      <type>sc_bitref_r&lt; X &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a36c19da7bfb67d6d34b6246741033394</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bitref</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>ab63919b62bf97f6356faf7a7e034ffc4</anchor>
      <arglist>(X &amp;obj_, int index_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bitref</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a0a0004765724a3ff8f6b4ed51ad890c6</anchor>
      <arglist>(const sc_bitref&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; *</type>
      <name>clone</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>ac5a1412d63e5554bc43a90e7e7ab7649</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>adba61169ae3ceb6ccd37528055f2d748</anchor>
      <arglist>(const sc_bitref_r&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>ab8c4cd1da8d17b23fe2c7186e5d3b2b3</anchor>
      <arglist>(const sc_bitref&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a205358d000f019de11b0363f38db4e27</anchor>
      <arglist>(const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>aaadee8c2e71ef5de5c457ae826f2c579</anchor>
      <arglist>(sc_logic_value_t v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>aeac6dcb471c946f04c8f07b421be321c</anchor>
      <arglist>(bool a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>aec8af4d6d6402c5ac0981999fd374eca</anchor>
      <arglist>(char a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a126cbab54b00d9d1ff58928859409112</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>ae3090c74ed61ad9061a25fb66d3bb595</anchor>
      <arglist>(const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a18ba14529b8a639c2e237f373ae75371</anchor>
      <arglist>(const sc_bitref_r&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a5e397792304676dbc60358b3646429e7</anchor>
      <arglist>(const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a06ed2f9ea70f04caf189e77520f51eb0</anchor>
      <arglist>(sc_logic_value_t v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a53176531a87a2ce8a88ad921e0ad2c6b</anchor>
      <arglist>(bool a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a2fdba22709f65988b01a95bf35299fda</anchor>
      <arglist>(char a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a622668ca55fbe274374d84c193f9a066</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a91c41b7c17fdd9d3bb2b707621c51050</anchor>
      <arglist>(const sc_bitref_r&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>ac7d7f7b53a3d2362e0c9f17fb8b3f9f8</anchor>
      <arglist>(const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>ac2a1f6dcd573c33701b5badd6871e328</anchor>
      <arglist>(sc_logic_value_t v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a03c3a4f7dcb9ff95eb679335ce42d17f</anchor>
      <arglist>(bool a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a04a82749edfd02eddd62907d02f8621b</anchor>
      <arglist>(char a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a43a997fd7fad454c921e988fbbca9df8</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a83bcb1bc43681aaecb46ea48ffcc574e</anchor>
      <arglist>(const sc_bitref_r&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a4aadcf3f57e6209e659c755cb9fcf6ac</anchor>
      <arglist>(const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>aa4c96b99e9dbb3254a7b6e01854b3e88</anchor>
      <arglist>(sc_logic_value_t v)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a7ff8b605ed77a40d231fe70e78e2561e</anchor>
      <arglist>(bool a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a998272f7963b32cbdb733ee9455c70d5</anchor>
      <arglist>(char a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a68b03dd277d59d9184ac5d6200d818ef</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt; &amp;</type>
      <name>b_not</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a7f9e87a52bcf33a328f0e21e6b11424f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bit</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a7d2e20d66fb585e3e6d726202b62daa0</anchor>
      <arglist>(int n, value_type value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_word</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>af8e10b6766cb683cf83c5587ef1affa8</anchor>
      <arglist>(int i, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cword</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>aa3c2e3088205f7adbc495efc8c06491c</anchor>
      <arglist>(int i, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean_tail</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a51aa99d5c0e2ea80d98263a4bbdd5cee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>ab99da97f725317490dac7ce57818bb12</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_bv_base</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>aa31c8f5d1ec5ab3b45594163c614f9c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_lv_base</name>
      <anchorfile>a01573.html</anchorfile>
      <anchor>a2ff965b93b2d2d35399f418d8ee19813</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_bitref_conv_r</name>
    <filename>a01565.html</filename>
    <templarg>class T</templarg>
    <templarg>class Traits</templarg>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_bitref_conv_r&lt; T, sc_proxy_traits&lt; sc_bv_base &gt; &gt;</name>
    <filename>a01593.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>a01593.html</anchorfile>
      <anchor>ab5398cee53e1d39b688aeadde3d564c1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_bitref_r</name>
    <filename>a01569.html</filename>
    <templarg>class X</templarg>
    <base>sc_dt::sc_bitref_conv_r&lt; T, Traits &gt;</base>
    <member kind="typedef">
      <type>T::traits_type</type>
      <name>traits_type</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a8c7ab19ecb90e89154512203084f4541</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>traits_type::bit_type</type>
      <name>bit_type</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>aba5ca01ff489a8d258a0162d8d0d8298</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>traits_type::value_type</type>
      <name>value_type</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>adfc79facee238d66d076cceaebe6e859</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bitref_r</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a684e1aff9d0952779ac4cb042f8d2a4a</anchor>
      <arglist>(const T &amp;obj_, int index_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bitref_r</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a8c401e6adcd92d577334fc4ea4ebc988</anchor>
      <arglist>(const sc_bitref_r&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref_r&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a11b4dad0d99d5c9bb144248a124d8cf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bit_type</type>
      <name>operator~</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>abc69197cb991f391d652af03dcc01397</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bit_type</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a1d9f0cd3ed43784f0c65bd00ef70b1e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a1bf09c53083e97c58216f93f01fbae3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_01</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a1aac2cbe48b090fbe2a045622f2ec710</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_bool</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a39e5b7a80f86f9c3aca076db12af20e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>to_char</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a3a52fa14e26ea9eab993c99aef77a5f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a6f39a731545a272a594770627b67f4a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a3cdc5e19f5aaa1155fa504699b14cacb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a39f3f9a67faaa85c29dd13763722c0ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>aa28874fd1a8439bffc49854017c61647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>get_bit</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>afcd8ef9aa05efdbe375b940ffbe83361</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_word</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a5f11c52058f19e1d4bbcd90d0d970d42</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_cword</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>aa9d84aecac8b6ee11ed4aa3b40fe7e25</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>ac2e009e3dcaf634d1eccd248b30685f6</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T &amp;</type>
      <name>m_obj</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>ad6d13e171eedd7725e0d83d3b6eb59a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_index</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a54d6e18e8b2e1051299b859c81744957</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_bv_base</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>aa31c8f5d1ec5ab3b45594163c614f9c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_lv_base</name>
      <anchorfile>a01569.html</anchorfile>
      <anchor>a2ff965b93b2d2d35399f418d8ee19813</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_buffer</name>
    <filename>a01277.html</filename>
    <templarg>typename T</templarg>
    <templarg>sc_writer_policy POL</templarg>
    <base>sc_core::sc_signal&lt; T, SC_DEFAULT_WRITER_POLICY &gt;</base>
    <member kind="typedef">
      <type>sc_buffer&lt; T, POL &gt;</type>
      <name>this_type</name>
      <anchorfile>a01277.html</anchorfile>
      <anchor>afddd0f5f7ee30ea50f31d3b11a2674c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal&lt; T, POL &gt;</type>
      <name>base_type</name>
      <anchorfile>a01277.html</anchorfile>
      <anchor>ab5c5b44d12eb6114bbaf1ff11aae4a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a01277.html</anchorfile>
      <anchor>ae7abd6d836a7d17a578e3af951728126</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_buffer</name>
      <anchorfile>a01277.html</anchorfile>
      <anchor>a04cde5e9a1c7f29be31077b5dc168bb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_buffer</name>
      <anchorfile>a01277.html</anchorfile>
      <anchor>a460a976da9effa37f852d066686a85cc</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_buffer</name>
      <anchorfile>a01277.html</anchorfile>
      <anchor>adcb47b3ce33f52b3b3407b7cf48c6ab2</anchor>
      <arglist>(const char *name_, const value_type &amp;initial_value_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01277.html</anchorfile>
      <anchor>a17087098c2a60d92bedda79b71cc647c</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01277.html</anchorfile>
      <anchor>a0362b962484c93ed0c4670e1888091a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01277.html</anchorfile>
      <anchor>a2f7d2034e7b6c96addde80344487adaf</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01277.html</anchorfile>
      <anchor>affc9f61f4530e6b64552e793bea323ec</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01277.html</anchorfile>
      <anchor>a0d310cf0c3a445ed68fec490ea97a5e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_bv</name>
    <filename>a01597.html</filename>
    <templarg>int W</templarg>
    <base>sc_dt::sc_bv_base</base>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>aa24806e7e3b6b73ed1c3a96549e90da8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a350b21e92398e7ee759771c93ad9570d</anchor>
      <arglist>(bool init_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>af9bffa5b56f208f73db5e8b97201ea2b</anchor>
      <arglist>(char init_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a1ce9b6add2eef28ef5961e47a6fb43e9</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>af339705085303ac4a49acf61dc46b872</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a3089ea1b317a4c6e5955774336b3b280</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a913ac0357f6045ae957a201b4cc39a2d</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a220501731a987ca0580650bf579238c2</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>acf56613412b38f1da5ba69c42011a1ba</anchor>
      <arglist>(const sc_bigint&lt; WO &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>aa65d37b7e8967c0fb1f1cb4bf46708c7</anchor>
      <arglist>(const sc_biguint&lt; WO &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a9ea585849698dec72273c9ac3b9fdc10</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>aefbdc341e7dad8405c319f093e40030e</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a899e2747952a5decd5f9bcaf33f3acca</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>adacf8cbeff2c7de7072775b0490c4576</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a8ccc75419763cb72e58086ab6a139e4c</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>afe3bf30f7c42f56b1b5c81aed075a3c1</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>ad63355747d6f0cddcc9a3770b554bbd6</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>ab036a609c4f08c108f2b284c9c3169c4</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>ab0746bc90dfc8f852d3de5887a0d4607</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a1caf8c0b4eb7166f7f76cc8d1be1347d</anchor>
      <arglist>(const sc_bv&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>aa43ec3f2581f75bc611b84494ed08800</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>aa6809e4c9b8fb9d96978761c287620b0</anchor>
      <arglist>(const sc_bv&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>aff981550bab2bf8596fa9f1e0dc7c31a</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>ab2ae387fed6e1d8585326f63824c2be0</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a22b2cc37157f0d42b11b17a881db0a60</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>ae6e076d0082e3cca767c255f0f1e99d2</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a3ab3c251594ad2707f6335c7b7169803</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>aa6223e6b7648220f4936414787c1efce</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a822a6914246ea505c2deef17bc857cee</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>af44951ae6f1019b5cb462b5d57d91209</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>ae9ebd4452930e30372bcd1736e63f8f1</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>ae3930d233d120d049c1d0522345d84a1</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a35b4c59d847cd8218b23bce13de01271</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a78a03a41b276e860699fb41d4cfce356</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a2ec9c7d2d51776f7e40da7fc4c5450bb</anchor>
      <arglist>(int64 a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_bv_base</name>
    <filename>a01609.html</filename>
    <base>sc_dt::sc_proxy&lt; sc_bv_base &gt;</base>
    <member kind="typedef">
      <type>sc_proxy&lt; sc_bv_base &gt;</type>
      <name>base_type</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>aa3e52a42c1230e369191e7b3431cbc9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::value_type</type>
      <name>value_type</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>ab96ca87a75377e6f90c4b8f937921ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv_base</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>acf85c5325c758271ee4ae630c0db2635</anchor>
      <arglist>(int length_=sc_length_param().len())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv_base</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a576ca073ddcfbf436b61731e7f7c6699</anchor>
      <arglist>(bool a, int length_=sc_length_param().len())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv_base</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a23a3d0b94a49410e6afca5b3ff2f7ef8</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv_base</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a4faa28e7b42eedd6e46b791da4492415</anchor>
      <arglist>(const char *a, int length_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv_base</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a5d3035cc307c12df7ab97c15beae789d</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_bv_base</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a3371e35aaf5e318431d9cc990a6c5ba3</anchor>
      <arglist>(const sc_bv_base &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_bv_base</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>ab28dc82fa89c271305b3e3caccb7e0da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a292f3e7a5cce0ea908b244d1dd897590</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>ac86b030c86369e7ad711c3e2c64595d4</anchor>
      <arglist>(const sc_bv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>abc143c21afd1cc57fe8b2c431e30452c</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a24ab9e8ec9baed677601fd13d7cda593</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>af0921652ea83c3e03dcb32483010ed95</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a1605ac5f9dc8b33e0d7b7b2573e8ada1</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a0518ca274ba254fb4405b44a83182ca1</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a6889bf67d17d4605d0e034b4858cd8a5</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>acaa427830d36aea7a27382ee848910bd</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a3693fbb7e2d90fca672218d28286b75d</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a89f0be4e3fc62970eb6eed6b82c5c2c6</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>ab89738e4e14cf016f187231fab4ec26a</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a8ae12570596073e106ba925ae4d91a38</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>ab3b030a6201f301b71f47303f7ed55e8</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a9810a5497a254785e6956eea11dffbda</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>aac96b31347aa7cbfe6f322a4f801b924</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a6c0fe93dab77b9ebff7fada626c67449</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>get_bit</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a6ebcabe0952c438e710dd39b02e2261d</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bit</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>aa828faed68e2b41a7a895c52facb6565</anchor>
      <arglist>(int i, value_type value)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_word</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a7436ca78b16bf918817ef0448c37caf9</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_word</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a4acdbbe6f29d247c272230398bb4bed7</anchor>
      <arglist>(int i, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_cword</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a64f5af507885694770bbe2eda79d4d93</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cword</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a4b38a39ba7c7a891590cc0cd09da23de</anchor>
      <arglist>(int i, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean_tail</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a65f3b11c7bf623040b01ce5df41a3eec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_01</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>abc913a72e14efe81d35d10438b2a51c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_len</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a7a676633ce06987a493ae3146754f7cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_size</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a38ec0cba6a57cd1dec47e075d0519e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit *</type>
      <name>m_data</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a1969b4fa86e0dc68e2adb27c5737eca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit</type>
      <name>m_base_vec</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a4b9fd77c22f476e20d1fad130d610c1c</anchor>
      <arglist>[SC_BASE_VEC_DIGITS &gt; 0 ? SC_BASE_VEC_DIGITS :1]</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_lv_base</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a2ff965b93b2d2d35399f418d8ee19813</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_clock</name>
    <filename>a01281.html</filename>
    <base>sc_core::sc_signal&lt; bool, SC_ONE_WRITER &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_clock</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a8df91318a074d67b530650e07fb01cd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_clock</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>ad9dbd736634e2b0c5386ca6a85e835dd</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_clock</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a0539a0568c8baa3e806ea81159bf4687</anchor>
      <arglist>(const char *name_, const sc_time &amp;period_, double duty_cycle_=0.5, const sc_time &amp;start_time_=SC_ZERO_TIME, bool posedge_first_=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_clock</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>aad710b4b8662b0843ef3d54c85db101c</anchor>
      <arglist>(const char *name_, double period_v_, sc_time_unit period_tu_, double duty_cycle_=0.5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_clock</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>aab7bcbe7d4e5dcda73ce5ccdc247c968</anchor>
      <arglist>(const char *name_, double period_v_, sc_time_unit period_tu_, double duty_cycle_, double start_time_v_, sc_time_unit start_time_tu_, bool posedge_first_=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_clock</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a65d5ec9a1d36d32e5ffcfcb9c61bd170</anchor>
      <arglist>(const char *name_, double period_, double duty_cycle_=0.5, double start_time_=0.0, bool posedge_first_=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_clock</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>af34d7a003fb00f0049d036424d0325f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a414e9883124060d3909d45246a324302</anchor>
      <arglist>(sc_port_base &amp;, const char *if_type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a8367e909c544c188ca1c4d3b6d7c123d</anchor>
      <arglist>(const bool &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time &amp;</type>
      <name>period</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a797d69c1c7783a966b79402c3e09e794</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>duty_cycle</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>ac083e51c844e2aafb83ad420483a110e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>posedge_first</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a0fdbe6e87b24020581fa1457614269c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_time</type>
      <name>start_time</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>aa421ed8df1b206221e8df8926a2c51a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a859993ff64a4e34109a75860d63c7ed6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const sc_time &amp;</type>
      <name>time_stamp</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a94852e897bf7f41fd8bf2fe28d26cd44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>posedge_action</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a80c5db81536238944f1afa04ebeb6f5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>negedge_action</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>af77fbcea93195f794e042dca9eed2db7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_error</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>aed3c29fa9e20a6654168a0f05eda6fe2</anchor>
      <arglist>(const char *id, const char *add_msg=0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>acedb1d6ee2093030f8a5826b26c916db</anchor>
      <arglist>(const sc_time &amp;, double, const sc_time &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>spawn_edge_method</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a19232d507366ba0a470731ce3e1b765c</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>is_clock</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a4f2cde5450d198f38bf9e458c993c32a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_time</type>
      <name>m_period</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a3df880c4c73f7be93870aec916e19cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_duty_cycle</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a5bda3fa42f3b7aac4aff650632fb0707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_time</type>
      <name>m_start_time</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a41591b90ba7122a59ca535aa41937b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_posedge_first</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>abe3221ced4f127034a75b03f3c6eca1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_time</type>
      <name>m_posedge_time</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>ac9b395d35e3895f151fe2f024872c9a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_time</type>
      <name>m_negedge_time</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a683ff7e5a8a9038b625d4e8886f78d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event</type>
      <name>m_next_posedge_event</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>afdfd334c6eeabc1f09daa5f7dec15e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event</type>
      <name>m_next_negedge_event</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a49843f3482cb250e7c57dad9b9547777</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_concat_bool</name>
    <filename>a01993.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function">
      <type></type>
      <name>sc_concat_bool</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a939fd8f47051f1937c5b104bb812c6f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_concat_bool</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>aece2622de1fd1e0b422e2e5c5f34f0d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a72ed413e95833808efd034bf6b5459f2</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a7550d3843f657af6d85883d1d984390b</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>aa737cb6f159fa0c1c2b1b5bd128fe7a6</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a02e0ebaa82dd8a9ce2a83642388c7bd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_concat_bool *</type>
      <name>allocate</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>ae1619e9e411c62481efbb14e15bb6265</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_value</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a520fec3440c7ca865e40238ac7973738</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_concatref</name>
    <filename>a01989.html</filename>
    <base>sc_dt::sc_generic_base&lt; sc_concatref &gt;</base>
    <base>sc_dt::sc_value_base</base>
    <member kind="enumeration">
      <type></type>
      <name>concat_flags</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a068370c9b9a930cc50950462340b9212</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cf_none</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a068370c9b9a930cc50950462340b9212a8b35d2c1298e5eccfd7527de25a49f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cf_xz_present</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a068370c9b9a930cc50950462340b9212a8e1c6e0b683c7af28765a7b56dee2730</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cf_none</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a068370c9b9a930cc50950462340b9212a8b35d2c1298e5eccfd7527de25a49f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cf_xz_present</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a068370c9b9a930cc50950462340b9212a8e1c6e0b683c7af28765a7b56dee2730</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a60cdf13b6a7a53f4a5c765e47c3c304b</anchor>
      <arglist>(sc_value_base &amp;left, sc_value_base &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a8249e7fc497bc6846ade9815a5b137e3</anchor>
      <arglist>(const sc_value_base &amp;left, const sc_value_base &amp;right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_concatref</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>ad9a4b901b8f5f98cdfa1942b2466c148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>length</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>af7604f155548ba363f66a3bd0b615b35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a774b9450b79434bc31e9fe23c8e2d5ab</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_clear_data</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a7cdef5b7dafd2db5d099fae6aab3b05b</anchor>
      <arglist>(bool to_ones)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>aa174ddde62c70d3fa178f8c1d474da74</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a30bfe9a049f4461b71d7d0dc93ff97d7</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a41525f78aec803a0f92b6dcebd55f751</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>ac22e67bc1f3ac535071223a711561281</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>abd4e0298f427f931e00ff0b4e2fbcd09</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a678680796efd52b624dbdcf772327b34</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a718831ded38076fc987f2cb7e0c0e605</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>aaba58a0452842c53b1133330fbcb32bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>value</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>ae3f47a68fd5f181249067b629c3ebdf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>acb1f5cf004ee5c617fa94bc5aeed68cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>af47b7145d35293790bb7a218fcb4817f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a274da1334efe3ebeedfe73c7e2b6c4cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a2904df40a4c0adb044722bda76e8646b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a9a375680376610d4122f1b41df4011a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a569a9e8fae7c2aee274aa575b590acb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to_sc_signed</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a0c967ba17860f494a47e626c224b2a8d</anchor>
      <arglist>(sc_signed &amp;target) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to_sc_unsigned</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>ac5d98a1111b4067210d2e46a2fece04c</anchor>
      <arglist>(sc_unsigned &amp;target) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint64</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a8950f080864abb3e3661940cb9eaf8c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const sc_unsigned &amp;</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>aa0bdec31fa89d2d9213a322df61fe40f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>ae6c72d89c88675abf84b5af42ff5bdda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>accc522346950c06216c8cb5258a9bd75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator~</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a514033b4004bbe7060ed7c08ae3def49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a667684bc5e7f6be84a7bbc8b47c9e79f</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a95247cdfec940f1c23a564eed5150b70</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>ae90f90f501ca0980f42c9f0ec86f645d</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a9923e2f92267eb2deeb01e0427f45d7a</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>ac317baba7552d8bb682b2a76451bc9db</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>acc010f13616632d7ad04eef19ef9b1d7</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a09ceaec7c21df73b62ef73722fc9c4fd</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a62cd8c5dba15ededc46195d5a6e9fe37</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>aeb22b75c153521ecb4b80f7d8863bfab</anchor>
      <arglist>(const sc_concatref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a9e1123af10c6930133600cc1a47dbe0d</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>aeb92c632e6ce6ea0fe1abc1a875c2b97</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a092b19316f60cbf467e65ec1adc82976</anchor>
      <arglist>(const char *v_p)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>aff6a6b5f992e1e7d2a4ed60ddc5eddf1</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_concatref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a92399086889db3252c413f143b104195</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a58dfa0d9739d67bd06e9886f024cc19a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a9b8260504f54d1d6ef3de09e97d645e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a8cb2256cf875aa3ea567f8d6a33795d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a8aa160ee3066bbae90d28637a6e0e101</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>ab43e3556c223675b6171e9da7101a2f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a396508e9ba5af3eb063649662f41308d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>aac0153ae6530856790be9db5ea864fc4</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a8fe34b0d53380e5a67224261a5937375</anchor>
      <arglist>(::std::istream &amp;is)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_value_base *</type>
      <name>m_left_p</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a337bc42547903db12dbcb9d11237e473</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_value_base *</type>
      <name>m_right_p</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a8581060485a13d0d690af1241916cd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_len</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a3cc1881dc3691dba24884061c40af992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_len_r</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a68545b4b9518a9f0aef5f3e22b55ef0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>concat_flags</type>
      <name>m_flags</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>ae0ce6163458ea5a60e44d6ced1f25480</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_concatref &gt;</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a95a76b1147a0f46f4e537bd22b27f793</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_concref</name>
    <filename>a01589.html</filename>
    <templarg>class X</templarg>
    <templarg>class Y</templarg>
    <base>sc_dt::sc_concref_r&lt; X, Y &gt;</base>
    <member kind="typedef">
      <type>sc_concref_r&lt; X, Y &gt;</type>
      <name>base_type</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>ae0c5557aa925e7d1c983c32be31a1eac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_concref</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a8744d250baf24c00f1eeb4a0d0c858b7</anchor>
      <arglist>(X &amp;left_, Y &amp;right_, int delete_=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_concref</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a37bf6a73ea3e48660e1b61877fbb73d7</anchor>
      <arglist>(const sc_concref&lt; X, Y &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; *</type>
      <name>clone</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a209cbc5a28034be009162f0b4f59f71b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a29db65287b45dcc47871cc8b8b5f3939</anchor>
      <arglist>(const sc_proxy&lt; Z &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a21f97b60ce8173a18437b7dddd861904</anchor>
      <arglist>(const sc_concref&lt; X, Y &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a57ed8e65c7434a0c913063c88aa4a5f6</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a55622f533b1c58292863295e5b4680a8</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a92e73d5be775484f2e5876b8970abfc5</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>abd8c597eff1a725151148dcb2c7d90c3</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a60b2608c87388f8dc8d3829a76ac7842</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>ad9e4f0c57562e59c8b6036508e696cde</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a43d4a982657cf73135d5010cce841e23</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a9a92f91a99576ebe73fc9aacb7e8495e</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>acc0b415428e8111587ce581812e16c29</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>acbe3625a5094b14f2cb7d6d54e9c42a2</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>abb98271533e86da2dfbdf80e1835e36a</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a0276d4d7c0471e5b312a24c2f6a75d71</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; X, Y &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a01594b64f4a1952259b4197ef4f66501</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>a2fbbda042b99e2f1578b53ff8e5b103b</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_concref_r</name>
    <filename>a01585.html</filename>
    <templarg>class X</templarg>
    <templarg>class Y</templarg>
    <base>sc_dt::sc_proxy&lt; sc_concref_r&lt; X, Y &gt; &gt;</base>
    <member kind="typedef">
      <type>sc_proxy&lt; sc_concref_r&lt; X, Y &gt; &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a6aad59d6252a2f49a7dd43a1014fccd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_concref_r</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a407331f31132896e5427adb99e7e18f0</anchor>
      <arglist>(const X &amp;left_, const Y &amp;right_, int delete_=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_concref_r</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a7ee1193d9cfb457885b2c2e808ddd592</anchor>
      <arglist>(const sc_concref_r&lt; X, Y &gt; &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_concref_r</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>aa8c06f000ff772d8bd7775b17067d15a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; X, Y &gt; *</type>
      <name>clone</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a98f9ce5990e9006aeb3d907deedd665c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>af1ad9fd8cc5deb92c4c55dfd2bdabec5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a4c47f42ff137f238cec3677ad7ba26a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>get_bit</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a182e20be926b35b8e1b4cf59732713ff</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bit</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>abd927688dc9a21e4b57fa200433a59e3</anchor>
      <arglist>(int n, value_type value)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_word</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>ae8a8422663e7e843e660a69698dd77da</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_word</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>ab2ee7ebac91163cc0205b4e3dc622123</anchor>
      <arglist>(int i, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_cword</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>ab95b619be1fe9ad2c629238c06c0b981</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cword</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a440e10f8a6fd249ebb48e2c53e468258</anchor>
      <arglist>(int i, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean_tail</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>af32ee9bdad00ef6665be3a251383e9cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_01</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>ac439cabcb74fc2b9e31776440e21edfa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>X &amp;</type>
      <name>m_left</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a8e47406c8b89ec06efcfea0c885cb315</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Y &amp;</type>
      <name>m_right</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a2ff39f13ea0ea6c788e73ec6de7b8daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_delete</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a1b0720c6dafc6b7510456b090d61e7f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int &amp;</type>
      <name>m_refs</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a4afb21a683575fb7ac6df53508a9391c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_context</name>
    <filename>a01681.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>sc_context</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>abc0a268255fe43f7983360a9f85e1e4c</anchor>
      <arglist>(const T &amp;, sc_context_begin=SC_NOW)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_context</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a3b022795fd247f454028a8f063a55d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>begin</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a4c71c913fecb560b8c4408152783786a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>af11fc4db84c30867c90e47860cf54bda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>value</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>ab7a450f3332dbb394a4a22a08022ce83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>default_value</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a2e7ee98ac17535bbe62ffb36fae7e8f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_cor</name>
    <filename>a02017.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_cor</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a0f8647be5349660ff1bcc5c52caaab35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stack_protect</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a99181ac5c254d2c823fd67cfbd7f4d52</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_cor</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a0464a2f2bf3cdf97b07068e372cb9019</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_cor_pkg</name>
    <filename>a02021.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_cor_pkg</name>
      <anchorfile>a02021.html</anchorfile>
      <anchor>afd01bf73bf44ddac88e92d65f545a8ec</anchor>
      <arglist>(sc_simcontext *simc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_cor_pkg</name>
      <anchorfile>a02021.html</anchorfile>
      <anchor>a789372ceff23e2c8f75429af8d1aa9bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual sc_cor *</type>
      <name>create</name>
      <anchorfile>a02021.html</anchorfile>
      <anchor>aeca0939b03a58d86afa9aba22e0fea36</anchor>
      <arglist>(std::size_t stack_size, sc_cor_fn *fn, void *arg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>yield</name>
      <anchorfile>a02021.html</anchorfile>
      <anchor>a7c3f9c7683cc6310ec563b3fe8e550d3</anchor>
      <arglist>(sc_cor *next_cor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>abort</name>
      <anchorfile>a02021.html</anchorfile>
      <anchor>a33431ff19d3bf1f868223bc871e0e6d5</anchor>
      <arglist>(sc_cor *next_cor)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual sc_cor *</type>
      <name>get_main</name>
      <anchorfile>a02021.html</anchorfile>
      <anchor>ae1eb86fcb3391abbc297f08dc8e64d62</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>sc_simcontext *</type>
      <name>simcontext</name>
      <anchorfile>a02021.html</anchorfile>
      <anchor>a3064f9e09d62b98b7d98f64e5b6f2149</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_cor_pkg_qt</name>
    <filename>a02029.html</filename>
    <base>sc_core::sc_cor_pkg</base>
    <member kind="function">
      <type></type>
      <name>sc_cor_pkg_qt</name>
      <anchorfile>a02029.html</anchorfile>
      <anchor>afb6a6007cc04016f0509c937da8b3f9d</anchor>
      <arglist>(sc_simcontext *simc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_cor_pkg_qt</name>
      <anchorfile>a02029.html</anchorfile>
      <anchor>a970ce51fe19b03f1d2593455085ed19d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_cor *</type>
      <name>create</name>
      <anchorfile>a02029.html</anchorfile>
      <anchor>ad2d8e7d87838377d5db819d370972add</anchor>
      <arglist>(std::size_t stack_size, sc_cor_fn *fn, void *arg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>yield</name>
      <anchorfile>a02029.html</anchorfile>
      <anchor>a586a2e4047ae45e6785aa14bd29147aa</anchor>
      <arglist>(sc_cor *next_cor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>abort</name>
      <anchorfile>a02029.html</anchorfile>
      <anchor>ad61303da808bb0287949f7d288634fbe</anchor>
      <arglist>(sc_cor *next_cor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_cor *</type>
      <name>get_main</name>
      <anchorfile>a02029.html</anchorfile>
      <anchor>a9647b1806aafdce0562d68cf4d81aa35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_cor_qt *</type>
      <name>set_current</name>
      <anchorfile>a02029.html</anchorfile>
      <anchor>a4e6ceaf4a87a9dfb29430cb51681925f</anchor>
      <arglist>(sc_cor_qt *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_cor_qt</name>
    <filename>a02025.html</filename>
    <base>sc_core::sc_cor</base>
    <member kind="function">
      <type></type>
      <name>sc_cor_qt</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>a8a8fbc6f3f807d3dcab1e0861a24afcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_cor_qt</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>a9a54ade5f86eb0f55867309c950d983b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stack_protect</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>af1961179e6c1edb2bef6d879e79fd53f</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>m_stack_size</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>abf2a5dc720de1d411033a4726e2ce0ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>m_stack</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>a5b6146b3d096ea04e6bd186f36ac150e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>qt_t *</type>
      <name>m_sp</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>a48a46f3d13f22cca30a6c0de4cace81b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_cor_pkg_qt *</type>
      <name>m_pkg</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>a91f4460a0529ca7a3909fec4e41b28b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_cthread_process</name>
    <filename>a02033.html</filename>
    <base>sc_core::sc_thread_process</base>
    <member kind="function">
      <type></type>
      <name>sc_cthread_process</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>ad2b182e36aad221893391490f8aac5aa</anchor>
      <arglist>(const char *name_p, bool free_host, sc_entry_func method_p, sc_process_host *host_p, const sc_spawn_options *opt_p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dont_initialize</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>ad41b2ec5bfa52fb89f849c9c37cde4aa</anchor>
      <arglist>(bool dont)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>a5e142df1592d00a005fea284baf06e59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_handle</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>a4a61fb98d9d86beda7cf6016f55d01ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_table</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>a12ba92f261d993145709693ea4466b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_cthread_cor_fn</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>af0edeaaa6479384ae9d350e1a14cb38c</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>halt</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>ab532462d6922af0bac96a07c9d9b8305</anchor>
      <arglist>(sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_curr_proc_info</name>
    <filename>a02205.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_curr_proc_info</name>
      <anchorfile>a02205.html</anchorfile>
      <anchor>aa25a394c0d34e939c4b1294d97e35cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>sc_process_b *</type>
      <name>process_handle</name>
      <anchorfile>a02205.html</anchorfile>
      <anchor>a9ba8ebd2fd58a14681c533f900ed84de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_curr_proc_kind</type>
      <name>kind</name>
      <anchorfile>a02205.html</anchorfile>
      <anchor>aca0737ff785c30a7dc9bd9c0d2fadbc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_digit_heap</name>
    <filename>a01873.html</filename>
    <member kind="function">
      <type>sc_digit *</type>
      <name>allocate</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abddf6ad74d636bd056924748a026396c</anchor>
      <arglist>(size_t digits_n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a4650b578846496629efc1972b7271fdd</anchor>
      <arglist>(size_t heap_size=0x100000)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>length</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a14002e064e79ee4c12eae20973780f27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_digit_heap</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>afb04b29447aa2e91a098468b7a60391e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_digit_heap</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a41dc0af10990b4158b5d73afe0e68369</anchor>
      <arglist>(size_t heap_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_digit_heap</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>af5af22a066e723d25375f5c654ba6a32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>sc_digit *</type>
      <name>m_bgn_p</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ae40e4c6c0a8883621280990da2f731db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_digit *</type>
      <name>m_end_p</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab9566d2c30472d7e3996a3b93711a265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_digit *</type>
      <name>m_next_p</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a4e0d419c92d3c6155397b6dfa2cd9661</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_direct_access</name>
    <filename>a02401.html</filename>
    <templarg>typename ElementType</templarg>
    <member kind="typedef">
      <type>ElementType</type>
      <name>element_type</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>ad043f61397be515619a2c9e2ae955564</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>element_type</type>
      <name>type</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a118a37e37d0ae664a8176a58ea073d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; type &gt;</type>
      <name>plain_type</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a43a764868a53c6a4adf1dae016f096d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_direct_access&lt; type &gt;</type>
      <name>policy</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>abf0fe68bfcdd418c93f36ed4ecc39808</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_direct_access&lt; plain_type &gt;</type>
      <name>non_const_policy</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>aced4f7f6b30f69dfc083fa27e23050e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_direct_access&lt; const plain_type &gt;</type>
      <name>const_policy</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>ae6ae5caed1c37ceaf59a13dc396d7f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_direct_access</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a78ea9d37092e638810e534b378d54865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_direct_access</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a4b698f5ab3668c028caf3363d18f9788</anchor>
      <arglist>(const U &amp;)</arglist>
    </member>
    <member kind="function">
      <type>type *</type>
      <name>get</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>ad1e5fd6c39b55a10d641fca9082cbfea</anchor>
      <arglist>(type *this_) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event</name>
    <filename>a02053.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_event</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>ab2ffc3be0133a791d967828c165d2e33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_event</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a223d89b24c4b13bd919e5900a022a59b</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_event</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a44de55a8909e5527cf6f3b77bb540c74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a6e5b463c02412fadaac74a14b03e0858</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>basename</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a32cc4d6ebfd41a612af2e1841638b21f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a54ee84ecf238c1e5b0727a35e90ba43c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>get_parent_object</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a7f4b8b9d4a5bdb91b45d6ea2b4d7a17e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>in_hierarchy</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a679a33e2b18709bacbed77a6ef9104d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a508e0834831a837004f11e1fdc9a1bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a9da043d268a13d930b356f8159dcdb71</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>af580b9b22c8ef055fe72826850ca6428</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify_delayed</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>acab6a59a0ae5e6d63f5dc8f0962ef439</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify_delayed</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a3685852b12b7b53ed46aba59031e59e3</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify_delayed</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a00c66a658452d20f4f9e1e0a77551eb8</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_or_expr</type>
      <name>operator|</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>ad1b6ea946585d0e28893246ce7f5c2d2</anchor>
      <arglist>(const sc_event &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_or_expr</type>
      <name>operator|</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>adad1e26b01cec8711f6fc0b3c9747348</anchor>
      <arglist>(const sc_event_or_list &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_and_expr</type>
      <name>operator&amp;</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>ae98b291827db9a2050ecd4a91f585725</anchor>
      <arglist>(const sc_event &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_and_expr</type>
      <name>operator&amp;</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a1c0019422e65a5290eb74a2c234a30bb</anchor>
      <arglist>(const sc_event_and_list &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triggered</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a2db15fcd3bc51a3817d93d067e0f4b3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const sc_event &amp;</type>
      <name>none</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a3a0ef5c46161cd39cd144e9410a8f06c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event_list</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a44d3057c2ea3c4f40b46f3a8323ee3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event_timed</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a827e422a70d0897d66364ae6b5dc35d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object_host</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a6fbfadb40866e7c3c5edb329e1550078</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_handle</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a4a61fb98d9d86beda7cf6016f55d01ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_clock</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a034ac2d3cac16d03fca09a19b0b947e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event_queue</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a1fd1ac4190a8aae8ab523c59aa6eac18</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signal_channel</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>ac176c1693c7383050478ea7ff2218ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fifo</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>af98f1e227abcb43af177cfc8eac2fb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_semaphore</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a1c8e98d9b1dae7b0ed0fa9048a8ebdde</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_mutex</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>ab4d85b463b12548996b5c3bf5a47110e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_join</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>aeb79ed0c7e8b054a1908e8e6346ef2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_trace_file</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a33c108a9c74435c37e41b8e36c8f2751</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a285a9415d730026b6e9477982147ba11</anchor>
      <arglist>(void *arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_and_list</name>
    <filename>a02045.html</filename>
    <base>sc_core::sc_event_list</base>
    <member kind="function">
      <type></type>
      <name>sc_event_and_list</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>adcef85fe94dcbed31c3c6ee75156a091</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_event_and_list</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a63a5970e6a03e2061c0c382e2c41d392</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a1dbb398df5f8bfdcb46633212778d776</anchor>
      <arglist>(sc_event_and_list &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_and_list &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>ad6829107a8bb45430e59db3e38a4265e</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_and_list &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a8acbcd657d9dc75b163f0cd3d369e059</anchor>
      <arglist>(const sc_event_and_list &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_expr&lt; sc_event_and_list &gt;</type>
      <name>operator&amp;</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>af0dc2572c7f476d5e3c6e9872c0b96e6</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_expr&lt; sc_event_and_list &gt;</type>
      <name>operator&amp;</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>aa0d9ea1eb232f9994403cd5646606733</anchor>
      <arglist>(const sc_event_and_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_event_and_list</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>ac33d2781821eb821b1e3f1f8f8f2a28b</anchor>
      <arglist>(bool auto_delete_)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event_expr&lt; sc_event_and_list &gt;</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>ae2d7bdff66511cf7b23407c3221e0c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_expr</name>
    <filename>a02037.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>sc_event_expr</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>a98680d4dab778f4226b729071d9e2ea8</anchor>
      <arglist>(sc_event_expr const &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>T const &amp;</type>
      <name>release</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>a5b616de04351fc4d18b259ec3d5270a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>ad443b7d77145485b27b15c15f3efbc40</anchor>
      <arglist>(sc_event const &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>a5526f971d236ef1523280edb09f394c9</anchor>
      <arglist>(type const &amp;el) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T const &amp;</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>a3c9a73248ddf1774923c65eb20ff8802</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_event_expr</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>a120c31857c971e0b50790499e65843bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event_and_list</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>ae60a98a3f4332c8a15e0b5e29cc19fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event_or_list</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>aef3bab374e5a04c6dd9a0149b2689790</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_finder</name>
    <filename>a01285.html</filename>
    <member kind="function">
      <type>const sc_port_base &amp;</type>
      <name>port</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a85b2e3e20e5c3d85960f276f31e4b108</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_event_finder</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a1b0be672426c5dd72a25abf5b1e73353</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>find_event</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>aa4a06724ecbecbda4c279df9c4d353b1</anchor>
      <arglist>(sc_interface *if_p=0) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_event_finder &amp;</type>
      <name>cached_create</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>aa3b2ccba4b58e987cc1bad233c0e6fa4</anchor>
      <arglist>(sc_event_finder *&amp;cache_p, const sc_port_base &amp;port_, const sc_event &amp;(IF::*ef_p)() const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_event_finder</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>ae252de9e64773986ffe233283cc683d3</anchor>
      <arglist>(const sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_error</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a7f96310b34d2f46dcf04a495dfb7fa33</anchor>
      <arglist>(const char *id, const char *add_msg=0) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_finder_t</name>
    <filename>a01289.html</filename>
    <templarg>class IF</templarg>
    <base>sc_core::sc_event_finder</base>
    <member kind="function">
      <type></type>
      <name>sc_event_finder_t</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a30b484cea21436b8d570d4271e3a2da8</anchor>
      <arglist>(const sc_port_base &amp;port_, const sc_event &amp;(IF::*event_method_)() const)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_event_finder_t</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a3d1b9f905249c0af1a757f8c450ee804</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>find_event</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a97c068ab88d3ef785c2d66313cd50f3a</anchor>
      <arglist>(sc_interface *if_p=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_list</name>
    <filename>a02041.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_event_list</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a4b85ae78a70539de4705882fff0754ca</anchor>
      <arglist>(const sc_event_list &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_list &amp;</type>
      <name>operator=</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a60ba4455f5d215864c43215cc3a68023</anchor>
      <arglist>(const sc_event_list &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a9aabe143f06876fe5720c9f891444f2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a4f0521749ed4391033c589b01d2ed043</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a08adb6f7aef0da31d04995a227cf926d</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a8493116dd89f61634c4b0bcd53a3193a</anchor>
      <arglist>(const sc_event_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_event_list</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>aea45b4a75b634c572a81e4f7cd4a76ee</anchor>
      <arglist>(bool and_list_, bool auto_delete_=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_event_list</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a50264f06db1f237446c1586b85dd783f</anchor>
      <arglist>(const sc_event &amp;, bool and_list_, bool auto_delete_=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~sc_event_list</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a3c7212451393069b0309eba2cc834287</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>af74030ede9ac20e15a43757d59ef111f</anchor>
      <arglist>(sc_event_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>move_from</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a62d7d237170de2f25600162c84e1fc6c</anchor>
      <arglist>(const sc_event_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>and_list</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a25032d0979a2c74d173f6b65f03cdbd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_dynamic</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>aa188bbb72300fb2ed33a08d15bfba8a8</anchor>
      <arglist>(sc_method_handle) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_dynamic</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a12ff5c5be6aa895102b563c776f4cc49</anchor>
      <arglist>(sc_thread_handle) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_dynamic</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a51f5b67af79e943c6a98bf924f9c0d28</anchor>
      <arglist>(sc_method_handle, const sc_event *) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_dynamic</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a3c609aafe27d45b85b7b9bd77d86377f</anchor>
      <arglist>(sc_thread_handle, const sc_event *) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>busy</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a5187d05d1bd83bc03ca2c4a1773dcb65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>temporary</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a0ab0d52bc62f199fd8e5d223f32f922f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>auto_delete</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a4c0ed470b737dfecc5a449977f26a24c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_premature_destruction</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a8bd049bcc97670f7fb629313df5e1f13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_invalid_modification</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a3eaca189dc04ebfc22acb774f6cb46ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a285a9415d730026b6e9477982147ba11</anchor>
      <arglist>(void *arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_or_list</name>
    <filename>a02049.html</filename>
    <base>sc_core::sc_event_list</base>
    <member kind="function">
      <type></type>
      <name>sc_event_or_list</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>a20df40500a6a227452268bde3874fa11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_event_or_list</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>a55644632b8c10cdeedfa6fa56b727466</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>afd74eaac8a1736743db350027c6ed1ef</anchor>
      <arglist>(sc_event_or_list &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_or_list &amp;</type>
      <name>operator|=</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>a4b834cfd1de2fcc155ac646c4284c05c</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_or_list &amp;</type>
      <name>operator|=</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>ab6ce5395c77f3adf48881fd7f350a08a</anchor>
      <arglist>(const sc_event_or_list &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_expr&lt; sc_event_or_list &gt;</type>
      <name>operator|</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>a3825decba60a491497a53cb8da45de00</anchor>
      <arglist>(const sc_event &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_expr&lt; sc_event_or_list &gt;</type>
      <name>operator|</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>a993ab2c5a4c47c53da9c23a89dcedec0</anchor>
      <arglist>(const sc_event_or_list &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_event_or_list</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>a560d6635c6d72d41fa6076d8caf57d37</anchor>
      <arglist>(bool auto_delete_)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event_expr&lt; sc_event_or_list &gt;</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>a1652335c48aa3d9bb9865ad84c239ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_queue</name>
    <filename>a01297.html</filename>
    <base>sc_core::sc_event_queue_if</base>
    <base>sc_core::sc_module</base>
    <member kind="function">
      <type></type>
      <name>sc_event_queue</name>
      <anchorfile>a01297.html</anchorfile>
      <anchor>a4fb5fabd0d5f3e35ca1545e484328028</anchor>
      <arglist>(sc_module_name name_=sc_gen_unique_name(&quot;event_queue&quot;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_event_queue</name>
      <anchorfile>a01297.html</anchorfile>
      <anchor>a54889c12eb3a8a8a181ab2517dbc91d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01297.html</anchorfile>
      <anchor>a145e82fdd2a2d223a059f3b13a97de2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>a01297.html</anchorfile>
      <anchor>a60a6059cca4c59553e6d6bc8959af352</anchor>
      <arglist>(double when, sc_time_unit base)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>a01297.html</anchorfile>
      <anchor>af5e8bf4c6d638281e9a93983e0be89b3</anchor>
      <arglist>(const sc_time &amp;when)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancel_all</name>
      <anchorfile>a01297.html</anchorfile>
      <anchor>ae10cf8669f67729f0140ccdccf1c2727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01297.html</anchorfile>
      <anchor>a86321d0a2be19b6e3cc073ac7ad2d491</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_queue_if</name>
    <filename>a01293.html</filename>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>a01293.html</anchorfile>
      <anchor>a03dc358592604074f721366446ecc855</anchor>
      <arglist>(double when, sc_time_unit base)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>notify</name>
      <anchorfile>a01293.html</anchorfile>
      <anchor>a2aece403b7f48616bd83a7284a1e2625</anchor>
      <arglist>(const sc_time &amp;when)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>cancel_all</name>
      <anchorfile>a01293.html</anchorfile>
      <anchor>a9cb65f3c2d1c5d3a9d434977e24ac3ed</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_event_timed</name>
    <filename>a02061.html</filename>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API int</type>
      <name>sc_notify_time_compare</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a60f202be03bc33c957cb6e66439f5264</anchor>
      <arglist>(const void *, const void *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_export</name>
    <filename>a01305.html</filename>
    <templarg>class IF</templarg>
    <base>sc_core::sc_export_base</base>
    <member kind="function">
      <type></type>
      <name>sc_export</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>aa41b4a1df46c1cc9b74f9c3018318415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_export</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a2831c0cb6069024a5500a25ec1514418</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_export</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a63483861c87ff3fe49106824f2a8fee0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>afc328e39f74fca5e041201bc2dfa9b8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a57a8145466101a5ddcac75d1acf1a358</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IF *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>aa2e86b364780b56adfcbbc6a06f1ccca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IF *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a8d1f32e2ae1260f0f36a08a718eec0a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator IF &amp;</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a7a22c804f62d67e2f53944f9d4ff5189</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const IF &amp;</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>ada0c6fd0df7c6e89b0e0b9a8b9dbe668</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>ae4db85e48f6bd936aaccd979e055a344</anchor>
      <arglist>(IF &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a198253c0eeb85675eac3f1a15c6ec350</anchor>
      <arglist>(IF &amp;interface_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a31472aab731d96b6432f1ae933d04d76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::type_index</type>
      <name>get_interface_type</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a24ae810bacd3712848130a6f6f50a307</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IF *</type>
      <name>m_interface_p</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>aed004d9d8cbf03597967ba2c82b6c53c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_export_base</name>
    <filename>a01301.html</filename>
    <base>sc_core::sc_object</base>
    <member kind="typedef">
      <type>sc_export_base</type>
      <name>this_type</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a5ba094ee0444d750cf7d43ea062d7f79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a1c45a3bf1a304a67d166289d10a4d976</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a67693624b86f53dc5b9ef84c5a262f9d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::type_index</type>
      <name>get_interface_type</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a8270228d136e596d33ef8f56dc2c3b19</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_export_base</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a26342cba4c8ed960d5128b665d2d67eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_export_base</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a9992fcb65213b89d57f44636d631399e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_export_base</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>acc4562aa67f0c73898d3d67e65d6f2f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>before_end_of_elaboration</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a4cdf8cc6350f8cb64090055d846b1e77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a6586ace71b9b56dd6c8cdc1ba61cc016</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>start_of_simulation</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>ac0771a7fd8f5cfd1d19bee7ce1bc3fa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_simulation</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a0fbb7a0a9680da4fb631603dc8bfdcc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_error</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a138d9f37a27630a6c6ead2e1ff7fbf6d</anchor>
      <arglist>(const char *id, const char *add_msg=0) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_export_registry</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>aabb8d669dee99758d8298f75012046f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_export_registry</name>
    <filename>a01309.html</filename>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a01309.html</anchorfile>
      <anchor>a6f6c7265f01cf20e672298db16dbfddd</anchor>
      <arglist>(sc_export_base *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a01309.html</anchorfile>
      <anchor>afdb257fe34583d660ad4b39c596b3a58</anchor>
      <arglist>(sc_export_base *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01309.html</anchorfile>
      <anchor>a83935092cdee535af279ad4a8e08e3db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01309.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo</name>
    <filename>a01313.html</filename>
    <templarg>class T</templarg>
    <base>sc_core::sc_fifo_in_if&lt; T &gt;</base>
    <base>sc_core::sc_fifo_out_if&lt; T &gt;</base>
    <base>sc_core::sc_prim_channel</base>
    <member kind="function">
      <type></type>
      <name>sc_fifo</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a573b51e2cc0f4070053f90fb17205db5</anchor>
      <arglist>(int size_=16)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>ab6b9e1b82fd097fc74acfab0bb9bfb50</anchor>
      <arglist>(const char *name_, int size_=16)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_fifo</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a2e8f5ee3cdbf76bbc16b262c2e455d6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>aed079a7e354aa665d5428df0c307188d</anchor>
      <arglist>(sc_port_base &amp;, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a89cf3e5b666c987dd5ae69e494b81e51</anchor>
      <arglist>(T &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual T</type>
      <name>read</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a089c414a397fc890345b336dcee94d5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>nb_read</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>ad61dd1c00aeef010b203b4e356d11fdc</anchor>
      <arglist>(T &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>num_available</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a15369b9b97fc131114f3a0bd97bed6f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>data_written_event</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a1fe5625db1a86a82664d8c3c0becdf54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a77683c8a029233f989ce0a1b54c9fb4d</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>nb_write</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a076ee56f2051dda1a06a9e2ca233b2c6</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>num_free</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a2a66be2f7e68d2acf17935194f7d1aa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>data_read_event</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a4264afadb26c4106e1e59e6142d8ea75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>ae36e923cc0b35ccbc9289ed2a12c6b54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fifo&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>aca64911dd55c6feb8bd3ec1915fb81e9</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a8d9042f97307b6d5529079778b4637db</anchor>
      <arglist>(sc_trace_file *tf) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>aad5ecf731692fe6083438a96e0a87727</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a6e92064ded9656e6f1cd7616d9e6b2ee</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a8ff2616014d2cb017d7e9a23e4b21064</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a962c6dfe184ba03f8a4709f18138a249</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a5b7e9abd2ba6a2dac8f18ca4bdc2926d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buf_init</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a5b82be9f9c4393826b72d5cae60723ed</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>buf_write</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a044add6ef151953d139a8a2e5cf44d99</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>buf_read</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a90787f959e4de92f986d970f31f5284a</anchor>
      <arglist>(T &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_size</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>ac61f9ab48efe954b13f3116a666e90ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>m_buf</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a6496ad4782868a29a4fc99264b5a0535</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_free</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a9719119de3b5e9bb11da1342e1467047</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_ri</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a3fff2b617ef091ffcb9723ac155acf95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_wi</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>ac4a68389cc640f8d84982f38f36d6652</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_port_base *</type>
      <name>m_reader</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a20c5c0cbd27673c0dead6364d297c51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_port_base *</type>
      <name>m_writer</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>ae551b0400de9fbc5a74a1be4e58e5ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_num_readable</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a6451daff16378f73f1d53536c77e545d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_num_read</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>af105dbfd7607ad1394b8810f67733a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_num_written</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a68fc1d70f737155ce42d860cc8eb307a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event</type>
      <name>m_data_read_event</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a78ddf7464d9c22db2ccb2f5e35895f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event</type>
      <name>m_data_written_event</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a7173020f45a15bcfc5e880eb5c836db1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo_blocking_in_if</name>
    <filename>a01321.html</filename>
    <templarg>class T</templarg>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a6489ea95fb7ff8758f43ff81255cb523</anchor>
      <arglist>(T &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>read</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a965f6c5fdb21eed811197ac03c114f07</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo_blocking_out_if</name>
    <filename>a01333.html</filename>
    <templarg>class T</templarg>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01333.html</anchorfile>
      <anchor>ab48c5085fd4e8c7ff9e79d868d5822a4</anchor>
      <arglist>(const T &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo_in</name>
    <filename>a01341.html</filename>
    <templarg>class T</templarg>
    <base>sc_core::sc_port&lt; sc_fifo_in_if&lt; T &gt;, 0, SC_ONE_OR_MORE_BOUND &gt;</base>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>a5484259f7f35f31f7680ece1fc5b4441</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_fifo_in_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>afc18067d30ab25f675d612a86ff89117</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 0, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>a9b753dc3527672a975a35fe32b015cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_fifo_in&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>af3cc5d3d2f018f4c5bcfd77e1cb195d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>a1eff36f1f5e1edeeeb12a855f14dff2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port_b&lt; in_if_type &gt;</type>
      <name>in_port_type</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>ab2738bbd3175b62743c8aae1fcebe4fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_in</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>a85a3c67327a11d58a04c632eb7beec80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_in</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>af8aede5bf2061c10bc5a6c42cfe1cb35</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_in</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>ab39d79b509b305aaa6f344735ec9007c</anchor>
      <arglist>(in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_in</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>a847c3f832ee87362e0056ebbc9fdec10</anchor>
      <arglist>(const char *name_, in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_in</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>aea6b2562fe4a4c4860b3b3cba2cdbd5f</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_in</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>a342d392f05052e36ff4234bfc5aa0f3a</anchor>
      <arglist>(const char *name_, in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_in</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>af0d462275f0127761458e042b8654de7</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_in</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>adbf2cdc839680388b97f205fcd69197a</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_fifo_in</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>a1eb9c6c0cacc75b417d2163203dc31ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>a00b95a1122330e1d7a4b4721144f9aac</anchor>
      <arglist>(data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>data_type</type>
      <name>read</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>aafff313f3e34167f4f2e3dd6412dccb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nb_read</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>ab69d513cc0d36439428f8c4a59f1f54d</anchor>
      <arglist>(data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_available</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>a71fdad887e7612abde0fab8d38b99153</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>data_written_event</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>aad8ed63e68f2553ab9eb734d84c9b98c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>data_written</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>a44643d62ab992238566eda66a5599bea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>ad7d47bc8bf61f372128074ef6c948f6a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo_in_if</name>
    <filename>a01325.html</filename>
    <templarg>class T</templarg>
    <base>sc_core::sc_fifo_nonblocking_in_if&lt; T &gt;</base>
    <base>sc_core::sc_fifo_blocking_in_if&lt; T &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>num_available</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a05317ddeb041fdc9a661419e79115b89</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fifo_in_if</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>ad21c1247d2567eaddf19ff2fad4667a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo_nonblocking_in_if</name>
    <filename>a01317.html</filename>
    <templarg>class T</templarg>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>nb_read</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>aeb218dfb77bf164535fbe0dad1426e4f</anchor>
      <arglist>(T &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>data_written_event</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a2ebee6d9075f35ad19d29b9a1901ee89</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo_nonblocking_out_if</name>
    <filename>a01329.html</filename>
    <templarg>class T</templarg>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>nb_write</name>
      <anchorfile>a01329.html</anchorfile>
      <anchor>a8ea063f2e700e60fb04913c004e465eb</anchor>
      <arglist>(const T &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>data_read_event</name>
      <anchorfile>a01329.html</anchorfile>
      <anchor>a42e4e2b49d8ff45ab365fce7d250779b</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo_out</name>
    <filename>a01345.html</filename>
    <templarg>class T</templarg>
    <base>sc_core::sc_port&lt; sc_fifo_out_if&lt; T &gt;, 0, SC_ONE_OR_MORE_BOUND &gt;</base>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>a15dab163417c3931a8b1381a5c6851e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_fifo_out_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>a818d69e8a123ef95a5bb1c22677aca71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 0, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>a296b41ffdb2997354d0480ada63b56ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_fifo_out&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>a7cb3d602f3451cda5f7d9106794deb55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>out_if_type</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>aff6982208e9559247a32e3f970c57969</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port_b&lt; out_if_type &gt;</type>
      <name>out_port_type</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>a86971646dda87316f686927bcb56c991</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_out</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>a625d73891f60d6e0ae776246058ac147</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_out</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>a54621fdeeb2787d898af62b2acc1ae7c</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_out</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>a4a6b71f605c7b10ae6285b9012795a28</anchor>
      <arglist>(out_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_out</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>a67f9ca0caf74d0820ee70ce9a2d9f9c2</anchor>
      <arglist>(const char *name_, out_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_out</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>a4752f7b417e02b43cb48f588ba83fe5c</anchor>
      <arglist>(out_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_out</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>a716a18ac25ebd21adbc8af6f8330403e</anchor>
      <arglist>(const char *name_, out_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_out</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>a43e19201be46ec08d0f5e14de2d112b1</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fifo_out</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>aaa500f98e068558eb2ede693d6d544ec</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_fifo_out</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>a2114c9ac6c318b5cdc2f745e9fd5eb3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>a2ce0835676ac1e23a3619e35f0165eb4</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nb_write</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>a662c217d4899de8be6d1a44cd2dc3174</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_free</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>ada1dd378afae2b3997f6bb98facacdeb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>data_read_event</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>afb295c82f3bd4744392a2cc4f67eb2e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>data_read</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>af3a82265bc1e04fb6f6626213df17449</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>ae4a2deddf3976d935f57e5bab4ff8bcb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_fifo_out_if</name>
    <filename>a01337.html</filename>
    <templarg>class T</templarg>
    <base>sc_core::sc_fifo_nonblocking_out_if&lt; T &gt;</base>
    <base>sc_core::sc_fifo_blocking_out_if&lt; T &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>num_free</name>
      <anchorfile>a01337.html</anchorfile>
      <anchor>accee55814312a2e29f9a8b61b5242eec</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fifo_out_if</name>
      <anchorfile>a01337.html</anchorfile>
      <anchor>a7463727e52bd66ae075795bc82755bc0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fix</name>
    <filename>a01689.html</filename>
    <base>sc_dt::sc_fxnum</base>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>afe27017f13e8bc054258350525baa821</anchor>
      <arglist>(sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>aaec5354bba0a21a3cd9eff59b074891f</anchor>
      <arglist>(int, int, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>af942f88bf63d68c1ba6321bb911c5613</anchor>
      <arglist>(sc_q_mode, sc_o_mode, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a319ba164288d96f27413382c363de49f</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>ad3492206ebeb2a85fb704a197a75047c</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a5e7471767e62b8220630e5333f651e0e</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a582d5f119a43caaca969e87c05a0a3ff</anchor>
      <arglist>(const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>abc51bfc9d56edea08f0be6ed558852c7</anchor>
      <arglist>(int, int, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>afb160910dcf5539b71d0980ca55c9eb6</anchor>
      <arglist>(sc_q_mode, sc_o_mode, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a7c67a11a0a871abf0da3b135342b4e29</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add7221138c641b7e527be57805f7a805</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a62cd76b34db44930b2ed1b0267f9c669</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>aa016fad2c8f9cb92e779b90b56db180d</anchor>
      <arglist>(const sc_fxtype_params &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a3f73eae27ce6f4486af5168b14aed15e</anchor>
      <arglist>(const sc_fxtype_params &amp;, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a39593f2a1a7ff1f4eba6139ce7c2cebe</anchor>
      <arglist>(const sc_fix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_fix</type>
      <name>operator~</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a7124f2b7e56ff38b76519fbd309bc1c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a853434db4aa6e60ce573fa77454e20c1</anchor>
      <arglist>(const sc_fix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator++</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>aa8a54d772842ca7f4981014d80f6c5a7</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator--</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a7be5064542b8bdd60c624bde14ddba11</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fix &amp;</type>
      <name>operator++</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>ae18ad590ea7092805514905c7e6e8641</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fix &amp;</type>
      <name>operator--</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>ac4736f8f57a2c71eab9b78713e01928c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_not</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a7d05a88f58c0e15479304d4ca7d52d93</anchor>
      <arglist>(sc_fix &amp;c, const sc_fix &amp;a)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fix</type>
      <name>operator&amp;</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>ad9dae6c69bc1025599fba0ace637ec79</anchor>
      <arglist>(const sc_fix &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fix</type>
      <name>operator&amp;</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>aca2406912983ef69bc20c39caddcd2c8</anchor>
      <arglist>(const sc_fix &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fix</type>
      <name>operator&amp;</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a928fb44d31bc8265e6b6f5178483adf8</anchor>
      <arglist>(const sc_fix_fast &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fix</type>
      <name>operator|</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a03af134a6012e4289b34b2a3be40477c</anchor>
      <arglist>(const sc_fix &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fix</type>
      <name>operator|</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a82248701a1c66458c90199984e6fffb5</anchor>
      <arglist>(const sc_fix &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fix</type>
      <name>operator|</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a764c16223b41c319088cdac954b40e11</anchor>
      <arglist>(const sc_fix_fast &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fix</type>
      <name>operator^</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>abc87b8129c494752a0759b7796b25a83</anchor>
      <arglist>(const sc_fix &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fix</type>
      <name>operator^</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>af303ba2d9f5af5c83d5022237f6e5f3d</anchor>
      <arglist>(const sc_fix &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fix</type>
      <name>operator^</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a5219581e42cbbfe6482b342a582f81b1</anchor>
      <arglist>(const sc_fix_fast &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_and</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a73a39b085494b377cbbe1d4ba3ae9f6e</anchor>
      <arglist>(sc_fix &amp;, const sc_fix &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_and</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a5d7710b1040f61edc3a9161e4b718da0</anchor>
      <arglist>(sc_fix &amp;, const sc_fix &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_and</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a696e602a76358082f322e8b3c66263e4</anchor>
      <arglist>(sc_fix &amp;, const sc_fix_fast &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_or</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a1bce95c6128687b15b1bf3ce93794de3</anchor>
      <arglist>(sc_fix &amp;, const sc_fix &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_or</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a5a787af6ee8ea0972d8ea189a2092977</anchor>
      <arglist>(sc_fix &amp;, const sc_fix &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_or</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>acbdb7193ae7daae79609bdade2060176</anchor>
      <arglist>(sc_fix &amp;, const sc_fix_fast &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_xor</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a2d7f8d4f887d8796af2b25769f96ecdd</anchor>
      <arglist>(sc_fix &amp;, const sc_fix &amp;, const sc_fix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_xor</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a89bbda76a7a1882b60bd92ae4243f73c</anchor>
      <arglist>(sc_fix &amp;, const sc_fix &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_xor</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>ab4a1fa90f4f8ea49c7223e1e3b9a4dc3</anchor>
      <arglist>(sc_fix &amp;, const sc_fix_fast &amp;, const sc_fix &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fix_fast</name>
    <filename>a01693.html</filename>
    <base>sc_dt::sc_fxnum_fast</base>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>abb338d0ed5917ceae3bd1f1f07257275</anchor>
      <arglist>(sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a941a083b34209f72f093e664f4d36a24</anchor>
      <arglist>(int, int, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>aff42edc7b056e8612a7cc8a385cde99c</anchor>
      <arglist>(sc_q_mode, sc_o_mode, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>acec6235fc6df31f31e7fa4eb9e7fcf5f</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>aebd0fad83d4d63183d6321bfd7157cde</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a22ac69f2bb2cdf71dc0f7f39ee80a278</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>aea14e08acdb4fc5f2c3d35eaade6b050</anchor>
      <arglist>(const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>aee8a5868479778c944fd73812da96b8b</anchor>
      <arglist>(int, int, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a009d0077c7d11d813eba5ae8bbaa43cb</anchor>
      <arglist>(sc_q_mode, sc_o_mode, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a902973e54ea482d67a4784aad131a50e</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a95cad534576469ef7a828f71ad4f9d78</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a8d07f61ee37378d23d24da35e201780b</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a495efa1cdab82adef37b78a9acc81b42</anchor>
      <arglist>(const sc_fxtype_params &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a51bb82895deec2a065be44d912bfd0f6</anchor>
      <arglist>(const sc_fxtype_params &amp;, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fix_fast</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>aa3c949227d01f24b1ca9a982589b67fc</anchor>
      <arglist>(const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_fix_fast</type>
      <name>operator~</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a8fc7ec8a9b2a548a14a63bebd72a6827</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fix_fast &amp;</type>
      <name>operator=</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>ae030e1cefdf9ff6640043b82da26033b</anchor>
      <arglist>(const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator++</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a261cbcd586c3982b3deadabb2e29852b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator--</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>afb190e1588b151c11884bb36cf987164</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fix_fast &amp;</type>
      <name>operator++</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>ac394836101b52942b6084c31d9a53526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fix_fast &amp;</type>
      <name>operator--</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a75ee6fb734a296a7ad424d2d071d7ae0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_not</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>ae9a2478dec6d9f519bff1be324c3a73d</anchor>
      <arglist>(sc_fix_fast &amp;c, const sc_fix_fast &amp;a)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fix_fast</type>
      <name>operator&amp;</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a43ee1cd9bac9a93e9786bebe2ea83de4</anchor>
      <arglist>(const sc_fix_fast &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fix_fast</type>
      <name>operator^</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a3c47dd1ef51763537bfabfb373e2fea4</anchor>
      <arglist>(const sc_fix_fast &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fix_fast</type>
      <name>operator|</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>ae37c6a6de6f3fed103fed1f701f744d9</anchor>
      <arglist>(const sc_fix_fast &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_and</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a8b35064c437e430e6fd88a77edaa7c0c</anchor>
      <arglist>(sc_fix_fast &amp;, const sc_fix_fast &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_or</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a53a4132e9c07b38b222f096444b31268</anchor>
      <arglist>(sc_fix_fast &amp;, const sc_fix_fast &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_xor</name>
      <anchorfile>a01693.html</anchorfile>
      <anchor>a8dc1d75a0ab0efb0eb0dc3a2dffededa</anchor>
      <arglist>(sc_fix_fast &amp;, const sc_fix_fast &amp;, const sc_fix_fast &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fixed</name>
    <filename>a01697.html</filename>
    <templarg>int W</templarg>
    <templarg>int I</templarg>
    <templarg>sc_q_mode Q</templarg>
    <templarg>sc_o_mode O</templarg>
    <templarg>int N</templarg>
    <base>sc_dt::sc_fix</base>
    <member kind="function">
      <type></type>
      <name>sc_fixed</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a5bfdf310e7cf1c3948591bff364e9c1d</anchor>
      <arglist>(sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fixed</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>adddc790deabee005c81a274ffba092f9</anchor>
      <arglist>(const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fixed</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a53e5397e8df1bc6e1f225cbd6ac41438</anchor>
      <arglist>(const sc_fixed&lt; W, I, Q, O, N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_fixed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a976646db4efc03a15dcd540694323787</anchor>
      <arglist>(const sc_fixed&lt; W, I, Q, O, N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator++</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>ae9f393f5ce7fca690252bd6ff8f4e8b9</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator--</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a05474b5f593d4c9f09b77807ca8f91fe</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fixed &amp;</type>
      <name>operator++</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>aaafbc0912cd487c3a6d5b7c2a882e8e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fixed &amp;</type>
      <name>operator--</name>
      <anchorfile>a01697.html</anchorfile>
      <anchor>a23a593fdccf0664e8807a1fe220382cc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fixed_fast</name>
    <filename>a01701.html</filename>
    <templarg>int W</templarg>
    <templarg>int I</templarg>
    <templarg>sc_q_mode Q</templarg>
    <templarg>sc_o_mode O</templarg>
    <templarg>int N</templarg>
    <base>sc_dt::sc_fix_fast</base>
    <member kind="function">
      <type></type>
      <name>sc_fixed_fast</name>
      <anchorfile>a01701.html</anchorfile>
      <anchor>a3d61df6423c9adbd1d591b6ef9ef8fb2</anchor>
      <arglist>(sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fixed_fast</name>
      <anchorfile>a01701.html</anchorfile>
      <anchor>a960c9d1665cc2406e2b2c752de22e460</anchor>
      <arglist>(const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fixed_fast</name>
      <anchorfile>a01701.html</anchorfile>
      <anchor>a62aafead12ce16bf031b3f346386ff46</anchor>
      <arglist>(const sc_fixed_fast&lt; W, I, Q, O, N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_fixed_fast &amp;</type>
      <name>operator=</name>
      <anchorfile>a01701.html</anchorfile>
      <anchor>a8027980b49cd66350dab05251aa90753</anchor>
      <arglist>(const sc_fixed_fast&lt; W, I, Q, O, N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator++</name>
      <anchorfile>a01701.html</anchorfile>
      <anchor>ab3ae86ec9a83be6c8a23d71925fc2154</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator--</name>
      <anchorfile>a01701.html</anchorfile>
      <anchor>a809b245405e1bc61642a3669d051d1b1</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fixed_fast &amp;</type>
      <name>operator++</name>
      <anchorfile>a01701.html</anchorfile>
      <anchor>ac89bd20d0249c39eee8c19609d999217</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fixed_fast &amp;</type>
      <name>operator--</name>
      <anchorfile>a01701.html</anchorfile>
      <anchor>a6840072252dbc4062292a239c8eff503</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxcast_switch</name>
    <filename>a01705.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_fxcast_switch</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>a3d86c4f1927b5f0c99cd98eb0f133bb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxcast_switch</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>aa5fa32ec7bdc8cc1a0e863b9cb5f88c9</anchor>
      <arglist>(sc_switch)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxcast_switch</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>a7a6527a264bcc525567296cec175fe43</anchor>
      <arglist>(const sc_fxcast_switch &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxcast_switch</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>a70bec551275bc87e0a424ef475366d9d</anchor>
      <arglist>(sc_without_context)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxcast_switch &amp;</type>
      <name>operator=</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>a800ff5dffb368dfaf75e532151e5164f</anchor>
      <arglist>(const sc_fxcast_switch &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>ae45e4b8d63653ec6f1c4b26eb4e75c64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>ab35811adff919f9b038f6fdb4fe79e19</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>ac5e5da31615d4dfd00a0731ac6f9d6f5</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>a15bb61922e5cfa738f1bb27e4d475658</anchor>
      <arglist>(const sc_fxcast_switch &amp;a, const sc_fxcast_switch &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>a34e4c3aa5398f8ce7dec479f7bef80ad</anchor>
      <arglist>(const sc_fxcast_switch &amp;a, const sc_fxcast_switch &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum</name>
    <filename>a01741.html</filename>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator-</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a119d22c1d7279f18e977f1955fc92d17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator+</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a852dae4b3f7d7e58b82039ebfeb0db69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator++</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a999db5678d1e8daabe6d41675d0d59de</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator--</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ab897605d02e664614427d3228080cf45</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum &amp;</type>
      <name>operator++</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ad6e8fb497ec3ccee2f72fcdb203cee49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum &amp;</type>
      <name>operator--</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>abe81d1cbe4a15e782204d3ae172d7563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_bitref_r</type>
      <name>operator[]</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ac88aaae06441542d8fd6c49fec316249</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_bitref</type>
      <name>operator[]</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a5c48dc83d1adea6dfe4cec2784518e72</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_bitref_r</type>
      <name>bit</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ad798d3a6ee1008f9eb2abc3fc166d3d1</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_bitref</type>
      <name>bit</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ab5e1b0b013a760dd1b28185e3cb65ac3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_subref_r</type>
      <name>operator()</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ae6763dcb51e2d1f71fd8e956b2480349</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_subref</type>
      <name>operator()</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ad57a69911f528bf372e56f72dd3375aa</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_subref_r</type>
      <name>range</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ab3387cb3f278138fe34462afda17fcff</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_subref</type>
      <name>range</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a5ab8c18d7f84783b82e60c9f8112bc36</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_subref_r</type>
      <name>operator()</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a9bf0c65f3efe30bd6bb71aaa669e2061</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_subref</type>
      <name>operator()</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a44aa26b4fcfb72b252a7a53effe822ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_subref_r</type>
      <name>range</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a9f13c612e8956f1acd95c9b9d097b883</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_subref</type>
      <name>range</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a7c20466605f0eabf9997515f87bc93dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a2a4be62000f817847eae22107c23c5a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>to_short</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a1175b1be2a9f0b4da450ab1653a0aa43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>to_ushort</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ab46dec1aec5a84551909514464ecfaac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>aab6fe4b91a8348b7a567a7b46a355543</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a7922b928d7834fa1d17b5e7f540e37f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ac33f3169169a80c07d77de5ded4fa53d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>aaa8dbdc352019428989541359eabf39c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ac1cc4bf8cd7ded853171d93689a3f901</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a0aadf7bcd1e71fde9524808f2f3e9193</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>to_float</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a24b366fe1976aca2e804b7671611e8e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>afd9eedc590cea32428b1b8a3fd09c1fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>afbb35a7291b4911b3592b910f102d1fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a916fcf061f94e77a52e0db1901e4e39e</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a13a6def2da2bca6a353a0380a9cb3f88</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a5da66e325505be12a40817f76e3d9bb4</anchor>
      <arglist>(sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a1a7482c3d5941e65e6f8cf3483e2a5de</anchor>
      <arglist>(sc_numrep, sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a9ced295d4dae62b6c567cada6a059d48</anchor>
      <arglist>(sc_numrep, bool, sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_dec</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a25143d22c7d9131509809524ca3eb8ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_bin</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>aed636ea7aeb34dbd65af88bba8889706</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_oct</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a4a6a942c03571faa6ce0a4f71b410d80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_hex</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a6de50be590a95d12eb553de2c43c40e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_neg</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a6ea755446b070670787bcf362e4cbfcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_zero</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a9cb78b6c77d06687271336f679ebcd47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_normal</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a27cfdf7316fea88405630e869ff08638</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>quantization_flag</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>aa1b561136a56d402baccf399ba771869</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overflow_flag</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>aa313d1a455f3f880eeb55bd00e4d9b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>value</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>aaec63138130cb52845e7ed78f16f86d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wl</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a8e39ca5b9dd133ff8a7cf3fbd8d2f9d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iwl</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a0ae6b0b32547ef132f1b038e1ca4860b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_q_mode</type>
      <name>q_mode</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a5caa8e1bcfec330a5d2b524588cf5953</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_o_mode</type>
      <name>o_mode</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a0b7b6adfcbab1eb50877cc9af0fca6d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>n_bits</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a5738827c9d7bc58e1463231fac781d9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxtype_params &amp;</type>
      <name>type_params</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a77740953456690f0257a95cc96170b34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxcast_switch &amp;</type>
      <name>cast_switch</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a032ae04c7bae2fdbe9ccd8ae975b6475</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a4197ee592d8fc7b31516d6c022f8cb05</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a764cb7274b3631369f324f597f87b1d3</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a20e72274e3dea64363ed0fd2ee002e38</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>observer_read</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a6f6c970eab34edc40ff3516f6c5267de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_bit</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a37d349a7389a3b9d86a84d6885004d8a</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxnum_observer *</type>
      <name>observer</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ac94b250cd4502164b1ebdf6510091122</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cast</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a7f3f75d2c0ea4cdfe1ae04608d378179</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fxnum</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a80cebbd9dbde2ce49e6a02f41d217fda</anchor>
      <arglist>(const sc_fxtype_params &amp;, sc_enc, const sc_fxcast_switch &amp;, sc_fxnum_observer *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~sc_fxnum</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ab8f4330028b81f002bad1e65186aa0db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const scfx_rep *</type>
      <name>get_rep</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ae900400b2cef5608cea1c1cca184f732</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>set_bit</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a9cceb9cd52a099048c389103940a22b1</anchor>
      <arglist>(int, bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>get_slice</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a2ca8a9b788ed8ff2803a620d1368c29c</anchor>
      <arglist>(int, int, sc_bv_base &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>set_slice</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a30cbbddfb6e510c2892ddcc7989ad02d</anchor>
      <arglist>(int, int, const sc_bv_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxnum_observer *</type>
      <name>lock_observer</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a5bb1dff04fac7c558f1c21412dbdce8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unlock_observer</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a21930cf328fcb86251ef6f05a5c32698</anchor>
      <arglist>(sc_fxnum_observer *) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxval</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>aa226f4d5df4d442309db0fa035fc3a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_bitref</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>afef0a296fa7b40d8cc74fb8f7d71a7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_bitref_r</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a0df93de2b3d7526922480cc03bd32485</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_subref</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a6760a445c89840c147443024e30d3fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_subref_r</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a904995e8a3a0e3bd57dda8454a43be70</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast_bitref</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ac6b6f99aa3af649b9ae2af28eca35778</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast_subref</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a2db24e1be095e524384e199c613c98e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::vcd_sc_fxnum_trace</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a6648156bc221a6edd9b20b87a592b07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::wif_sc_fxnum_trace</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a9d76b73168d8286ae803330a9103a0ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>neg</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a843212cfc95e555a6a652fc7ba8972bf</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxnum &amp;a)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>neg</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a955ed064874e433fd3691b50488d7da8</anchor>
      <arglist>(sc_fxnum &amp;c, const sc_fxnum &amp;a)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fxval</type>
      <name>operator/</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>afd3c678a6cf7114e692e8cbd82882e8d</anchor>
      <arglist>(const sc_fxnum &amp;a, const sc_fxnum &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fxval</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a35246187f5e67889c24c11c1440e30f6</anchor>
      <arglist>(const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fxval</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a8da40adf360ccf526b73ea421ab6b274</anchor>
      <arglist>(const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>lshift</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>afa5f8dc6d428c3a1b538799b2d7d81f2</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>rshift</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>aa60e21b959900cc0b305661604a35903</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>lshift</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ac64520a24428e55a9b9dfd86b0ca4ea7</anchor>
      <arglist>(sc_fxnum &amp;c, const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>rshift</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ad16c75f1fa4a71890d2a55d7ccc0e077</anchor>
      <arglist>(sc_fxnum &amp;c, const sc_fxnum &amp;a, int b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_bitref</name>
    <filename>a01713.html</filename>
    <base>sc_dt::sc_fxnum_bitref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_fxnum_bitref</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>ad5470deb5b6e8180b95f6a1157534a51</anchor>
      <arglist>(const sc_fxnum_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>a562f82e877db2032b863ef1a74a5f89d</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>a175b77a52e441fb471900cb24cbeca05</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_bitref_r</name>
    <filename>a01709.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_fxnum_bitref_r</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a156c624d2be993b44632833eff452b26</anchor>
      <arglist>(const sc_fxnum_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>af589d70a5bfa2d170ac3f6c6ca22ce7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a13d117568641a0cfee0088f060df0b83</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a81e1eb760e619567b2e54f9e7d34ab06</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a978962753acf79c6f77f95a7302356b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fxnum_bitref_r</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a3ff62cf3244ab98d2e7b36df5c7b89fb</anchor>
      <arglist>(sc_fxnum &amp;, int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_fxnum &amp;</type>
      <name>m_num</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>acc5b90e5f1c33aad87c4f019db25b118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_idx</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>ab0b113b91194d3fc93131979f555a5e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a175b77a52e441fb471900cb24cbeca05</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast_bitref</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>ac6b6f99aa3af649b9ae2af28eca35778</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_fast</name>
    <filename>a01745.html</filename>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator-</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a5a86c76928ea637e8c30bbef51c3bcba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator+</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a3f4476a7489717231430f52840cc3ea9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a50089a4a0f8a9d5427e2857b93ddfcca</anchor>
      <arglist>(/, int64) DECL_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>af5753d78776f9e446c9ee7791dd69006</anchor>
      <arglist>(/, const sc_int_base &amp;) DECL_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64 const sc_uint_base &amp;</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a00aad2a6185fdba54c83ebbc95e5048e</anchor>
      <arglist>(/, const sc_signed &amp;) friend sc_fxval_fast operator&lt;&lt;(const sc_fxnum_fast &amp;</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator++</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>accd61612b8e7a2dc9fd414530ca49ae8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator--</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ad174dc65eae85e5b16800b1cd0daf9a0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast &amp;</type>
      <name>operator++</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a220d384a122a2f0d8e3ab1ca72341a7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast &amp;</type>
      <name>operator--</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a02742888d13ef365bb8f2d9bfe00c63e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_bitref_r</type>
      <name>operator[]</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a9d250e051e3c4d353e736f102371c71f</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_bitref</type>
      <name>operator[]</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a90f508b9f9a3afac5be2d09f40b63dce</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_bitref_r</type>
      <name>bit</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a274c08a09d4501bc6e0cfad7f3d5ce8c</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_bitref</type>
      <name>bit</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a2ff90aa363d6272ac21c563fd01f55aa</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_subref_r</type>
      <name>operator()</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a851fbf97f3aff94974aeab47f6877d7a</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_subref</type>
      <name>operator()</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a6a348666efb60f22376070a9bbc764cf</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_subref_r</type>
      <name>range</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ad896e3e6fcb7fe5810d941330671995d</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_subref</type>
      <name>range</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>af2325be6b014f44ab57dc4df7e7db5ca</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_subref_r</type>
      <name>operator()</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a4bc18543eb8283687b98af4dd324dd18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_subref</type>
      <name>operator()</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>aaffb3d11a137f90b0b3b55bc878eceed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_subref_r</type>
      <name>range</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a092a551286669391a67d9c16cef813cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxnum_fast_subref</type>
      <name>range</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a55f5d517c991afa18ca0673ff3ae4a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>addbbc2b2809a24a4d9639bd449ba1c54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>to_short</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a70af36888b66a2f5cc837b9eb76197ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>to_ushort</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a4cfbf5aade252a8a6e6d6eeffa7202ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a63aed4ad478f842ff6d5abebd3587354</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>af535064e549f9b9003b2ccd04bdd1c4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ab012aaedb29f4260e29d03e7397704b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ae4fd312b83056657cd703fdacf3df7be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a80f1ec394804bf00f11c9f592b6e96c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a88ec15fe8d7c3c7f6d4fce8adb6d5d9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>to_float</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a90fe5b34562485c802363e8ba23d55ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a7538a32f831893d67cbcd6b61e27372c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a0c5b181fea4f366c145372def44ebaa1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a1f1de0b32494b0b3d5c99cdacb7ab53d</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a5e9da980ef6d7a842e221a8500b7beed</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ad80b88f930a85084eb478730dedbca9d</anchor>
      <arglist>(sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a00adf06e893f0b5cc88f310e6f514d1d</anchor>
      <arglist>(sc_numrep, sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>abaa0c44a8534e50ce62abc97eab489bf</anchor>
      <arglist>(sc_numrep, bool, sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_dec</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ae8b2eaeedc32b137c0a6fd754063d8a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_bin</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>aa3bffebef990831be7698cd5431c21a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_oct</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a82c0ad7c486f4a328dec7fe560c12b7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_hex</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ad7448fa43f6a6d6582753b92a8bdb81d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_neg</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a82878ac5200d638d06b47894c2ea6d74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_zero</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ad1e108437427d44ccd8506071eef710e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_normal</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a4d153a80f0e009b3802a44759251b383</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>quantization_flag</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a91be9bf06b4d7afbc5aa2c6a4a86f4ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overflow_flag</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>adba68630977fda4f3ef5fd4861425ec6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>value</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>af863824df04cf7206bfb145fef5ef1c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wl</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>acec265dca6c1162b680ecab6faae9ee1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iwl</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a6b0fa69337bc4adda30057a1f704b0cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_q_mode</type>
      <name>q_mode</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>adc2a4a4c8441c4342e94be950a4d5f43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_o_mode</type>
      <name>o_mode</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a18e544b37e0969edef56a8200f2e9209</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>n_bits</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a02a3ff6479f706cd17bf29b01e371b90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxtype_params &amp;</type>
      <name>type_params</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a3ef6ecfc3ce04a10c5643b4a452c404d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxcast_switch &amp;</type>
      <name>cast_switch</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a72b59c19425deb51c7e58f41bc4cab3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a7b8825c85f2bde267bb2e67c45c16894</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a87a4d6edd576f33e59dcca662a0d93da</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a7ac54553c3951416fe554562bf06de1f</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>observer_read</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a84e78544ad5006b9028541742ed3305e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_bit</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ad3ee1ea155ddff0649717f995c47e027</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="variable">
      <type>uint64 const sc_uint_base</type>
      <name>int</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a6ba00f6bc2610420dd7dd62f9305d758</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxnum_fast_observer *</type>
      <name>observer</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ae6c7341990f044d24a30a82cde68fa93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cast</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ab870bb7a5d30dddbd84e71628504f0e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fxnum_fast</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>abb5457fe982eafb08a64dff3f03ea05c</anchor>
      <arglist>(const sc_fxtype_params &amp;, sc_enc, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~sc_fxnum_fast</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a9a490c166edc4f06a3dcf104340147c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>get_val</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ad7cba01ffcd145b6648e322cee5e4985</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>set_bit</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ae37622dc64c967aba690a8a80f70e583</anchor>
      <arglist>(int, bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>get_slice</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ae167aeda3bb2effa13c4040b2413cc4f</anchor>
      <arglist>(int, int, sc_bv_base &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>set_slice</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a428faa342e4383300182d481907e2f50</anchor>
      <arglist>(int, int, const sc_bv_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxnum_fast_observer *</type>
      <name>lock_observer</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ada24cae7b489d145bb60d88fd57c06c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unlock_observer</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a18b9c1327fbbf0efc249fe05c0e24526</anchor>
      <arglist>(sc_fxnum_fast_observer *) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a83ad882b44bbbda39d64c4e9bcc7bad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_bitref</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>afef0a296fa7b40d8cc74fb8f7d71a7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_subref</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a6760a445c89840c147443024e30d3fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast_bitref</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ac6b6f99aa3af649b9ae2af28eca35778</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast_bitref_r</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a0cf039c4aeb9e85bfaeba8a95d6f2a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast_subref</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a2db24e1be095e524384e199c613c98e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast_subref_r</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a215c78c9d15e74b6d1d7ddbfd074e404</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::vcd_sc_fxnum_fast_trace</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a1c8062ea387f4453c126ae820eabdcf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::wif_sc_fxnum_fast_trace</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a16c91f0dfbcb5a4f95c4897070df317f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>neg</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a3e8b4b579b39edf6d8bf9bde9b00958e</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxnum_fast &amp;a)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>neg</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a5038c06904d93735568c483b883c6b32</anchor>
      <arglist>(sc_fxnum_fast &amp;c, const sc_fxnum_fast &amp;a)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fxval_fast</type>
      <name>operator/</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>af80297f88ab90e09d7481c82ead78e03</anchor>
      <arglist>(const sc_fxnum_fast &amp;a, const sc_fxnum_fast &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fxval_fast</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a7898978156e5c2870c9eb380a4097593</anchor>
      <arglist>(const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>lshift</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a0330795efbfcde9b4f3f74caacdc54c5</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>rshift</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>aed7779645cf617f74e4acea30da3a951</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>lshift</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a082ed8d89ebdd863958814e63606cd00</anchor>
      <arglist>(sc_fxnum_fast &amp;c, const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>rshift</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>a5f55d317656798e6c8cc3e667a71f5f8</anchor>
      <arglist>(sc_fxnum_fast &amp;c, const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_fast_bitref</name>
    <filename>a01721.html</filename>
    <base>sc_dt::sc_fxnum_fast_bitref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_fxnum_fast_bitref</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a5fa75d99f0c5d8d0e858f333857d2354</anchor>
      <arglist>(const sc_fxnum_fast_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a7366582842d87dbb4abbd256d577b480</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a8a50115edd38da41aa88b7d04413223d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_fast_bitref_r</name>
    <filename>a01717.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_fxnum_fast_bitref_r</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a407916399860eb5fbd41baa3a911ad9e</anchor>
      <arglist>(const sc_fxnum_fast_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a2230ffe80053a95d5b3d2a6a57fa6d90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a9962d1312ef33fcce836630ca8dc4b15</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a9a30d516b956592e3ee9c787371d48bf</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a7a426ad5b3d7dc1395fbc2e02117639b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fxnum_fast_bitref_r</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a792f5f3234a09df41c07de073da8c55c</anchor>
      <arglist>(sc_fxnum_fast &amp;, int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_fxnum_fast &amp;</type>
      <name>m_num</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a12190d4c1117a9025c43e39e313ac44f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_idx</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>af166b70af01c3c529ec3b8d82ab1e622</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a8a50115edd38da41aa88b7d04413223d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_bitref</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>afef0a296fa7b40d8cc74fb8f7d71a7c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_fast_observer</name>
    <filename>a01753.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>construct</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>a1902ac7463a5a9fe9e40b6335ee17f49</anchor>
      <arglist>(const sc_fxnum_fast &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destruct</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>ac2913d4703cd924ffff8ede50341e90f</anchor>
      <arglist>(const sc_fxnum_fast &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>ab2ebb8babe91ca4ae317de8c039143d2</anchor>
      <arglist>(const sc_fxnum_fast &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>ad7728d40241abcc769239ea8cbfc515d</anchor>
      <arglist>(const sc_fxnum_fast &amp;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static sc_fxnum_fast_observer *(*</type>
      <name>default_observer</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>af83968ade9bf698928c0c4cb251a25d8</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fxnum_fast_observer</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>a655a81a28d9ec5fb030c8a0d8dbb4cdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_fxnum_fast_observer</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>acbdc08c7cda7b70e99f33c1b077d2494</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_fast_subref</name>
    <filename>a01737.html</filename>
    <base>sc_dt::sc_fxnum_fast_subref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_fxnum_fast_subref</name>
      <anchorfile>a01737.html</anchorfile>
      <anchor>ad9023769569bb2b2cabfaa866f79d21f</anchor>
      <arglist>(const sc_fxnum_fast_subref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01737.html</anchorfile>
      <anchor>ac8c2b45226437088e05412f7924f8245</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast</name>
      <anchorfile>a01737.html</anchorfile>
      <anchor>a8a50115edd38da41aa88b7d04413223d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_subref</name>
      <anchorfile>a01737.html</anchorfile>
      <anchor>a6760a445c89840c147443024e30d3fdb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_fast_subref_r</name>
    <filename>a01733.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_fxnum_fast_subref_r</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a1cc564e8c35816bde5a0e54e068a24e8</anchor>
      <arglist>(const sc_fxnum_fast_subref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_fxnum_fast_subref_r</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>af43aebaa470c8ac4b438ed933920531e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ade1b7618a47d91322b6a041cca9dfb0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a745db034b27c2a7a755ff8da4ca8d539</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a68622e8e2c5a31c8bfc1c6027edd2f7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a8a24363573bf79ad81d836a9d8754fe2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aebe918492fc56dc6242b6a5f91977399</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aee28c607f42fbeb8fdc10cc56e2c3a50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ab5457a4d8973af095b72a56889a3455c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a6feb38c6c0716e5984482aa89c33e3f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>abfba6decf9a151b136ebfc960b443d91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a93e14fefd1ca19484d134d77ff48dccc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a701dfc89de3604497e6c5e19a11f6e7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a275fd19eeee28aa767a517807cf618b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ab41af33aa3bbe17908170d86dcc0602b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a9ab71264ae4fcd85b2cc6bcf56e834a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ab84ec5afed7d62f0ad5ad24173181bbe</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ae3f5de37c77824720ac2b0f93c56f62e</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_bv_base</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a9b660c2bc0f170960ca2fc0147214a91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>acd222d4371b5c1cf4b20109fd33895a0</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a19de6bab8589cae292ad7ff11c1b1258</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a881e5f1114b4b1d501e4e3097b27932c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fxnum_fast_subref_r</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ab91af719f0f02cc38cc15ead63070e74</anchor>
      <arglist>(sc_fxnum_fast &amp;, int, int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_fxnum_fast &amp;</type>
      <name>m_num</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ad258a7e837ca98d7ba8a586bdecd3f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_from</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ae7199425285a64bbfa4b05279cb55dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_to</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a4238268b65c5206a96fbf44ecd0ba52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_bv_base &amp;</type>
      <name>m_bv</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a367224fd3e157cb57212d1620fd59757</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a8a50115edd38da41aa88b7d04413223d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_observer</name>
    <filename>a01749.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>construct</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>a36795b23cb8bcd53ee9e2373f15a8743</anchor>
      <arglist>(const sc_fxnum &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destruct</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>aa1e3d8fb4762e09d4cc43d5dc8dfb741</anchor>
      <arglist>(const sc_fxnum &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>a1ad04c13f9cd6be73c84e8f75be72428</anchor>
      <arglist>(const sc_fxnum &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>a7106162c0e36e90ea85812a7f4d310e9</anchor>
      <arglist>(const sc_fxnum &amp;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static sc_fxnum_observer *(*</type>
      <name>default_observer</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>ad8e525e6b8573104584a7550d7b45f77</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fxnum_observer</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>a9ccceca80084a3f89d4653bfaa97342a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_fxnum_observer</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>a98ecfe926e3ac31afd338311187f0180</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_subref</name>
    <filename>a01729.html</filename>
    <base>sc_dt::sc_fxnum_subref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_fxnum_subref</name>
      <anchorfile>a01729.html</anchorfile>
      <anchor>aafcc6b22dc2068f42dbafa191891e1de</anchor>
      <arglist>(const sc_fxnum_subref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01729.html</anchorfile>
      <anchor>a9137d7c8fbfe5cb74c2684e15e186722</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum</name>
      <anchorfile>a01729.html</anchorfile>
      <anchor>a175b77a52e441fb471900cb24cbeca05</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast_subref</name>
      <anchorfile>a01729.html</anchorfile>
      <anchor>a2db24e1be095e524384e199c613c98e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxnum_subref_r</name>
    <filename>a01725.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_fxnum_subref_r</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a834787812c8233d6454e2fc2dab4e3a8</anchor>
      <arglist>(const sc_fxnum_subref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_fxnum_subref_r</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a8ccabb6ac5ee4ca004f35d77235ad9d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>ab1e97460c25621b6d8fc80891c0f503f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a11b9eee1d7bd2559e5fa80d44a1d4b22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a55d3d95504cde7b6e241b5620f71cfb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>ae1d36760cede14409e779de21b152228</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a1a71a9d95bfdaa06c3384048057dbd74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>aba364a8d3f3a23c7f043f66486eaa9d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a9ed84dc6b8a1035c54b49dd6e5b7dd1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>ae72805957df245a20b795e19d43fc6c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a5ee0ad382672622baa19ec044cf2ece7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>adf23109c4f51685dd7a35aa46f6c183a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a654b40c97ec20e8e6fcdeb97f89f2509</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>abdbaeae6de14c42df8a867d7c1d66bff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>aea96145928623e747cf7fe9d78d6b04e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a7bdade623ff7fdd661d012b126e90d65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a233fc83243b94aeb18233f9380de4873</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a5549f9c1d70e857fcd78a77a68bda340</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_bv_base</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>af916697d7e60b4e290d3631b3301e6d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>af4a7c4c0546836a3db330d9c4ed3faa0</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a4a0199606f1a816e894b3cfe07f10128</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>get</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>adcdbbf28da3e3c75daabb5308905f5ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fxnum_subref_r</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a654013beac743503684b29f72b2a2b7c</anchor>
      <arglist>(sc_fxnum &amp;, int, int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_fxnum &amp;</type>
      <name>m_num</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>aa63ace3501aa439e9c74b36cd3e3cb08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_from</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a74c60910c562e94811a3848ee93c5949</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_to</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>acc335c895597abb35339bd8eaf53292e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_bv_base &amp;</type>
      <name>m_bv</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a63f1284e5e50bee1ed62b23cd2bc5cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a175b77a52e441fb471900cb24cbeca05</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxtype_params</name>
    <filename>a01757.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_fxtype_params</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>af08b41ed30d4987c146dc93264101ec9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxtype_params</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a3408875cbf3d90b544b2f0167b5807e7</anchor>
      <arglist>(int, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxtype_params</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>ab568ebedb645acbf72842649b85a177c</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxtype_params</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a136013dcea8657f1da0603dd1ea851a4</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxtype_params</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a0f1e92f88990d5058b8f0a4db32a24c4</anchor>
      <arglist>(const sc_fxtype_params &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxtype_params</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>aff38067c1b1bfe3cd3121b4448b0e0cc</anchor>
      <arglist>(const sc_fxtype_params &amp;, int, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxtype_params</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a8772f183ab4ec0c0ae07b24f9934c122</anchor>
      <arglist>(const sc_fxtype_params &amp;, sc_q_mode, sc_o_mode, int=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxtype_params</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>ade285bf8c307132ed41d605e53d1013e</anchor>
      <arglist>(sc_without_context)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxtype_params &amp;</type>
      <name>operator=</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a8a2d371a4612c98bc5408f6483274cb5</anchor>
      <arglist>(const sc_fxtype_params &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wl</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a30d3eac0545ab1747785124743e6e02b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wl</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a5f24673bd45d4ec706db5a00713e0694</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iwl</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a643822a5021820a142c345993becaa67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iwl</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a128581243c6c850e969e4e17651dd542</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_q_mode</type>
      <name>q_mode</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>ad5ae0565d5263917c2c3b75fb2bdf2ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>q_mode</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a2afafae9a2487d0aaa574021685d5596</anchor>
      <arglist>(sc_q_mode)</arglist>
    </member>
    <member kind="function">
      <type>sc_o_mode</type>
      <name>o_mode</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>ac1f9a5e094667000a92d4604213ab1c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>o_mode</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a064cf62ac10120bcd975db7751d521d7</anchor>
      <arglist>(sc_o_mode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>n_bits</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>ac2c93583a1a6769030c3e067961f351f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>n_bits</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>acc6dbe6e5c714de9a0cc214b748b1f33</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a7cf03b49f03b8186727f72687f0ee854</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>aacdc4aebdd849c4a63825cfd7bc3eefb</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a30944f0434c1c2ccb4861898a8fe1706</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a46e87ba8a50bca5ac89ae8a94c1bb85c</anchor>
      <arglist>(const sc_fxtype_params &amp;a, const sc_fxtype_params &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a93af84256e19166d3ca545a6e02f1831</anchor>
      <arglist>(const sc_fxtype_params &amp;a, const sc_fxtype_params &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxval</name>
    <filename>a01761.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a364a764d967c1eeaad688e24444f0d2c</anchor>
      <arglist>(scfx_rep *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aa81f0bc4a94af29b70b31c5e760d12a9</anchor>
      <arglist>(sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>af15a13877991ea27db5b074b488df89a</anchor>
      <arglist>(int, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ae76074b58fab4f2220dbc3ee28a0a07d</anchor>
      <arglist>(unsigned int, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ab321c730ba1a96a1539be4f06072e5db</anchor>
      <arglist>(long, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ab23d89ccba4705c631246700a3cd98bc</anchor>
      <arglist>(unsigned long, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a264529b72549367808b96e315cccbabd</anchor>
      <arglist>(float, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aa5ae8b54fedeaecb1a698045c634deb3</anchor>
      <arglist>(double, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ae8fcab073e092beefbaf8997312eab0f</anchor>
      <arglist>(const char *, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a840532e6d092a9d749d2c13d3dadd4b0</anchor>
      <arglist>(const sc_fxval &amp;, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aff784cd0ecfb3c99f7d50048f409d7c0</anchor>
      <arglist>(const sc_fxval_fast &amp;, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a4e2e7c6e0a6c6e24a31ac995d6b17d86</anchor>
      <arglist>(const sc_fxnum &amp;, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a331fd704fa9611832f33c41a5940f6c0</anchor>
      <arglist>(const sc_fxnum_fast &amp;, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a998aa67e3b767c415123e94f135eae9f</anchor>
      <arglist>(int64, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ac9a067b3f8898ad768947c2cc6a9b20c</anchor>
      <arglist>(uint64, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a43b5227ac0de418d76bff1847ced4962</anchor>
      <arglist>(const sc_int_base &amp;, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aabdf557b18c3703dd612ebf1e00c1db8</anchor>
      <arglist>(const sc_uint_base &amp;, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a4a2a5ad336002a2cdce876ef8ee5ee92</anchor>
      <arglist>(const sc_signed &amp;, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ac8be37268b48e91292386853f12d0af1</anchor>
      <arglist>(const sc_unsigned &amp;, sc_fxval_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_fxval</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>afdeaaa10b229238c5622c7157185aab1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const scfx_rep *</type>
      <name>get_rep</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a23038c688924fd10f05967ac7a279147</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_rep</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a5a9fb64aa5ed1bded67162dbbfd1221c</anchor>
      <arglist>(scfx_rep *)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator-</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aa822d1c9e2ad6b4edf5ff9919c146a3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval &amp;</type>
      <name>operator+</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a6cbc04936eb6441729e26b66dc73f8f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ad065c784e2a32375a911c54fc3712f25</anchor>
      <arglist>(/, int64) DECL_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a7bbfa3c3c2512df4a1e849346d08ffcd</anchor>
      <arglist>(/, const sc_int_base &amp;) DECL_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64 const sc_uint_base &amp;</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a4df144a2a7ec9631560ef883ad7d2e68</anchor>
      <arglist>(/, const sc_signed &amp;) friend sc_fxval operator&lt;&lt;(const sc_fxval &amp;</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator++</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aaee7cb29138dc691205adf2eb438249d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator--</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a704b749e9e19a7ce186730492801a900</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval &amp;</type>
      <name>operator++</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a616b86ec0d92c687b1dc80d47c88e50e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval &amp;</type>
      <name>operator--</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a51db3e2b218415503d3e2cb2fcd20f2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a3631ef80cddb1581ea7544ec634103cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>to_short</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a80ded83476d7841b2c1ec18f4adff901</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>to_ushort</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>adf8e4c49d954867125122b1ca779419e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a3dce5489ea6b89a509669209c4ecde56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a753bbab0e8f8b2e9b7d5f7de49efb575</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a44da67efe651c09c5e78012f50b78fd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aa8edbf27fb4709b0a0c05a899a830f2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a411b18679a511431a0aa6b3f34fde3ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>adfba180eea780b4546057917c05887f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>to_float</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a9b40fbb53eb5bb8e28b6577b5951042b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a897fc856f32b89c7ee76b2a2d6211a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ab4aacc612fd43da417ed1f7e751be81e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aedad9066eb3b6f2148a0dc0a16a616c8</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a266dc54fab7fea899ee2fd71717af987</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ac45c9a70ef6269bd4db20771454abd76</anchor>
      <arglist>(sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a6801caa8e9e555277d983786803b95c1</anchor>
      <arglist>(sc_numrep, sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ae619786b20f72be0b421d93fdcb66d7c</anchor>
      <arglist>(sc_numrep, bool, sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_dec</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a01f21d1a5c2773369ca9655a3cccb393</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_bin</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a11ee7b32460e7b11c5c8780348f5ff9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_oct</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a2b56643a86db10f16b9639c0bb002b8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_hex</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a20c4435218b3ddef267f166215413def</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_neg</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a2c47f68eda2cdffda979ef2c91805519</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_zero</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a6794b51b2f3bbb196027a610b73bb4e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nan</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>adfa26cc0f37a390244a27116142c973b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inf</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>abaad14f84ac26e63c614ad6cc3a4f7c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_normal</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>add2af088315cf83cf970cc05d8c6adfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rounding_flag</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ad7f8915a0fd0c0add99e3836896d6df5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ad1c5cd49a10de06b9bf45025cf652da6</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a777282ca3b92992812129d69daa07955</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ae956fe577f254d017a10b51c3e62b7eb</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_bit</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a034c71fe8d4dff784b5604680e9bea34</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="variable">
      <type>uint64 const sc_uint_base</type>
      <name>int</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a1b84ceb62c04295021a93f305b339bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxval_observer *</type>
      <name>observer</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aca8c57ec0b2f9aacfb2954593888ec7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxval_observer *</type>
      <name>lock_observer</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ac3af72f5991f9a4aac506f599f7425b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unlock_observer</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a97e3aa355eb68f34d4a01f57ee9afd5b</anchor>
      <arglist>(sc_fxval_observer *) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>get_type</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>aef738dd6e88edea6ffdb9439547cf471</anchor>
      <arglist>(int &amp;, int &amp;, sc_enc &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxval</type>
      <name>quantization</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a347f58bb0802880460c02185936f7947</anchor>
      <arglist>(const scfx_params &amp;, bool &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxval</type>
      <name>overflow</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a95de01255de4175b78aa78b0c042e494</anchor>
      <arglist>(const scfx_params &amp;, bool &amp;) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a175b77a52e441fb471900cb24cbeca05</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>neg</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>ab24448b0cb3d8e70b7d2b76fef66804f</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxval &amp;a)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fxval</type>
      <name>operator/</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a768bce3b0a5d1f87bf64cbc50b37e90e</anchor>
      <arglist>(const sc_fxval &amp;a, const sc_fxval &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fxval</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a053a9e9ec1fdd703817baed6a8c49926</anchor>
      <arglist>(const sc_fxval &amp;a, int b)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>lshift</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a08801f466c47779da2cc7a52d0faad0a</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxval &amp;a, int b)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>rshift</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a89d6b1443247fa644805dcfd74ba8499</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxval &amp;a, int b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxval_fast</name>
    <filename>a01765.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ab1dc848294d053c9447ee7009e53d96f</anchor>
      <arglist>(sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a4edbefdbd0ae7ed75a49911ddd9aca6b</anchor>
      <arglist>(int, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ad81e7f04d5bfe34b0a98c2403881a8fa</anchor>
      <arglist>(unsigned int, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a0ec42a3a6dafafc72ca145c74352f08f</anchor>
      <arglist>(long, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>aa9bc5642fd52ae0cd1fe024a6cb1993a</anchor>
      <arglist>(unsigned long, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a5a91f67a49c904a49a19bc8e63a1d469</anchor>
      <arglist>(float, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ab06286f34f36537f0fccdc01b86802f9</anchor>
      <arglist>(double, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>af52d1daf2b2509f4257e49cd5554ae0a</anchor>
      <arglist>(const char *, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>afd8dad6d111ba9622389a67e49d20de7</anchor>
      <arglist>(const sc_fxval &amp;, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>aa3d0884637910e0b4d5ad6acaa42479e</anchor>
      <arglist>(const sc_fxval_fast &amp;, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>aa87c3cc9eace7509a8e54d40123fc5b2</anchor>
      <arglist>(const sc_fxnum &amp;, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ac751dc394a850859d326f3502faa134f</anchor>
      <arglist>(const sc_fxnum_fast &amp;, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a80fe33d25fe4764054acb02f2eb9b1e0</anchor>
      <arglist>(int64, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>aa2251e336b52fa1f8b4f4118c535cb49</anchor>
      <arglist>(uint64, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>adde3e2372edc0838a5a57a74e1dcf739</anchor>
      <arglist>(const sc_int_base &amp;, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a0bf6baeccf24862140a7eaa34079f834</anchor>
      <arglist>(const sc_uint_base &amp;, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a537104e6e0ed3e7840d5461828cf88e7</anchor>
      <arglist>(const sc_signed &amp;, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type>SCFX_EXPLICIT_OTHER_</type>
      <name>sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>add509a95087dcfafd61c3e66f4b86855</anchor>
      <arglist>(const sc_unsigned &amp;, sc_fxval_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_fxval_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>aea22210498f4a46165a037ab46ecf15d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_val</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a2585514841730818fc6368251a241904</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_val</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>aab91ea9dda6dcf2317bbdc08c4953202</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator-</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>aedf012fd7808c93bfa01c69a81686399</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxval_fast &amp;</type>
      <name>operator+</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>abb7f6de99ceca4978d7023b141bc5cc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ae6f7e3f4165a5ed49bb6d72a9c0e7a08</anchor>
      <arglist>(/, int64) DECL_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ab89f77b422383f6a86f35009b79b15ac</anchor>
      <arglist>(/, const sc_int_base &amp;) DECL_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64 const sc_uint_base &amp;</type>
      <name>DECL_BIN_OP_T</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a2ff629dbbf8b256865e1af19d8cccc7e</anchor>
      <arglist>(/, const sc_signed &amp;) friend sc_fxval_fast operator&lt;&lt;(const sc_fxval_fast &amp;</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator++</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a3bb4434f5cadd82597237aa317099293</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator--</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>aab3486b6688ac69de0b42fae398c1d29</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast &amp;</type>
      <name>operator++</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>af6e2fedada85ce2a461bc2f2fb57bb0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast &amp;</type>
      <name>operator--</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ae582236a6e39c37f481b7b915c19d252</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>af3878bbee5f3fbed17d88b691771f1da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>to_short</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>aab0b9a43e9b0795fe043196c827809fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>to_ushort</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a8aeedbcef6e2f81d9a412fcc2588541d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ae33b743490a4dc6028e2e96fab2be4f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>aec6436fccd3f3490a36c3464c70f1661</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a9c69796a06c0f464ea71fbe910341294</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a8eaee476456a0b337605f338dfe58adb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a1080b84279532dc6a7372bf97d50d7d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a3a9c00893deea5fc9e810b8ee7db870a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>to_float</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>aab2afcce94483823d956952916271e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a3ef67a58cd3db4e3bc09db77c82765e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a266ee12d34e691b2c3965922896ad1d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a0688585073022dc1cb2468cc99aabe7e</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a32e42913003d4a47153786a3d3c6f9b1</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a86fb8542ff8e31c1ab3b31898d542697</anchor>
      <arglist>(sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a0e54ad45ef8a898d00bb07d2597de3e2</anchor>
      <arglist>(sc_numrep, sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a155792f03164bc02ed5db2d24cd76365</anchor>
      <arglist>(sc_numrep, bool, sc_fmt) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_dec</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ac91d7d7124d98cd2991b74cea149d06c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_bin</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ab98a7d0b024cb6a7fbcad28a76c9785f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_oct</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a9d344ce63b369db6a7dc6bfe1d65cb17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_hex</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a45c7eeb11affa42e6555fdada744441b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_neg</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>afc5c60aece23b688051b17150c427b7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_zero</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a8cae94d162ea0bdc9a0fc54aa33ecb06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nan</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ad298259bb90c3f350879d37ce549ed25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inf</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ade50d90687315dd12fe16fe98aedc5bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_normal</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ad9a53b6e99a46be7f504be6b3c2311ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rounding_flag</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ad2e786b79b413b8d81b9b405e942b0a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a04ffcf16a58e78de035253f808b64e5b</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a857390092bb7b5ccf7b16d6c57964bf4</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a4211d86beaba3c6b2043ec79d5b4ff12</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_bit</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a7735f6dedaa51f065be08a880db88ee1</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="variable">
      <type>uint64 const sc_uint_base</type>
      <name>int</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>af6ae93eb1f2e9119299c35c87654cc91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxval_fast_observer *</type>
      <name>observer</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a6851e1537d706e558c4bcf9642e010d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_fxval_fast_observer *</type>
      <name>lock_observer</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a134bd0cc4ce9850589eb84046afcab89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unlock_observer</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>aa7417c28dce30adb834d5c7823b4d4f4</anchor>
      <arglist>(sc_fxval_fast_observer *) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static double</type>
      <name>from_string</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a2f7d472fb1b5202fd3916c0832ba3b6f</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_fxnum_fast</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a8a50115edd38da41aa88b7d04413223d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>neg</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ad4ba4f1535994a8771313ebb3c27b7fc</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxval_fast &amp;a)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fxval_fast</type>
      <name>operator/</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>abd0aa7325f5e094a21e4e2f855e1ae54</anchor>
      <arglist>(const sc_fxval_fast &amp;a, const sc_fxval_fast &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_fxval_fast</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a61d9a072c9b1f3ea6c638168f8be9689</anchor>
      <arglist>(const sc_fxval_fast &amp;a, int b)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>lshift</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>aca3284b5db3449fdb3a43f7e9a603881</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxval_fast &amp;a, int b)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>rshift</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a8a1b9690842790a17d161cf3414e4761</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxval_fast &amp;a, int b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxval_fast_observer</name>
    <filename>a01773.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>construct</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a44cb09c822b89ffc09dd677cc2e7ef5b</anchor>
      <arglist>(const sc_fxval_fast &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destruct</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a9091e4a20bbb437b556cc9ae1440da96</anchor>
      <arglist>(const sc_fxval_fast &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>ad8a06d5db39d2aa50cc1a4a6ac2270f5</anchor>
      <arglist>(const sc_fxval_fast &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a3cb2a11b9eccc525c11939ee1713b4f8</anchor>
      <arglist>(const sc_fxval_fast &amp;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static sc_fxval_fast_observer *(*</type>
      <name>default_observer</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>aba571a582b2e6258b796be0b00bab0eb</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fxval_fast_observer</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a38114cfb5d28a42c35ff36759f2e0558</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_fxval_fast_observer</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a61bea9bd1a6eb4e24782e66d7164037d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_fxval_observer</name>
    <filename>a01769.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>construct</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a265382958dc353b49a67a0391ab0bf1d</anchor>
      <arglist>(const sc_fxval &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destruct</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>ab78a899c7d051d2fa7ff0875de470c8c</anchor>
      <arglist>(const sc_fxval &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a80ca9e899307dd41b49df03d751dfe9d</anchor>
      <arglist>(const sc_fxval &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a5bd699d031b8d62d89bab40ce6f6dea7</anchor>
      <arglist>(const sc_fxval &amp;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static sc_fxval_observer *(*</type>
      <name>default_observer</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a00110c17381066c5547c09a2617ddf52</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_fxval_observer</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>aced84ca9e78854a9bff693219fcac94b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_fxval_observer</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a249f323a8b7e10ac46f490dcd0e52e2c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_generic_base</name>
    <filename>a02001.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>const T *</type>
      <name>operator-&gt;</name>
      <anchorfile>a02001.html</anchorfile>
      <anchor>a4790ec1d170c61401851840d06ef54cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>a02001.html</anchorfile>
      <anchor>aac34a5998368b4036fd5db30787b4dc8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_global</name>
    <filename>a01677.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>const T *&amp;</type>
      <name>value_ptr</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>a0c3bfad7bc72e27edf4cbf11a09ee882</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_global&lt; T &gt; *</type>
      <name>instance</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>a0b87db97d0256433d63032eba434567d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_halt</name>
    <filename>a02069.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_halt</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a3676e989189a2531590780d6ce830573</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_halt</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a5b1ae8b586143c213d8cc10d9cfd5e59</anchor>
      <arglist>(const sc_halt &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_hierarchy_scope</name>
    <filename>a02113.html</filename>
    <member kind="function">
      <type></type>
      <name>~sc_hierarchy_scope</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>a27afdcccbf6c2d8e6e41f6a62d4f152e</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_hierarchy_scope</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>abbf484f3b74dc7c6782a0bb9327f1130</anchor>
      <arglist>(sc_hierarchy_scope &amp;&amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_hierarchy_scope</type>
      <name>get_root</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>a683dd821623dce909fa23a51ef48e5b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>abe316699185dd3108ba952d356e513e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object_host</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>a6fbfadb40866e7c3c5edb329e1550078</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_host_mutex</name>
    <filename>a01349.html</filename>
    <base>sc_core::sc_mutex_if</base>
    <member kind="function">
      <type></type>
      <name>sc_host_mutex</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>aca4204890fe7f8f0943db5bfaa1e75c8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_host_mutex</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>a4d1ee58dd49b1a386d9f8aaec23f9518</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lock</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>af90a3ba3d548e09f8f88f5876dc56d99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>trylock</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>a06cb6aad185aef0e41f6ad7809dbb205</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unlock</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>ac38257ffd5ebb1281b3327af5e760f8c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_host_semaphore</name>
    <filename>a01353.html</filename>
    <base>sc_core::sc_semaphore_if</base>
    <member kind="function">
      <type></type>
      <name>sc_host_semaphore</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a718ae86558f81bd0461859d858de2775</anchor>
      <arglist>(int init=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_host_semaphore</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a861078e1be4a7445747609e1b9a77823</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a48f9f843d819efe8d7d5062d0265b2c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>trywait</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a7fe4c302f353b0d79493e2b2a62bdfb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>post</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a7d97da6d9df0435b0c3eede6313b40fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a5f8ad6f5bce4acebd98e08046525b6df</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_in</name>
    <filename>a01449.html</filename>
    <templarg>class T</templarg>
    <base>sc_core::sc_port&lt; sc_signal_in_if&lt; T &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</base>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a43bec094990bffb9f0a147f02833a1d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>aa50ab173b410d49aa9c8969a8412abf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>ad126bf2b040c3016347a58bc100a24a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>aecc2a8612b902fcb084b18fe51cefef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::port_type</type>
      <name>base_port_type</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>ab1924e163a3609e40e650dc651fdcc41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>ae1ffa18a9efc9aa12c0dbdb2f6195ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type</type>
      <name>in_port_type</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>ab3ed157363fc10f882076d31420988df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_inout_if&lt; data_type &gt;</type>
      <name>inout_if_type</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a99af5c9c8a29d4f077c68c6c1afb0336</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; inout_if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>inout_port_type</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>aebfb9bc8106a16f0e930e099a2d1ff1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>ad60611e8083b9e7bbbc491195f76a225</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a578f3a49ca2b9ae6ef2ae07d2ea5fd9d</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>aa0bb300cd867d66e84a8b7ffa92c1a6c</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>abc810eccac30a595d937efcfa997913d</anchor>
      <arglist>(const char *name_, const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>aa6d6065772766d00d40016377655df7c</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>ade5386707549a37d06f2a1aa8d24dda8</anchor>
      <arglist>(const char *name_, in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>af3442470c24fdd464322c26532605d6c</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a4f1b6a59f5bc73cf1dc84511c456013c</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a1a1998a78b4f7251a5c96dc6c1d5bbf8</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>aa7d23a2b92b2988ab8a139e467a3e944</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_in</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>aaf3621f0f8bf7c24d366f2fc6a71713f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>ad460c0f59aac94655ce1a48e0b306358</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>af5b4d60ab9298119e79c50f7986a0a45</anchor>
      <arglist>(in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>acdab4c2d2f650ce1a46677066a7e0a8a</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a61060ce8da7614eb5ff732b8f3da194b</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>abeb037b5ab0468c26c43359ef2739277</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a3702f648f7ddf07ef3f67009017481c8</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a780433ff487ba5fd948b93ebe6f20b41</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>aab9bf6c450ba9faae255a95234cb1453</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>aa8dc8129324356fdf8863263f09dea64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const data_type &amp;</type>
      <name>read</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a33cbfb4b0c7ddb09f85826d3d35c4c64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const data_type &amp;</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>af8c3af59622c6709a41b3f743e557045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>abe558331260610282223261f310ae81a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>value_changed</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>afcf9772428d1763b28720d03e0c3f91b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>af0a68f8f0a534dc7d6bdc411e8f86688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a5fe59a6e0443be6c63717ed30980a616</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a572b941f4819730952bfb3bcdc28f2f0</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace_internal</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a2cb8858929d6a0c09a8d2d79156ad141</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_traces</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a23e5fc7627572ab609514d8f76b31f3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a499f7e36a19f32d7a693224e075861fa</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a0ab18a8f1e133af4bf697d02ecb3ad36</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a910fada941bd374709744891200d9da4</anchor>
      <arglist>(base_port_type &amp;parent_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_trace_params_vec *</type>
      <name>m_traces</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>aefe2646c22795e2a87d3034c98317af4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_in&lt; bool &gt;</name>
    <filename>a01453.html</filename>
    <base>sc_core::sc_port&lt; sc_signal_in_if&lt; bool &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</base>
    <member kind="typedef">
      <type>bool</type>
      <name>data_type</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a779ccc4c492248f97d2d3b524cdefbf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a60c99e712549d5d2dee67a98bdec04f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>ab284a64c159216192ab56a4853e9b063</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a633cdceb1768e5c7a6c521b2762a7676</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::port_type</type>
      <name>base_port_type</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a9b1deb83d3abc745dff071d30bc200f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>ab65e03e1fed65e839f5bbb1f2414f27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type</type>
      <name>in_port_type</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a2cedc88d8de18c29a71613a5aef0bea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_inout_if&lt; data_type &gt;</type>
      <name>inout_if_type</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>ab87f728ffcba937e08ce3581b1e698ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; inout_if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>inout_port_type</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>ab6bf549e65c8dd075a14ccee25926c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>ad5d0070b60d3bc5106050ec71145bca9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a03bb9452423f204917db56ec2f7a22de</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a69dd652e968e745f3f65032da9b010ed</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a76098a34cde09ad4fb91777125799fba</anchor>
      <arglist>(const char *name_, const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>aff04d6badcb9a53fef34aaaa6a1fcaa5</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>aaae4dad194be15837f0d2b17eb03ec02</anchor>
      <arglist>(const char *name_, in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>ac5824d9a24fa5c652615f9110695ce00</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>afd30d7e3bf560de198a970add5e8208d</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>acadb5f6e907889a4b572db88417f23ce</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a7461c7b9c19d8f8a5e81c6f3ac98d74c</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_in</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>acb6bb62c3e02a8761682eae8048b1135</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>ac8548a8d0fbbcf1f05758f54282fe06c</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a3ebdf75bff5cfd693acac8bbc54d928d</anchor>
      <arglist>(in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>adfbdff6a95a84b60542c90150721f2e3</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>ad101fa6a502a1a560bcc8c464d6a4d8e</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a8eb5a5f96cc017ed860cde05c3b0fff1</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>ae36516b469bd7967215c93656e3a7ca0</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a325a1a5fc8a6960e21373a17fc87902b</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a064adc3a7b6eff3e058f04fc6795d3a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a7b9bb36dd825d0157af7688fc6e4fc30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a3d8a649e8f54dfde4460980ffa741e81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a928e557c46a5bd40ddbed9f403553fb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const data_type &amp;</type>
      <name>read</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>acdf5d46501992c4123972ff4b1b13929</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const data_type &amp;</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a3994d2e551c4515aa4cdad22f7966b0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>pos</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>acc52805844dcf67c32ec6002ef99506f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>neg</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>ada3b97ee30ff5e8afb0dc17fa0b844e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>ade25016e95a959c319d7ff3681804879</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>posedge</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>aede7f0baf106502b87af402bc8cb1c27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negedge</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a6517030ed88fecf5ae695bdfc0ee7357</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>value_changed</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a4d4d7007d3b35db2c75076f2a6e6447a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a42a375e15846ad8b83007761e2200738</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a476dc6fc712fe74801e5375ef42e0327</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>aa346d3498a102c565dd4531e3909362d</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace_internal</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a815a0567e944c5f20f814c4f7c0e3334</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_traces</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>af0000701f6b076473829d69db9f5ac72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a7a106184a4919e1d94c5b24a3efbcd28</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>ade5e5a017c4023f6b56e7ba0348e6b8a</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a54e4990f9dd4c7b616b7a58121a85292</anchor>
      <arglist>(base_port_type &amp;parent_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_trace_params_vec *</type>
      <name>m_traces</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>ab10523c862dcf640977909106413a2d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_in&lt; sc_dt::sc_logic &gt;</name>
    <filename>a01457.html</filename>
    <base>sc_core::sc_port&lt; sc_signal_in_if&lt; sc_dt::sc_logic &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</base>
    <member kind="typedef">
      <type>sc_dt::sc_logic</type>
      <name>data_type</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>aa100390904bc5849cecdc1a973e7205d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a5dfe58454ff6e04accd0d37c6b3abfeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a1c2cf63ed5a6f0275b1a18add1f5f193</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a88e70fda2aac99b27d0411dbe1ef2777</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::port_type</type>
      <name>base_port_type</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>af61ee570aa1b18118fa08059b4ca4ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a0ac49dc890b15529874388e9b2bf7466</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type</type>
      <name>in_port_type</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a2379330612b926c3d3d560081549a4e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_inout_if&lt; data_type &gt;</type>
      <name>inout_if_type</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>af23ffab10d0991d37dbba350ae7aff36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; inout_if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>inout_port_type</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a6ca7c8a87a6b3e30d46c46bd333e3fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a76add8e0c53c1b2850e3b9dcae1f32d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a158c2eb9d47d4c67b6f2e23fef487db7</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>aab67805abf12db452b77a3865caf3f92</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a592b5d45a7c956c0fcf5f37710017e0f</anchor>
      <arglist>(const char *name_, const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a491bee5e7bd91cf3889ef8e096c50213</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>aa717a68db7e7eb5448d3b428f0b00ad4</anchor>
      <arglist>(const char *name_, in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a48d5eea92a587dbb377bc49351c52fd1</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>ab7b8055753693b6450085883efe9e10a</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a9bf40fa42c56cb9bd6ac726fbc8458bf</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>aa83909d601b52b148b52ff63f0e46cdd</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_in</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>ad6fa82956df7da45191b58a1b8c8a21f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>ad1d0963407346483707e7c1f346c07f3</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a4d47f71b873402dc660361c1362adfcd</anchor>
      <arglist>(in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>ae9da73d0b3bd70db79dc6cf3ee31b086</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a1d2c1a1586c66c06c654e517dcd6a8ab</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a1a96bf92e3d6a7f3258bea8659521874</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>ac028784ad870fd8ee2615579221ec905</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a238a83bd1b14a1584e25089b43f5cc54</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a5eb8d484f41185f3bdb0f6d533d35072</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>acebb52376faea813871eb22329c87731</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a31234518e5b94ef6b120dcc0e4809cc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a9993b45b638dd46551f8ad4f66969b62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const data_type &amp;</type>
      <name>read</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a7207f9482308405eae79400362af1f47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const data_type &amp;</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a40813121a75599b42af0495a78d6ca7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>pos</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>ad1e9385f730dee00afea38df89bea260</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>neg</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>aef8d727aacf8d3fdbdd0c22fb59b6295</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a4be99ed96eecc1bc42cabd4c860219b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>posedge</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>af130fa508815e350321940fd4d5e1198</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negedge</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a2160bcb34878e5107a09a1a27c5065e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>value_changed</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a7def3e9228865f5092025db955d8b5ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>ac89c08346e59beb6d38092a4a1170e09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a77eea9a11536194ae33f2d456b969011</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a639a7823cae9968ba9e1581a7eb1c97e</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace_internal</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>ac4e8b3965e30f4ea687f19d80705ae11</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_traces</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>ab1938f733ad1df21fc5bf59cef19010a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a513dd64c5058493bf7440565dca06326</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a59b5cf9c6555c2429131ce4a4d035761</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>aa4aa2d505df3a968752196027d0b0b4f</anchor>
      <arglist>(base_port_type &amp;parent_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_trace_params_vec *</type>
      <name>m_traces</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a969d6d86e515c33caa4f57fac53015e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_in_resolved</name>
    <filename>a01481.html</filename>
    <base>sc_core::sc_in&lt; sc_dt::sc_logic &gt;</base>
    <member kind="typedef">
      <type>sc_dt::sc_logic</type>
      <name>data_type</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>a4bca9dd78c679b4de33140908dc2445c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in_resolved</type>
      <name>this_type</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>aefccc68ce3b2c226484d04295f9409dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; data_type &gt;</type>
      <name>base_type</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>aaefd85941ee0f805639252f640739d2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>af515d6b06807a068d463eed2d7b88d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_port_type</type>
      <name>in_port_type</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>a80f9898c58d53e0d15685e2afc30584f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_port_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>a76634ca40c60be8ea4617895b34fb758</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>a56f969309cab0e09e3602a7724b2fdfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>a4fe2bdaea7cfcd7256e47801db3a35ab</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>a3aa9ada006c9d84ad84ffaffd87cca8b</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>aef71b2a8fb107cee4c62401d0f2ebe19</anchor>
      <arglist>(const char *name_, const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>aaf23ae8b35edb3cf5d456cd5c3068b51</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>a17bbcf288d20ff79ab8588f404d7bc23</anchor>
      <arglist>(const char *name_, in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>ac41fd3c1c2ce12767f2db9bca85556c8</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>a0a729143d59cbb954a9b9e3f1c73728e</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>af46ad5c7a96cfa742eb71b8c2aa7e37a</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_resolved</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>aaa60d053b8d645b242e063bb1efc07bd</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_in_resolved</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>acf3afdb8fd98c4398377526cce9ccca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>a35c6b559acf18a6075bfd549cc57e2ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>a301e23d634baadd626f32224e71edcb6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_in_rv</name>
    <filename>a01501.html</filename>
    <templarg>int W</templarg>
    <base>sc_core::sc_in&lt; sc_dt::sc_lv&lt; W &gt; &gt;</base>
    <member kind="typedef">
      <type>sc_dt::sc_lv&lt; W &gt;</type>
      <name>data_type</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a8327b6437e2e8d6539a8561bc1680915</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in_rv&lt; W &gt;</type>
      <name>this_type</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a3fb6043737c05f1b896d077941a2b050</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; data_type &gt;</type>
      <name>base_type</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a3d6121ec9f5a48c4c1c8a79518752f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a0cd14aded1f32f6c645d12653c610f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_port_type</type>
      <name>in_port_type</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a8a65433454f158443c42376d5b87d763</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_port_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a2c7480fcb01b786619c1b8c56df132b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a68f38982f3ebe5b2adbdc0034359513c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>acd4a19b512d61ae8d6c6b49bf89c6dfb</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a80722db5a0f5998505033799d09c2c96</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a364976fb9abdd7118e5b0d7dbc234cec</anchor>
      <arglist>(const char *name_, const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>afda604c5fcf396f65633cc77bd9fe4a5</anchor>
      <arglist>(in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a058812f870e9a84f9b008274efe8e37c</anchor>
      <arglist>(const char *name_, in_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>ae36942d8c0c226fb18c73a706ab04991</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a9f78a7be3c87e3ac0370af3a267c1c31</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a79c91a73cca07172fa163b9abb9640d8</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_in_rv</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>ae84ef3d228fbbbd5739e5251b48dc4af</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_in_rv</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a0cdeae26b70a42e794480a9e0882db21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>aeb11ecd847a36a6440f7c167ef87dd21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>ad49c64c261b1572805f40ad766628ef9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_initializer_function</name>
    <filename>a02081.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_initializer_function</name>
      <anchorfile>a02081.html</anchorfile>
      <anchor>a56c7d3f78ec67d474f8d6887c613022d</anchor>
      <arglist>(F &amp;&amp;fn)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_inout</name>
    <filename>a01461.html</filename>
    <templarg>class T</templarg>
    <base>sc_core::sc_port&lt; sc_signal_inout_if&lt; T &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</base>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a76f3350869b075ba0df81f7013cd1152</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_inout_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a01270fc9abe6e113b329cea2e8142463</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a55232f47beb71c69e11f3b00e2b81ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>ad5f7bb5311637b90451c8bed0bf695c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; data_type &gt;</type>
      <name>in_if_type</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>afc7666e57d2d67ee62023a747caadad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; in_if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>in_port_type</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>ac336542a36cbe77e39fd20738de452a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a83d9b6b7b0f2f085a579fbcaa611023d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>aac90a3c83e2a4b5b55b34cc38e3d9c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>add366c71a2487fafa60e013f94b829dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>ae9b2ddb5e64ec32298523f05ec6263c3</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a76bfe52e95656115e8557385391ceac0</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>ad1246b2e1269491c486b6657c14c431d</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a346017d0e75d6bdde37a0a8d2e535528</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a81020f6111b90ad05f860ccec10420b8</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a57c030db19b5f602e856d330634b61cd</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a2dbb39d363b4c3c64df5ff53c6df2511</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_inout</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>acc6001948a9ac801ab8de6782e2fb33f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a6b6356ebee7b5a563e3a82f4921a08ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a23c579a12d1677c04e983332368958ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const data_type &amp;</type>
      <name>read</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a50cad6c4581e8e75b6342820a6a90b32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const data_type &amp;</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a1cb6d424e83dcd2c20f28b215bf2f517</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a563e89f53c203e168883f4a2241cbabb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a849b080b158a808fcf1d972ba7f71fd5</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>ad6553c217cbf9c432f990dd15e0251ed</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a2f679eac2e9f9e6ab1ce68051cf3470b</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a81627f63702afea34aae58313ea4936a</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a7f1a2ec22d3cd20a2a236c29497975ff</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>aadeb189e2c78cb1157606a4616c67642</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>af56223cb3e83c04f6984e92c7e735ee5</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a79e0e858aca1cf999bd83d250dfb9cda</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>aa33df1f4d84b077722d0ffa90d595b58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>value_changed</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a4d6243718756752483e29ac565547a6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a07de29402d2bf036b9aadb9c6e069720</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace_internal</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a3439f2cd7fecc28f9474e7679471668c</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a6896a4ac31260423f8370e0160962737</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_traces</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a1348a1352ec83f194794bba826b2c525</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>data_type *</type>
      <name>m_init_val</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a44f2904e3a268660aeea5786544ebefd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_trace_params_vec *</type>
      <name>m_traces</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a48904d7d287f15acf27c7eac5d9bbd8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_inout&lt; bool &gt;</name>
    <filename>a01465.html</filename>
    <base>sc_core::sc_port&lt; sc_signal_inout_if&lt; bool &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</base>
    <member kind="typedef">
      <type>bool</type>
      <name>data_type</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>aa9b99582cd4bfe03a9c49ef2a0234dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_inout_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a91e2f115d1fd29bc3a1526102e090f8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>adc17cc44a896f8b4dd3aff08163e5e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a02e901267a3208090cf163f94e3f0a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; data_type &gt;</type>
      <name>in_if_type</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a9591fd302e9dc9084c99dc8ccaa5162c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; in_if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>in_port_type</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a11c4aef1e05eaaf0ae3399ad909674ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a753baa2d6b5060ec272bc618b2cb1761</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a96a508f2973e24f19a4f01545f88679b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a254a331f4731c6161df057f552ad818e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a3aa4cea10e3dcecd2cc8a6630ec942a9</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a7f10025dff8a7e52b1f39fb444f9564e</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a35d1e3d7b2eaf5666c93a522e5dd9371</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a40f89f6124ebdbc8f533a71f87667f3e</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>ae29f29508d60137e7aac1ff29bf55470</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a14159a2db109f4e83433b56dac0f6171</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>ac3af69cad0b544117b992b22c2301320</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_inout</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a5116bf05738aea94ed853603961f207e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a72afc23054674432b2508c72a2d97292</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a328ad119575da3352cf8fce876255b0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a263c63d65e5681b3be9dbb0a32bec7ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a3b9385100cbf3150ab4f72e73fb3cc31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const data_type &amp;</type>
      <name>read</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>ac4db0e9d9b354bd28fa1a861d636ab0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const data_type &amp;</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>ab88ea6d98c2f4848580798fe8c017d3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>pos</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a838d768abeaee96ac666d7c2a2f78f3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>neg</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a4d12e061b013291f87addb15908ae01e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>aa4d1aa835e42cb0147a5a86f7db569cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>posedge</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>af0a350c9b64863648f91c1ae1b03c357</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negedge</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a442f611fa1f87cb7e7e46d52dc670911</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a1561003689d978a4e70c5d4f953177f8</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>abc18fc0efb4ae3cb6274bf69b3686124</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>abacbc422336dc6ec3fb53b8f4cb22bbe</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a4e9e5707ca6106b6c486e6629d056762</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a222a1a094befdb3692bbfa6e7a66a051</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>ae45f7e97b7cfd7e2e80b16488aa5b737</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>ad957e218bd48ab0f0f1d760c4cc9fa9a</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>aa6e1f3c74bd125eac6dd735543156f96</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>ad49b203b94359ac71e7aa8cab5fce0c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>value_changed</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a97e4738ba9918ef405b956b933fc0791</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>acc41ae9080cfe8b11940abdff22c706c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace_internal</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>afa247ef5d936d5f5b4ad8bf39931becd</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a780dbed75aaf5a5b2b63a12eb2c1dc43</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_traces</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>ac5f3be6a99ed166c7fff029a1a599b89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>data_type *</type>
      <name>m_init_val</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>ab4def99f709e7315083c81ae497e112f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_trace_params_vec *</type>
      <name>m_traces</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>af6c5a02e0603144fb7054789deb35a6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_inout&lt; sc_dt::sc_logic &gt;</name>
    <filename>a01469.html</filename>
    <base>sc_core::sc_port&lt; sc_signal_inout_if&lt; sc_dt::sc_logic &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</base>
    <member kind="typedef">
      <type>sc_dt::sc_logic</type>
      <name>data_type</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a0ca60b2cd502a97c363a1397a13062e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_inout_if&lt; data_type &gt;</type>
      <name>if_type</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a4d2d4210f0227ef0e06d631ae6592bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>base_type</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a691bd55697002857d80d657d64ce9d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a3f628d29975e7919456dcc609d7956ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; data_type &gt;</type>
      <name>in_if_type</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a75f3d135bf8331a43c5a59e78e374945</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; in_if_type, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>in_port_type</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>ad090e407d307e96231bb72d13d137a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a587965696dd86db5cae151b2af939ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a72095e2217d321a31b01405c022fc1eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a3d08ba03fbe491926b48e73d6eae2fe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a36e486f12b221229b2ec24fc6aa909c0</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>acc2dde598e79d65213097725091dc69f</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a376008a368eebcd2f04cc5e80df36abe</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a6e1b4fd944afda05bae54849b417b728</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>accefb60ef0a17a5ae90f22e7a2b0c0d3</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a07ba3e22e60a02cda90d17832a01c7bd</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>af16573f2a270337ecebbd3fe38dc2a99</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_inout</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a76e2ff3ae3f4756e4e5da7a43648cf1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a3aa8bfe4885b246e80c3a2e99cacbd6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a8040017bffd4ec02e40a64759c6f0ad7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>af89c8a38ffc943930ccc3bb51c9953d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>ad0666c4ae7068554a7a97de0cab50a50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const data_type &amp;</type>
      <name>read</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a48737b7deed325a0ba6e3114e3844b4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const data_type &amp;</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a357f8acb109529bcd5263e9af04b52d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>pos</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>ace71dd83a380dfc3810d1212329fb907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>neg</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a2c9af9e4bccba2499eb3e364db82d737</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a19dc3910eeb2988e8e6d0f1d3653990b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>posedge</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a62bbe5b49cbca0d4d8e487e81f90193e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negedge</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a8fc59030909bfc8028031ef27928a8fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a4722bb728f5dd253da7a06cf2260f447</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a387b3d2af13f5de6be1fc7f0f188108b</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>af230a02cecbf4f1a4d4b767a87a4acfe</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a05189adecd5bcf97e61bdbb207ed9215</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a1957caa3590c95e0b538d2f69e146824</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a961052549607b6535418be7c2d4a8081</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a728be270ddb616be5e7bf71f54ca7aea</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a9ce9f33232e45ba995812402063e3b22</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a5df67f764af3effda458a95a91c6f128</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_event_finder &amp;</type>
      <name>value_changed</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a5eadf844cf73cc3b5562b651df8445e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a173921f3af8c367bd7874fedba480656</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace_internal</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a987d3df0d2715b8a497f704230871f84</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_trace</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>ac7c4fe7fad44127851bf5c690b226fbf</anchor>
      <arglist>(sc_trace_file *, const std::string &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_traces</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a06cc0f54b64cc364cdea91e26034ae41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>data_type *</type>
      <name>m_init_val</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a6568b850e2fc01f529ea8766f0f39ba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_trace_params_vec *</type>
      <name>m_traces</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>abdb0e87723de6f92d35b5c7380b2825d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_inout_resolved</name>
    <filename>a01485.html</filename>
    <base>sc_core::sc_inout&lt; sc_dt::sc_logic &gt;</base>
    <member kind="typedef">
      <type>sc_dt::sc_logic</type>
      <name>data_type</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a6e3b08049ab9c6e795aa25429f9c0baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout_resolved</type>
      <name>this_type</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ad68fadcfce909cf0fbff4badf044912c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; data_type &gt;</type>
      <name>base_type</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a6407ea383c6ecb66a4ee8d7cccbebf9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a9a1d47059a8c70af2763c0812978ff6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_port_type</type>
      <name>in_port_type</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a41c76c0bcc7059e9c34d15f6787196d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a16f3c108df97ae4e3f1b28c29e09da49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_port_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a14409c2d384a00017626b071923c8ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_resolved</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a160561e6b7996e217646755478b1055d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_resolved</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a058eba02605735e22137f0ec08738c70</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_resolved</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a51fc7f2fd0730d7b1aef458607561e53</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_resolved</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>aae0a30a0228d7338f792ae7568ac1593</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_resolved</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a754993965369912acce1fe3dfbf4241d</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_resolved</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ace917b10f9aa99816b2a7cfde11c6d8e</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_resolved</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>afc715f10abdee57eddaf506b159ae0ea</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_resolved</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ae37ed06cb50d83a164f9740f49a6b8d2</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_inout_resolved</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a832acde6a2a7851730a9f263f05615ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a3ac577ef8b16442eac2f2fc6854ba250</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a9287b5b8703e6ec108044eea8e708063</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a59638116368a3d585970d7163782733b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ad6553c217cbf9c432f990dd15e0251ed</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a2f679eac2e9f9e6ab1ce68051cf3470b</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a81627f63702afea34aae58313ea4936a</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a7f1a2ec22d3cd20a2a236c29497975ff</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>aadeb189e2c78cb1157606a4616c67642</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_inout_rv</name>
    <filename>a01505.html</filename>
    <templarg>int W</templarg>
    <base>sc_core::sc_inout&lt; sc_dt::sc_lv&lt; W &gt; &gt;</base>
    <member kind="typedef">
      <type>sc_dt::sc_lv&lt; W &gt;</type>
      <name>data_type</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a73239e232214b3ba4e513d18128a4ef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout_rv&lt; W &gt;</type>
      <name>this_type</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>aa46b7f4bdf4fe92eb5f627a4944e4c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; data_type &gt;</type>
      <name>base_type</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a336125736521ecf69f3d6e90d36fded9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a2ca2b18e9f44296f92e3129c3d3d97a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_port_type</type>
      <name>in_port_type</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>afe519b6553fa413d7aa080501286dbf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a22730c5a1d1b3d15ff198bb9a2729d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_port_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a2182e5f731e242fd7125a9e017d37ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_rv</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a668d0e22f892243e291a18dfb65b55d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_rv</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a14acc6511eeeca9b6e0b7d06ad7ae015</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_rv</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a9677f890a14e88cfa87a40686262bf4d</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_rv</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a4548ddd2102f5c73f1205be067506b87</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_rv</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>adf7ef1e8a5894ce52d78901481bbcc2f</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_rv</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>ae27699ab3604e35926591ce82e234fe9</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_rv</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a403a6a44205f83200186fefe577f3e17</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_inout_rv</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a9f4f3101583cb4f502525807431f9e17</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_inout_rv</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>aaf7b8ef0f7713d9be96146bbd1bd3871</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a6a638d77d8703cad21c31d7d7a82ed76</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a5db5ed88a7767c334fda09eb65095a80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a3ab67f8ad8ac0c66b11bda41affb56aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>ad6553c217cbf9c432f990dd15e0251ed</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a2f679eac2e9f9e6ab1ce68051cf3470b</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a81627f63702afea34aae58313ea4936a</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a7f1a2ec22d3cd20a2a236c29497975ff</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>aadeb189e2c78cb1157606a4616c67642</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_int</name>
    <filename>a01845.html</filename>
    <templarg>int W</templarg>
    <base>sc_dt::sc_int_base</base>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>ae33211545c794e3a45cbf36b1120c648</anchor>
      <arglist>(uint_type value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a6eb365ec761203b69dc89480059d0799</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>ad10791f98bb31ff83365651410c8b7cb</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a1c739b89783f29d51fe2aaa083849e04</anchor>
      <arglist>(const sc_int&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>aa6261a419a2d9a6fa9c39e2f8bf85d25</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>ab32ac8339129f23857c133855ee7bccc</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>ac4855c30771f76dc9bf8855369488cfe</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>aa5bab28604b35203854ed675a82332af</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>ade671674588e462bada82e5366f9930d</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>ae8d7e0050ac4eef49185f74e31e0b71c</anchor>
      <arglist>(const sc_bigint&lt; WO &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>aa1ef49bdf0440a831519776384f16a1c</anchor>
      <arglist>(const sc_biguint&lt; WO &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a2bd25df324daaa25606f2164d78d7bda</anchor>
      <arglist>(const sc_bv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a27cd32a8ed11793b1b6174b9487503bf</anchor>
      <arglist>(const sc_lv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a166e2013f2a1cc6f45aa48de366d3a41</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a677f63923c386164a51143cce313b17d</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>ab0ebbb30389ba379f1446996a9ff8cfb</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>af45082ee84a2ce5c563b9eefcc360c21</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a1b239ad7337f31472e148cc7d2ccad86</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>ab8e2c176ca5f1a3719b5fc6144dd457d</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>aecd9be0b5c0b6aabb70642d4fc9c1895</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a538188230809bdb4b9f74cf70c6b22c6</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a843c7cb9afbca6770ff4ba2edb31c526</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>ab8cba3ff1ca7b8ea71398c912fb75af3</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a8bb866222965c1720a261d208aa543dc</anchor>
      <arglist>(const sc_int&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a322f47aaf3351e04c74ec68918387b7d</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a3d1d234efb1a42203df6e3bd41682634</anchor>
      <arglist>(const sc_bigint&lt; W1 &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a6a2a78724c432c2ffc0a6d78eb2b281a</anchor>
      <arglist>(const sc_biguint&lt; W1 &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>ab8f9c32b52c6bef3caf9c3b7df5048f3</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a0871874bbe6dfa7dc9dab03eedc99b9b</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a3d323a086928253b5177c4f9a1707264</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a159e48c3ab67c0265235da50bf018cc0</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a88a051d088bb205bc7c0c7ebd4337e38</anchor>
      <arglist>(const sc_bv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a76c530e17195f356fafa4f76e0c9b759</anchor>
      <arglist>(const sc_lv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>abc5caad066b15ef9c2f9ea0c202c4fac</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a2996366f3e3300acb4153548ab7187dd</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a1b6821f3e8bce62951608ca609ec9fbf</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>ae07f070cd63150bf85e7f87304b362e2</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>abaee2ffff7fcf6b34eb1e86b4681e4e8</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a8129fbdc5b5c8793ba81df5891bf273d</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a6529a54c6feff76458853a51e8f432f5</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a88103a360b660bd509508ff6a60d350e</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>aa59410726f5c6d46a33a4f22a4feefa7</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>af67d9b27560af6fba6aa8d9aadb02aa1</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a705474a2acf7f12253c5e5a68dfaef47</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>af46fa21fff65fd5db1f8f8ae74bad093</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a4499c39257accadfed618b6ff290f57a</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a913833c643a93a3fa94815f55d1e58b0</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a7431e83e1c7de722507e873a289acdb4</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a4bbe93e7c32b1c83ce63c7508acf4640</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>af1fd61d441f8585f71e8211fb6098dc1</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a8d60b005dd679376af8796e95cfe86c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt;</type>
      <name>operator++</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a5a1e6353678681005d9c569280671ed4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a8413980a1ca268cb644bf51873d9a60c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_int&lt; W &gt;</type>
      <name>operator--</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>a813c01fb5f27286ca2c75a1a9383325d</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_int_base</name>
    <filename>a01865.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ac9e33469bd6e223c2e0b7af14a89fb5f</anchor>
      <arglist>(int w=sc_length_param().len())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a344d5808993f50b0fdbc4a992e7bc1ae</anchor>
      <arglist>(int_type v, int w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a398e45171516ec10a06759aa5b509608</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a007ec30c01b3421da06418b8fec1baf8</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>af0d3227864a7b152f39355c1c8562156</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a5a5e82c3e48f363bc3bff35abf8897d8</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a260699089ad9121743c6d4e542eab9e4</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>aec8f352178a6b33716d9d56e6c6685fa</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a4dd2f344b265aef73e12fdce73166f85</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a7fd95c0201ca0d47a0bfa11e8bee8c16</anchor>
      <arglist>(const sc_uint_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a29295edf8cd49c07fd03ba412a07b0a2</anchor>
      <arglist>(const sc_signed_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_int_base</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>aa5aa3cc34f166dd04f1a25cc8311e061</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_int_base</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a329db42c7c6ea1f261f1020a39a2e5f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a351d8eda116a268d7e30f75a5a467b1c</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a162aeb84e87d50c6b833708b87b4da5f</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ae68e58ba6d4c161e0ef34351810141f3</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a35b5ffbda3df4790bd7133ff60a12599</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a4019495f2f66031aa8f821d0390d406b</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a060333751c9ae9cf17725d09cd93d6ff</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a9d0af882bbd3c758082978107b80cb1b</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>aef363aefdaa14b1e60528072457ddac6</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a3a13a1b65065961d8534005e600b40c3</anchor>
      <arglist>(const sc_bv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a3f3b7b5fbfa0f3daae58b59dd97668eb</anchor>
      <arglist>(const sc_lv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ae4fc06bc47eb6cac422f822a2b2af502</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ac2f037ce364bce5b232cc73a319e6f54</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a73348a32f014b64f2dcfa52e4d91f330</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a3f2047a96ccd47c80aee1d1fa05cdf43</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a62dfaf3d0e849dd3fddc65b03a58bf17</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>aae06ffe92624cc7aa95c260339d6a3c7</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>afea84723817a293e75cb8c6d355a633f</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a00dd3c7f9ef716ea42e8911cc3d5c24e</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a552c64983b6972fdf8b907bff2c73c39</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ac00a3b58e7cfee1e4d61d8dfcd959465</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a7829a4679db4476fb08fb7cb48bc581d</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a9341dde86cdd563a9586370832197420</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>aa3e8a3487033d1879187fa1d267eb7c9</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a0e210f57d5cad1b1c9060995bd641d1f</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>acc443735ffe76b044514d68b26023fb3</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ab9f3d4e89f32db42ff37cf9bea488abb</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a46dccf89912bab882643615906cd06db</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator++</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a7b6c701957074ff4e9661fb7888e0de5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base</type>
      <name>operator++</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a9542c4460a0503b70930539d15c1283e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base &amp;</type>
      <name>operator--</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ae803faaf88f714011d74b32bb1a58c85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_int_base</type>
      <name>operator--</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ac720eb7d436e4b7f3719a09e7756aa1d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a6281d62eda2acd7d7909c3a502858876</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_int_bitref_r &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>aadf1dbfec66507d38c1ad0bfefe3d59f</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref &amp;</type>
      <name>bit</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a8bf268141be515346e2776245bc12b8e</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_int_bitref_r &amp;</type>
      <name>bit</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>abaaa2e555a75ce3ef3b2ac95187fc574</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref *</type>
      <name>temporary_bitref</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a65ffedef29ba55830c0e6496e577fe1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator()</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a3e73a0a4b9779f8351aba766341bc783</anchor>
      <arglist>(int left, int right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_int_subref_r &amp;</type>
      <name>operator()</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a6a423ecf00c9b373a8199e5ea4e7ad2f</anchor>
      <arglist>(int left, int right) const</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>range</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>af246c9eb52f73c4d0f5d6335ce0b194b</anchor>
      <arglist>(int left, int right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_int_subref_r &amp;</type>
      <name>range</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a08a8aa2a444461e6d05a8129987afd7e</anchor>
      <arglist>(int left, int right) const</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref *</type>
      <name>temporary_subref</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>aa509961812be0e0a6c4aeddf5ce6242f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a6b84690d94eee5a186c439c4c9fd7197</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a49afa1d416d160a0a6a6bf45cbca69e1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>af0ac775b3da1e640ede99a0276a8409c</anchor>
      <arglist>(int i, bool v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a4d8214b0661f5ff5fe15ce3493284afc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a775be88e50a3166c7e72bb7f618d3615</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ae05c0c8b6a8f0390e31f47ed198028f4</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a5134341f6bb90621357fa139249d4bbe</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a1a7ead80d31472d15038a50a1c4e9282</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a994bffc39472e47711980ab96371a06a</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a36afd20c048386d03121811accec88ef</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a698f1c923039a8ba9542fdef661679ae</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a401f08b4a82b9dc07ef9105bb6891f2a</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>adb16c926a4bbee5eaf257eadf31e75d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ad67856f307ed310c13fa44ce295aa367</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>afb8d7c99bd3b5cf0dcc42f8b49eaf831</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a7fd59eac154fa3d998298c4de30ce8e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>af161dee54019b8cfe889b1434671d534</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a98d8815c8d0d3b5faf2014af02bed43b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int_type</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a70d61a62b06ef36485d570f07703d0aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int_type</type>
      <name>value</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a5f6029d571c5806297d4547cfb9ac83f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>abe245d83fe7789f6290fc200c0597a5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ab2789d660b047bbc91450703ebd89dd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>acaca0604439db94e79f16f7132fc2ca7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a6dca0d75811e8f18d1caa0a5823a5c06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>aea0677f082ec34f850cae1398b6a3875</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a97e096aedd7690443ccfc1f33fe1ecc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a7ee0bb9bd5e41b5d7a64ecdcafe8fa28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>long_low</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a11ff75b32a076bbf65bc81ff1751b7e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>long_high</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ae3e71706529a964bbaf467a0290223d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>af67c7a40d1615e82bfc5e7a400d7dfbc</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a273618393c2e3d3a5dfe8488ce66e09d</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ab763a5c03abf6dcd1a1eeb101a31849b</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a6591d203159a4f9bb05b48cbc185de5b</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int_type</type>
      <name>m_val</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a69bda6fd2415d8170a90f97f423c7550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_len</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ab0a15890fec85bb8c9e6f064df9fe3f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_ulen</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a5e53a54a8f409334e867c0b301f4dea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_bitref_r</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a832e7fbbbae729414711e883b53b1115</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_bitref</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a666d28ff3be8bb80f1c482ba0e23c17a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_subref_r</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a0878e2ccfa0a95d732215055930407ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_subref</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ae8b3b888b1e0174b7e693cc90c248743</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a4f0f21228ac0906d02ce09b32eb3108b</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a6115840dac23c04506dad4efa517a21e</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a71fb05bdc51badad3a6a4ed30c93c2f2</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a8650b716b83e8b172b987ba2244d849a</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a30b7b76737c56192742b837b1a9795e7</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a91e8462d33833c1a815866aa4dabdc0e</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_int_bitref</name>
    <filename>a01853.html</filename>
    <base>sc_dt::sc_int_bitref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_int_bitref</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>add50cbecc97c418cc271bd227bd7769c</anchor>
      <arglist>(const sc_int_bitref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a3633e5b60dd2d4fcc8bde3feb6161caf</anchor>
      <arglist>(const sc_int_bitref_r &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a48d8d1f4c546e35c25856f2d7278dfc7</anchor>
      <arglist>(const sc_int_bitref &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a2c4d5ac304bc4a35813c67a7577b5ad8</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>abe2febc9c0cf816c4e83a7c456db58c8</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a9abd896537d13317a23733a0a85ed07c</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_bitref &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a288949cf4dbeda0c932e3dfda56c99aa</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ad30d4af9425d95eac4361e3b43e65ceb</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a6f66318507909ef4851b75d159319a02</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>af9167450244618b64e87a935ce4c3ae3</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a66e889fc92e5a9cd5d59f02721bfef40</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>aa1a9c72b5319de0325105f8b7a901ccf</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_base</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a1021395579853152106ea7ddd0051f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_int_bitref &gt;</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>a5a0ad9f96efffbf7d094b989b131bbf7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_int_bitref_r</name>
    <filename>a01849.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function">
      <type></type>
      <name>sc_int_bitref_r</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>a05667fe17ab8fb056bf9aaa9c8a91551</anchor>
      <arglist>(const sc_int_bitref_r &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_int_bitref_r</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>ad56aa3d3bb17412f1d4bb9ce0cd5258e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>a58aceb88aa7210a9be3de1aaac19907a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>af63ddb3ffbe3de70a1a56fb9304fc9c7</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>ae81c21d529fb7064d1dd103342401b10</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>aa70260f84495dfa2aa0eee6e638104b7</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>ac3d828422fe49cdf210bbfd46ba64330</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint64</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>ae7eec4ba99b07dbf74b6505628187524</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>ac6e99d7f4772c06c134b44e297c21687</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator~</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>a1ef2d368ced432068120a3a3ce9a2049</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>value</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>a90348a3b04aeb67a1003d61184fcae63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_bool</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>a8db131dd1b601b029f198058d758b78a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>ad3ec1e6b343df514fdde713fac5885f4</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_int_bitref_r</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>ab58ee53dccf8e989b78d116be4b64b18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>ab4a8fbb77a05225f241a0bbaf8823f2f</anchor>
      <arglist>(const sc_int_base *obj_p, int index_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_index</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>a0e456cfac2084a2e10de1abe769c3cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_int_base *</type>
      <name>m_obj_p</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>a0f3ada702d03ff5579d686600aa55ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_base</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>a1021395579853152106ea7ddd0051f7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_int_subref</name>
    <filename>a01861.html</filename>
    <base>sc_dt::sc_int_subref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_int_subref</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>a7b221597d8d4ed820ee65bb0f383d064</anchor>
      <arglist>(const sc_int_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>a91b95e2c348f8c4251b517a0b01d091c</anchor>
      <arglist>(int_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>a784f19769071da07e06e0a3f08ad05eb</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>a98383943f30010e0a7c264fd74dccca2</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>a131c52d9f50c17c8a59d5a20932cd92f</anchor>
      <arglist>(const sc_int_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>a545976568e8a3c00b7978022440f1f2f</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>ac1126113ea9eed08e26f77a70653ff5c</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>af60dc6a9d3f120fca2bb2bde4d32237d</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>ab0f78caa96e33158083c5477e29ba65f</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>a522bc51756a7b5cb8eed2fc93e82d14f</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>ab36f339d12005ffcdd33087874d71674</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>aba3e63363d408daaa86c89bf48c31634</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>a2d7a007a99675f0cd643d0375248eb80</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>abc65ac2bd6e5c6ae29e275077512891f</anchor>
      <arglist>(const sc_signed &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>ad971229c185f1d2488671a5b7e6b1e79</anchor>
      <arglist>(const sc_unsigned &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>a1edf9580b050f521a6212a40b5b9e160</anchor>
      <arglist>(const sc_bv_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_int_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>a4f2523d0759c876d7f51c2a2f2946e6a</anchor>
      <arglist>(const sc_lv_base &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>abb2c53ab49d1a903d2795ce002a68d8f</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>a9a38e6fec4213f8118a49e0601e8f4b0</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>a04d64deb99ee11ac2bfc26c3f0ab09fe</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>a6cc2364e0788ab579738fa296b72f51a</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>aece58e97f750df99434d085564c2b650</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_int_subref</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>ae71af837fe4e64570167305f61c4500a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_base</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>a1021395579853152106ea7ddd0051f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_int_subref &gt;</name>
      <anchorfile>a01861.html</anchorfile>
      <anchor>a5c1465b91f06a92582af7627024207e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_int_subref_r</name>
    <filename>a01857.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function">
      <type></type>
      <name>sc_int_subref_r</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>ad168d8921ba02b5def000600503dd7cb</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_int_subref_r</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a18849690d300e3517a227fde571f4b90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a6767502d48b1667b74af262dc2226095</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>afba719866ed6118ad51b07235301704a</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a1bfb0e7614959cef8e8f6645dba830dd</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a38966f843e66baff95b73254cbb84b23</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a6fcbfbf13c38af5323b3aef61c12d2ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a5a2d5e7c5407afeaab3a64c05f874aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a73a593cd3ab4cb4223da6320d1063478</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a78312f3b1b2649e2543a67725e537316</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a4ca57d16e01576e5c41222534a80ff21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a3734cf4056ccccd0be76bbf4d826bf29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>aee144166b0e560eaadcc75e052e5f90d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint_type</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>aabb19eac2da7f58a406e762b28b0e818</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint_type</type>
      <name>value</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a69227f09f024bc0940a9950397e760cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a6572271029438bd803781f6bc3d8010c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>ac2014abbca2dfa51591c5531fac22c96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a9a8a61cdbeada0be1c149dd0907d77bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a67234455df8b6a0fba8d3654abab3fcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>acd93524ce8ea45f8f8ff9cbe4764d012</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a11410340f3d8cb90efcf7d0e19fe085a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>ae9b69124860bf1b7bd4245bb8068ed3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a5bd302767b42fd61571515e8d4760f85</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a404ee36032aa63c73ec09de911340482</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>afaf95fd68552b4cecadb0ce929f7df5d</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_int_subref_r</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>aad0676130601e6bd0936e4fa47fe70a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a8b6b4aedf11d6e54ee34736fd0efe84c</anchor>
      <arglist>(const sc_int_base *obj_p, int left_i, int right_i)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_left</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>aa9d9ea9251d04fbe1e9e8b673d788203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_int_base *</type>
      <name>m_obj_p</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a157cd6fc63a4151b1f8e24877cf13726</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_right</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a28667f00ca6585e95d07022abab99d22</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_base</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a1021395579853152106ea7ddd0051f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_signal</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>a43d5854e57b3e8e6ea60fef173c5cbf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int_subref</name>
      <anchorfile>a01857.html</anchorfile>
      <anchor>ae8b3b888b1e0174b7e693cc90c248743</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_interface</name>
    <filename>a01357.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01357.html</anchorfile>
      <anchor>a7c93074c41900149ab2ac84bd6787ae6</anchor>
      <arglist>(sc_port_base &amp;port_, const char *if_typename_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01357.html</anchorfile>
      <anchor>a831ba56976468161cc7967baaead1045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_interface</name>
      <anchorfile>a01357.html</anchorfile>
      <anchor>adbe820669c3473b5f6605a842b0b0835</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_interface</name>
      <anchorfile>a01357.html</anchorfile>
      <anchor>a683561f63d51dc7665a0d205ecbbdf43</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_join</name>
    <filename>a02085.html</filename>
    <base>sc_core::sc_process_monitor</base>
    <member kind="function">
      <type></type>
      <name>sc_join</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>a4cde2217e9dc310dac6e171d4beaa401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_process</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>a2f52f9900ea49d9631085457d06c76d8</anchor>
      <arglist>(sc_process_handle process_h)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>process_count</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>a0f3fee55d73a3905714e521667833c66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>signal</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>a4b27527d947fa209e590be377fc1bfc6</anchor>
      <arglist>(sc_thread_handle thread_p, int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>a1f91b77504f459ece8224c7609850383</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait_clocked</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>a5d33269959003ddbf5d5d80a1a1fbe1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_process</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>ac464f33542cd74c2c9ff38fec7da4711</anchor>
      <arglist>(sc_process_b *process_p)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event</type>
      <name>m_join_event</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>abbbe87abf1ee04cde953c1c7785fd5c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_threads_n</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>a79f6fbfcfff4a276b50f59c15a9476d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_handle</name>
      <anchorfile>a02085.html</anchorfile>
      <anchor>a4a61fb98d9d86beda7cf6016f55d01ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_kill</name>
    <filename>a02073.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_kill</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>ada67131f70d6e09f1bfc3aeaf7e3b265</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_kill</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a8a6aa9b5a087f63d477e39b725a79fd3</anchor>
      <arglist>(const sc_kill &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_length_param</name>
    <filename>a01869.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_length_param</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>a459f0232ff8ab64b8085bdd74989d802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_length_param</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>a4d780fbe8be07bac6d330379a4e63524</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_length_param</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>af0810763aeba01375aea76dfc32224e0</anchor>
      <arglist>(const sc_length_param &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_length_param</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>ac42a239d90b8338a69a34c624a37f20d</anchor>
      <arglist>(sc_without_context)</arglist>
    </member>
    <member kind="function">
      <type>sc_length_param &amp;</type>
      <name>operator=</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>a44a89299fefff85bcfbb3f1e17821c6d</anchor>
      <arglist>(const sc_length_param &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>len</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>a2b91174e34e1b3a733f1fcbdf2544da8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>len</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>ad72c0b41a661e5be193b1fc78a4514f2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>a45f2b1d8591129f52468709a19b04a03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>ac73632caa20365ad7b10b67a58b6d537</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>ac1af178f8276e62d25d365dc4a86b683</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API bool</type>
      <name>operator==</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>a769e19959d8a6ef9d28625aecf530249</anchor>
      <arglist>(const sc_length_param &amp;a, const sc_length_param &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API bool</type>
      <name>operator!=</name>
      <anchorfile>a01869.html</anchorfile>
      <anchor>af9f49b81672983b6cd57cab99b9687ce</anchor>
      <arglist>(const sc_length_param &amp;a, const sc_length_param &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_logic</name>
    <filename>a01613.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_logic</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ad10a94e99578555e67de48e21726cac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_logic</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a5fe21ab6ff6a297dd402820463acbccf</anchor>
      <arglist>(const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_logic</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ac1f013fb5acc645a9c0b16747e7cb7fb</anchor>
      <arglist>(sc_logic_value_t v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_logic</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a323c8eb380ee0a04958386ab58c4ff8e</anchor>
      <arglist>(bool a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_logic</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a709e425a30222fd43cc2dd93c9eefc4b</anchor>
      <arglist>(char a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_logic</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>acfdf6258e20568d997668f48cfedb9a8</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_logic</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a102aeb3d0ea1a8efba1513fa847deda8</anchor>
      <arglist>(const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_logic</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a86e905f8b0847ca768369c51c59b04b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_logic &amp;</type>
      <name>operator=</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a6a04a1c3aac412247e9e9a152db0a552</anchor>
      <arglist>(const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ac9c5039b5b5bea14ca097b092f257b80</anchor>
      <arglist>(const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>aa18146f872f83889cb41f0b11bf4913b</anchor>
      <arglist>(const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a8ddc6ec5b220327a28e6b0071271a6b1</anchor>
      <arglist>(const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator~</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a9b2fff92a3522268fa94142873343472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_logic &amp;</type>
      <name>b_not</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ae66dccdc15971d1460098a8082a5e513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_logic_value_t</type>
      <name>value</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>afc609184b47832731effc61ee6e9c6f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_01</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a838768d767602612c9f38a9bf759ee2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_bool</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ae98968920229a02e050262e0e5c48c00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>to_char</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a8c9eaddeb8cbccfcaa01e777b9871572</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>af9e8ba6acfbb0e2e94bba07a98b4f9aa</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a8e8e1ad7065b87d05d170f7e6f743d95</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>operator new</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a44c67d88bc7872d8abc8a3c689098026</anchor>
      <arglist>(std::size_t, void *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>operator new</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a6e4a6b966a9687719913b6a6bd7f2df7</anchor>
      <arglist>(std::size_t sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>operator delete</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a0e1654143b030eae7a8918e7d6cef794</anchor>
      <arglist>(void *p, std::size_t sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>operator new[]</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a9a59ed29d126c7d6ea8ed485c486b313</anchor>
      <arglist>(std::size_t sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>operator delete[]</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a74315c9646f13bf569a1953e95159980</anchor>
      <arglist>(void *p, std::size_t sz)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const sc_logic_value_t</type>
      <name>char_to_logic</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a5a0eb01c500c4590069420f836013991</anchor>
      <arglist>[128]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>logic_to_char</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a85abac6394b82202d7ca10b1e7c3fcc7</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const sc_logic_value_t</type>
      <name>and_table</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a57128ae6fbd7936b64a6c5e437b5736d</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const sc_logic_value_t</type>
      <name>or_table</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a02dd6744bcb364dda697e967f0486d89</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const sc_logic_value_t</type>
      <name>xor_table</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a3e04869db50ea30eb687be7af97db2ca</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const sc_logic_value_t</type>
      <name>not_table</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ad0bc26f8605804f9a9fb0b642cf03fac</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_logic</type>
      <name>operator&amp;</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a3559c77dbf8c711c730f47cae4f54832</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_logic</type>
      <name>operator|</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a842c667d33417d8d4c2504d147cae746</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_logic</type>
      <name>operator^</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a63483b6d65587968028c560b687fc835</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ac0da1f24739d6f3b2c8c920ff8d48d1e</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a5d39543d4c80393f826aac80e851c698</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_lv</name>
    <filename>a01617.html</filename>
    <templarg>int W</templarg>
    <base>sc_dt::sc_lv_base</base>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a47e10221766232a99e6e8199bd332fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>acfcfb2a5fc9b2e875e2adb846c1b7ad6</anchor>
      <arglist>(const sc_logic &amp;init_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>ac6d70e3188fc7971a387e1b2e47ff0ff</anchor>
      <arglist>(bool init_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a3e2ba1431339a92e965b4a022dd8af7e</anchor>
      <arglist>(char init_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a13aa13103addab6a3397cdced73e4500</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>ab7a8a8afbe426e20a0c496139d41a3b9</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a3b3e22061ac590357338691d5c5b2e15</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a52bc524245c08af27d77a17cfd653ae2</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a5018b3eb725bb5881febf9f9fd444e03</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a6d18b64da7f190ad98effbb6fd04f2c9</anchor>
      <arglist>(const sc_bigint&lt; WO &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a8bfcc4baf39554bdf5cd24fdb202f9e9</anchor>
      <arglist>(const sc_biguint&lt; WO &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a93a9c75913f933cc93ae09ef33edbc45</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>aa29fe94101883cb167ce5c21820ea4f4</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a5e823f83dcf6dd02da6ef81a99b88067</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>afbde4c5241541046ee68cbb746b3800f</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a545673a6ef2b6e151496be1767a8270a</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>aafd604d3d91ea3551056e195cf6c938c</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a9e1a1c665be9e393b5d41bfc7472c19a</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a9b436f4ae5da64702d88dfc40be804c9</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a7979cd462767a6000e3032ce5f3297b1</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>afb4cdfd6824dd974ff3c153424278d30</anchor>
      <arglist>(const sc_lv&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>ace19fca375437efa41e9167040546f4f</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a9ce4be55b84bf518503321b6ab60d976</anchor>
      <arglist>(const sc_lv&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>ab6c53b23b21fe201970bed8a93061c79</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a8989395234c90bf203ed35e3443f6d86</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a859f89737d651fc7619a3f23a1478e93</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a8855b3e42b219af8830059d658d7d8e4</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>ab356e846a418cab4b7e675d8ecbb9feb</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a96fffc9d5e4ae06ed400f1e0a00db527</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a524f26700a092779aca711a19a183f49</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a004cdad90b42439d80c52f3e0be8a74f</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a5f29bac035bc7bcfedb1ea32e6b06787</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a5d15d25810df6fc12e371e5738683903</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a2f779e2a2cf1b4d40c5a65279487c0c9</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a19b116d12b2c817c143fbdb3f272c161</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>aefeae6e0b1be360e3420c3651bafd071</anchor>
      <arglist>(int64 a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_lv_base</name>
    <filename>a01621.html</filename>
    <base>sc_dt::sc_proxy&lt; sc_lv_base &gt;</base>
    <member kind="typedef">
      <type>sc_proxy&lt; sc_lv_base &gt;</type>
      <name>base_type</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a021a4006bbfbf8638aeafa6c24d9c47d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::value_type</type>
      <name>value_type</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>abf6bd7b7c26084a8a815620cd9f13494</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv_base</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a70fe4ca54e356662b01f4bb12b8da58b</anchor>
      <arglist>(int length_=sc_length_param().len())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv_base</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>aad177abe207e9e9b3363a203b373b9fc</anchor>
      <arglist>(const sc_logic &amp;a, int length_=sc_length_param().len())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv_base</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>aa98894694fdc1d9e0d5bf265b110ad57</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv_base</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>aa566f8951014f4c1e4a3eec3c02358ad</anchor>
      <arglist>(const char *a, int length_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv_base</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a953fd24775d6f831e4225954bc083c54</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_lv_base</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>af5633429613bceb85e73c0e7792b3b48</anchor>
      <arglist>(const sc_lv_base &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_lv_base</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a5e5668d29dcc1efc99ebedaccd671471</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a61617cf360fdd7f2fa79e7263511bded</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>ae9a5be9f7438207f5198fcd34ed141d0</anchor>
      <arglist>(const sc_lv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a9c53cc356d83bb839b7d530ffcce024b</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a1afd260d4b398a6af446240b3da3211d</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a9a045c992acd444a09e0b0f0f50320ab</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>ab317ad22c36b4f90f5b501866dab9c22</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a4336a6023d1ebd38448aa4aaea775c3a</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a0fab3908ebf21d8f924390ec14b675b1</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a7a69baffbfca282a387407f00f0adbc0</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a09b0b4c147131ff43e118e3519e67319</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a396908cb8e368ebb37d1a7a26db0bbf7</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a580b76473ddde8649645a313d41a45ab</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a597345da26df41b13f4963e0e7501fc1</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a706681ac3ccbc578368e4e331321e6f4</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a4eeddd46ff5b5622e9f11eabe0f99efd</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a092f521a37da5571fc8f4dd3f5555958</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>aedf408497a60bbee2bfe3f134f9f55bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>get_bit</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>aca38d4bbc385a70dbea73e24cfa83601</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bit</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a2a35e83514603a311959fd75e2bc6826</anchor>
      <arglist>(int i, value_type value)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_word</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a30dce708a138d220e465114323458008</anchor>
      <arglist>(int wi) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_word</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a4f94410d1b82d943619028bb800c471d</anchor>
      <arglist>(int wi, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_cword</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a54f49ba5e16df9e65c0aa11793dc71f6</anchor>
      <arglist>(int wi) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cword</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a83a47ca0f46e8fc8337d9b8f9edfc93a</anchor>
      <arglist>(int wi, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean_tail</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a395e2d0989319719b560e4cb728a5223</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_01</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a8b88b87f3e3110056b3ff6be25e94af6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_len</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>aa8c3a52555442570eae3b2223cf6952e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_size</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a775a0d4ffd2f5c3025d57ee4424846e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit *</type>
      <name>m_data</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>aa20c7a5422cb62ab42a0b3723d403384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit *</type>
      <name>m_ctrl</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>abcb0c6b0d29a625a7c32c39f476fef15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit</type>
      <name>m_base_vec</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>af1ffcaf67192c7e30c03d803a1112df4</anchor>
      <arglist>[SC_BASE_VEC_DIGITS &gt; 0 ? 2 *SC_BASE_VEC_DIGITS :2]</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_bv_base</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>aa31c8f5d1ec5ab3b45594163c614f9c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_lv_resolve</name>
    <filename>a01493.html</filename>
    <templarg>int W</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resolve</name>
      <anchorfile>a01493.html</anchorfile>
      <anchor>ae2a7c291312ea344953e54c8ad8bdc88</anchor>
      <arglist>(sc_dt::sc_lv&lt; W &gt; &amp;, const std::vector&lt; sc_dt::sc_lv&lt; W &gt; * &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_member_access</name>
    <filename>a02405.html</filename>
    <templarg>typename ElementType</templarg>
    <templarg>typename AccessType</templarg>
    <member kind="typedef">
      <type>ElementType</type>
      <name>element_type</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>a80c3b4479c169ba6cf1439edf5555d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AccessType</type>
      <name>access_type</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>a1d1ca3151ff0d7a5712328df5e7f693f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>access_typeElementType::*</type>
      <name>member_type</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>ae3657780a93e7de8a1dcbf65a3112a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>access_type</type>
      <name>type</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>acb63ca94a5ca6883bebcb857a5ed3397</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; type &gt;</type>
      <name>plain_type</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>adf80b98c586f168ff6a87c83c92566f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; ElementType &gt;</type>
      <name>plain_elem_type</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>aa32b5c00afd1822e216841d1d87ba576</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_member_access&lt; element_type, access_type &gt;</type>
      <name>policy</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>a6f0b3de2390ed967a516fd86495b2ba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_member_access&lt; plain_elem_type, plain_type &gt;</type>
      <name>non_const_policy</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>a16b139d56ad80907526781a22027f043</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_member_access&lt; const plain_elem_type, const plain_type &gt;</type>
      <name>const_policy</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>ad07d4c5f1c0fbd0bf3978393255c0133</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_member_access</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>a5b77d8646e132130ae21208224ede865</anchor>
      <arglist>(member_type ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_member_access</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>a99cf6f3272be765ea3ae2d546cf05f88</anchor>
      <arglist>(const non_const_policy &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>access_type *</type>
      <name>get</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>ac007e2dff16d6c7e30e5c957c32af42e</anchor>
      <arglist>(element_type *this_) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_member_access</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>ae6425eaea4d456afb050ec06590aec2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_mempool</name>
    <filename>a02329.html</filename>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>allocate</name>
      <anchorfile>a02329.html</anchorfile>
      <anchor>afaac7ed94eea5b968062f1c903b5010a</anchor>
      <arglist>(std::size_t sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02329.html</anchorfile>
      <anchor>a53eabddd014b14e3a5209ff6bec60783</anchor>
      <arglist>(void *p, std::size_t sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>display_statistics</name>
      <anchorfile>a02329.html</anchorfile>
      <anchor>a31669d33450a2dd611fadc74ddfd233f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_method_process</name>
    <filename>a02089.html</filename>
    <base>sc_core::sc_process_b</base>
    <member kind="function">
      <type></type>
      <name>sc_method_process</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a3b5028ef1dcb6cafbd64ed8a64401924</anchor>
      <arglist>(const char *name_p, bool free_host, sc_entry_func method_p, sc_process_host *host_p, const sc_spawn_options *opt_p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a15b72d6a41d989b8863d2b5bc8fa255a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_for_throws</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>abdfa4e3d64a5c3920817e65522b4d459</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>disable_process</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a3ba4bcd1a5161de72b1d88165359d743</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>enable_process</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a19c4ef30fb89bc52b8171df54afc2b0c</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>run_process</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a335868e25152ff0673a3b933f3896ca8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>kill_process</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>acc3fd200c8a01b28aa9873f15a6c63b2</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_method_handle</type>
      <name>next_exist</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>ad093c4fbabea4426152be4442b38275f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_method_handle</type>
      <name>next_runnable</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a639ec3b83e529d2aadaccda1bb5b991d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear_trigger</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>ae1fcd71522389c44dd2be04e365b2d75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a42046a8527c3121071a82ab76e43732e</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a4bac893a79c2b92195c4509290e4b3aa</anchor>
      <arglist>(const sc_event_or_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a7965844240f0db8e8ffeb86c83256e2c</anchor>
      <arglist>(const sc_event_and_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a0b97578001f92264e2e4659d0e43758c</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>aefa1d89daeb0c6f67c6e7ed9d9bcbd2c</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>afcc913248deeb705227ba97c1e5fef28</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a16f5413088dd7268c40effda6622b5b8</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>resume_process</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a787cc559f1309eb7b31c771fb00c98e7</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_next_exist</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>ab2f7c9e81389a41f661f01ed950a3251</anchor>
      <arglist>(sc_method_handle next_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_next_runnable</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a82e1f0fda0dbe23f428383b200ae1b04</anchor>
      <arglist>(sc_method_handle next_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_stack_size</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a6a4c1452dfb33d4957673f2bae67c49b</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>suspend_process</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>ac9f9597bb610daf904816ec883faec67</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>throw_reset</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a9dc781dd3a5887593818f92ca0cb5983</anchor>
      <arglist>(bool async)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>throw_user</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>aafdc10603457af55300744211f7fc3d9</anchor>
      <arglist>(const sc_throw_it_helper &amp;helper, sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>trigger_dynamic</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a2a61dbd90ca15f462063c3708bbca671</anchor>
      <arglist>(sc_event *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trigger_static</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a582fb436394d07b722dc1e7c4d18151a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_cor *</type>
      <name>m_cor</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>ab2906fe78ffbf833d74eb8b61d3f3fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_stack_size</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>ad05f675d33cf02d196d20a5e7474af82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_process_monitor * &gt;</type>
      <name>m_monitor_q</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a48cffbc5c0e83c45b451f98f70cd7bf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_invoke_method</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a76ad131484e5215573ca4708695fab54</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_table</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a12ba92f261d993145709693ea4466b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_handle</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a4a61fb98d9d86beda7cf6016f55d01ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_runnable</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a7daf768cb0d25e9950151ec7079decbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_method_cor_fn</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>aa1d6ba1b5b8042513898f6cfb2d268de</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_cmethod_cor_fn</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a71be773b8a8751bacf57f8dc6ee17034</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_set_stack_size</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>aad6025c1a9dbbb9ed0e446a1dff51895</anchor>
      <arglist>(sc_method_handle, std::size_t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>adacd4c04e6dd1542f68627655baf132b</anchor>
      <arglist>(sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a1fff8049af70053074623407ae4e2eb2</anchor>
      <arglist>(const sc_event &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a1083f7240fcce17d9c4ada27a5cd912e</anchor>
      <arglist>(const sc_event_or_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a850aeffc6f1cfc5b9a49f92f2af430be</anchor>
      <arglist>(const sc_event_and_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>af5d17250c321bbcb51a60ece9d5ce143</anchor>
      <arglist>(const sc_time &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>ab5262b313db4d7a6dc2c5bf03da33a73</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>aa6d2b4d2d341e7ec09c953de01fa6664</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>aee1f9da7aed4a07759ac5e44ae0e0a1e</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_mixed_proxy_traits_helper</name>
    <filename>a01661.html</filename>
    <templarg>typename X</templarg>
    <templarg>typename Y</templarg>
    <base>sc_dt::sc_proxy_traits&lt; sc_lv_base &gt;</base>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_mixed_proxy_traits_helper&lt; X, X &gt;</name>
    <filename>a01665.html</filename>
    <templarg>typename X</templarg>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_module</name>
    <filename>a02097.html</filename>
    <base>sc_core::sc_object_host</base>
    <base>sc_core::sc_process_host</base>
    <member kind="function">
      <type>sc_simcontext *</type>
      <name>sc_get_curr_simcontext</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a3a367549a1a1c584edc33b703eefa53b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>gen_unique_name</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a226501709db077957819767cd044ec97</anchor>
      <arglist>(const char *basename_, bool preserve_first)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>ac08580d9cd6844150982762b3ac7ad2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_module</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>afb7f97cf59ddfcfb355b0c00c958c0f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_module &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a0141583bbe88ced9ae2b475cf9184e9a</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_module &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a3463a9fc992799276865f832dc03199d</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_module &amp;</type>
      <name>operator,</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a0bb584c6d41f3d0be63f204d82a5d9bc</anchor>
      <arglist>(sc_interface &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>sc_module &amp;</type>
      <name>operator,</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a013f0d9523057e777a12f51d4fb6387c</anchor>
      <arglist>(sc_port_base &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defunct</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a459def9bb2b824ad85b9f3d1b4586af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a289fa0b8734ccda07b249a1f77c1317e</anchor>
      <arglist>(const sc_bind_proxy &amp;p001, const sc_bind_proxy &amp;p002=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p003=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p004=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p005=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p006=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p007=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p008=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p009=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p010=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p011=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p012=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p013=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p014=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p015=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p016=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p017=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p018=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p019=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p020=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p021=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p022=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p023=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p024=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p025=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p026=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p027=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p028=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p029=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p030=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p031=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p032=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p033=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p034=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p035=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p036=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p037=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p038=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p039=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p040=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p041=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p042=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p043=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p044=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p045=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p046=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p047=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p048=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p049=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p050=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p051=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p052=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p053=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p054=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p055=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p056=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p057=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p058=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p059=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p060=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p061=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p062=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p063=SC_BIND_PROXY_NIL, const sc_bind_proxy &amp;p064=SC_BIND_PROXY_NIL)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>before_end_of_elaboration</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a8ee8f0171173bb4bbec2b38b9011e0ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>construction_done</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a3e77bd590c5e801ae904eb17bf1fed61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>ada6b8ecb742117ad65d36e5da110c613</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>elaboration_done</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a027ac2d66f268289655dd3f9fe406497</anchor>
      <arglist>(bool &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>start_of_simulation</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a8f90273a6c0330bd891224973c185bcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>start_simulation</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>abc724f9efb87e54f67d5607ff87a0360</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_simulation</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a7e19e292351567c8efab15e7daf9a398</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>simulation_done</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a263f40eb8f609215659f462cd7e53fe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sc_module_init</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a8ade4e85bcf02e8bd73fa0355464f047</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_module</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a1d63603202313bc8dccaa9f381731b41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_module</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>abf2b2376796c66293d45909f8d557f17</anchor>
      <arglist>(const sc_module_name &amp;nm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_module</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a08b1c1c9a8d238763e6078c22a56f39a</anchor>
      <arglist>(const char *nm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_module</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>aafee55c32edfcf52c922d5ffab208476</anchor>
      <arglist>(const std::string &amp;nm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>end_module</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a335469380ccd71b230def8ba3f8c62dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>declare_method_process</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>acb1a21d0194870cc7117bae55d7b6481</anchor>
      <arglist>(sc_entry_func func, const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>declare_thread_process</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>aa479d4b5232c69265c2c2929ed74d65c</anchor>
      <arglist>(sc_entry_func func, const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_process_handle</type>
      <name>declare_cthread_process</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>adeaa1bd350bc46007be7855a280ac125</anchor>
      <arglist>(sc_entry_func func, const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>declare_cthread_process</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a01f708dcda9506654c23518bd38ea1a2</anchor>
      <arglist>(sc_entry_func func, const char *name, EdgeType &amp;edge)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dont_initialize</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>ac8c22b97fd5b6841347eac007216616b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>positional_bind</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a5a089da7063b255a691e2f45c8a840e0</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>positional_bind</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a87caef8ebab3a9e89e8cb8fbd02d6aca</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>async_reset_signal_is</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a598ffaf3937a10a4bcd7878281e5bb9e</anchor>
      <arglist>(const sc_in&lt; bool &gt; &amp;port, bool level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>async_reset_signal_is</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a174fedb308fd635e8716142a355cb3fd</anchor>
      <arglist>(const sc_inout&lt; bool &gt; &amp;port, bool level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>async_reset_signal_is</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>af79af642ea6595a189a216f36e9fd271</anchor>
      <arglist>(const sc_out&lt; bool &gt; &amp;port, bool level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>async_reset_signal_is</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a6ea041b87d50f1c68298937f02282d14</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;iface, bool level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_signal_is</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a8e2aed37c947bca74306ac7fdf0fa669</anchor>
      <arglist>(const sc_in&lt; bool &gt; &amp;port, bool level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_signal_is</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a60c8f89d8e348e6f967fe6666a05422e</anchor>
      <arglist>(const sc_inout&lt; bool &gt; &amp;port, bool level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_signal_is</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a1bdada39753a050482f58d9a1609ceb6</anchor>
      <arglist>(const sc_out&lt; bool &gt; &amp;port, bool level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_signal_is</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a16b89bbab7cfc47143798918f39dfdb4</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;iface, bool level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>af06fa45225b1acd0751622b5112b670f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a90356e56e7cd4fbbcf512f0b3da0f432</anchor>
      <arglist>(const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>afd00f5b0c0ff9ca4e0225ddbca8f3773</anchor>
      <arglist>(const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a7861b4532e3eae6884824b91819cd95e</anchor>
      <arglist>(const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a722eedae4f05230f0a438f0148182188</anchor>
      <arglist>(const sc_time &amp;t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a9b330614520f47f2087a1182274eeeed</anchor>
      <arglist>(double v, sc_time_unit tu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>ad156829f89671fa337fe5ca76915f8c8</anchor>
      <arglist>(const sc_time &amp;t, const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a99b60ea172d7a4b5200f081dd27322bc</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>afec1310979b9edede154b5b4e7ef0a23</anchor>
      <arglist>(const sc_time &amp;t, const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a307c14a10471568ac61f4e239e3e39e1</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a2a23bbe92415b28a311ce1b0c4127d17</anchor>
      <arglist>(const sc_time &amp;t, const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>af175353b2268c04c3d22bdffffaf73d2</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a6a458d71781cb3f24f59676f3885d55a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a193a531d61718e9bf4c3e5ab4d3b66a9</anchor>
      <arglist>(const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a576d33d7ba0bcfa45a23981d4d8cc4ef</anchor>
      <arglist>(const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a1b7867730a0785ec67daf9600b4e7722</anchor>
      <arglist>(const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a0380a707ca9335af76e3dadd15d1ce7b</anchor>
      <arglist>(const sc_time &amp;t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a3be85b2af0ef29110252bb62eccf98d1</anchor>
      <arglist>(double v, sc_time_unit tu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>acf5f31d328890dc448ee89c53138fefc</anchor>
      <arglist>(const sc_time &amp;t, const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a6150b7c767e135091303d447398d6f70</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a482ebc847963c137e407f1a39ee9955f</anchor>
      <arglist>(const sc_time &amp;t, const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a1a0635513c7a8f2de68a6a9a65d12acb</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a7b0c204b0024cd77a606575b97c58772</anchor>
      <arglist>(const sc_time &amp;t, const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a99008263e28860cc093abe6d0132eb5d</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>timed_out</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a67b1aa3b55510ee6bcdaa32ba3625080</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>halt</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a729823c788d36379140593e4baf5e3fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>ac2a40207ce1ce984947f4d14fa9f1086</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>at_posedge</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a3e40a08ed38141622ee366b12bf0e126</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>at_posedge</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>aa9c8b57a6728fb05cd5ff4c2250d3154</anchor>
      <arglist>(const sc_signal_in_if&lt; sc_dt::sc_logic &gt; &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>at_negedge</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a1a02efb49e0f94bdfcdd5d8f17bf149e</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>at_negedge</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a3d00dfb17ea0d02192258beb743523e9</anchor>
      <arglist>(const sc_signal_in_if&lt; sc_dt::sc_logic &gt; &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>watching</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a7e5fa9cb5662b7c56d35dd16a63a8e39</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_stack_size</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a49238d772547d7e1b38b6668e733efe3</anchor>
      <arglist>(std::size_t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>append_port</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>ad347d89983ad0183a13302b4183cb42f</anchor>
      <arglist>(sc_port_base *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_sensitive</type>
      <name>sensitive</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a366572064bc944a5e4524d042f3a243f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_sensitive_pos</type>
      <name>sensitive_pos</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a2828a30bece6827e02b85e0400d19002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_sensitive_neg</type>
      <name>sensitive_neg</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>acf142733deeb576e8bff493e8a5555b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module_name</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a961ce39e963a1f45e7e0c73ead0c9be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module_registry</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a500fc9375656110e0bcb26cece285b08</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>abe316699185dd3108ba952d356e513e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_port_registry</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a9db64b27e3fa59526834c1244e6f20a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_initializer_function</name>
      <anchorfile>a02097.html</anchorfile>
      <anchor>aaea356b4d1c604882547aed20d5bc192</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_module_name</name>
    <filename>a02101.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_module_name</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a79a4e8a11ea342022f6f76b43a506d79</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_module_name</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>ad3458f71558edd3667c7df4054886e9a</anchor>
      <arglist>(const sc_module_name &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_module_name</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a1ea9f914a443abc73dcc61f1a550b260</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aca84ef3051cec2a86a1c97adcb87a6cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear_module</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a7897230de792bfcc950edf909b196e36</anchor>
      <arglist>(sc_module *module_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_module</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a4183f467b1bca05f098c6b5a43a21ec9</anchor>
      <arglist>(sc_module *module_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>execute_initializers</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a6853e6f250f5bcaf99092ccc337c58cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object_manager</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aebba0bce7695a731f55e38d2a5ca2d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_initializer_function</name>
      <anchorfile>a02101.html</anchorfile>
      <anchor>aaea356b4d1c604882547aed20d5bc192</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_module_registry</name>
    <filename>a02105.html</filename>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>a603b91a0b838762790809ad94c450e1d</anchor>
      <arglist>(sc_module &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>af805c9a1286457e17384b7f71012b9a2</anchor>
      <arglist>(sc_module &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>ab7587f21a0b6647d33ecfb8cbaff333d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_mpobject</name>
    <filename>a02333.html</filename>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>operator new</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>aaa9f51cb99116f813149389872c1f323</anchor>
      <arglist>(std::size_t sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>operator delete</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a45fc4473d5cc230bf386e11ba09ca48c</anchor>
      <arglist>(void *p, std::size_t sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>operator new[]</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a70e55b8142ad04b857ca642d855f3825</anchor>
      <arglist>(std::size_t sz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>operator delete[]</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a1b942567f9500e2735cb9e7c4229de08</anchor>
      <arglist>(void *p, std::size_t sz)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_msg_def</name>
    <filename>a02357.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>msg_type</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>adf4063c29d6695ce4b5a5dad60aba808</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_actions</type>
      <name>actions</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>ad2bf0457ad85906c3b654001799b124a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_actions</type>
      <name>sev_actions</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>ab6ae555b5595a23fdadd5f21a2f0563c</anchor>
      <arglist>[SC_MAX_SEVERITY]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>limit</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>a22843393a7ed3181599d3f976156b5b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>sev_limit</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>aa2f8ce5f98bf95e643c7efb7f99ae858</anchor>
      <arglist>[SC_MAX_SEVERITY]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>limit_mask</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>a9e41d7276a72f4e1c8e10028949ae87c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>call_count</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>ab81d6dd219818d8e2d5feb1c3afe379e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>sev_call_count</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>a454601bf1b87cbb3b81de5085a9cb792</anchor>
      <arglist>[SC_MAX_SEVERITY]</arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>msg_type_data</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>a4ed6d80922de2e99dfb53ec5d3e7f242</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>a08779fa864555437e599dae71162661a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_mutex</name>
    <filename>a01361.html</filename>
    <base>sc_core::sc_mutex_if</base>
    <base>sc_core::sc_object</base>
    <member kind="function">
      <type></type>
      <name>sc_mutex</name>
      <anchorfile>a01361.html</anchorfile>
      <anchor>a4d510d3d38bc6da39d54bb8658c3640d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_mutex</name>
      <anchorfile>a01361.html</anchorfile>
      <anchor>a169d49594df3ad0ba58d2395c98b5f12</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_mutex</name>
      <anchorfile>a01361.html</anchorfile>
      <anchor>a76822ae4f3a788efcd5ddadab8efea93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lock</name>
      <anchorfile>a01361.html</anchorfile>
      <anchor>a227813e3089b0d000bba8b39ed30a07e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>trylock</name>
      <anchorfile>a01361.html</anchorfile>
      <anchor>abfafd461ffa8489bc28d11d774d008ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>unlock</name>
      <anchorfile>a01361.html</anchorfile>
      <anchor>a9497893c89e489b107ed2061851c6a3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01361.html</anchorfile>
      <anchor>a1e6bc2f982817d51a427f7dd1c87584c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>in_use</name>
      <anchorfile>a01361.html</anchorfile>
      <anchor>af0f2b8ac9328e67707daa77301bf8388</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_process_b *</type>
      <name>m_owner</name>
      <anchorfile>a01361.html</anchorfile>
      <anchor>af69ba22a03bab6e983eeb859658ca105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event</type>
      <name>m_free</name>
      <anchorfile>a01361.html</anchorfile>
      <anchor>a7179ffe9bb1e33d81114292d366b1b4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_mutex_if</name>
    <filename>a01365.html</filename>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>lock</name>
      <anchorfile>a01365.html</anchorfile>
      <anchor>a60e4ec2e991f43bdc946989a3c33e7c3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>trylock</name>
      <anchorfile>a01365.html</anchorfile>
      <anchor>ab3ca0de5f6df296c2993ad46de13176f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>unlock</name>
      <anchorfile>a01365.html</anchorfile>
      <anchor>a98b7482db60812a9acf28554ecbd5f5e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_mutex_if</name>
      <anchorfile>a01365.html</anchorfile>
      <anchor>a9121fc608e21ff5d6805ebcc054c60c0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_name_gen</name>
    <filename>a02109.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_name_gen</name>
      <anchorfile>a02109.html</anchorfile>
      <anchor>a171fca41af5484eb9e31035ba193e008</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_name_gen</name>
      <anchorfile>a02109.html</anchorfile>
      <anchor>a6a7218312f8d41da06ffd5f62e2cd196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>gen_unique_name</name>
      <anchorfile>a02109.html</anchorfile>
      <anchor>af00dabe63e889a8ab3a120b07a3ca41e</anchor>
      <arglist>(const char *basename_, bool preserve_first=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_object</name>
    <filename>a02125.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a4da9c6e99326cd2619958e049625bc58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>basename</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a52a5e8ada0dccc09f2454f3e7c5034d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a75778dff40cf1bf16fc4eb74346d923c</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>aea8d11dcba6236902df7f099ac558b80</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a8420debe6ce97f5b07e7dde92efe7cf1</anchor>
      <arglist>(sc_trace_file *tf) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>af00b88c11734b5fd97914739fea83e82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_simcontext *</type>
      <name>simcontext</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a734fbb61f5d2b905a276ad0e463105a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_attribute</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a65d95751bce0508ac71364fb6e6fe973</anchor>
      <arglist>(sc_attr_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_attr_base *</type>
      <name>get_attribute</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a86eeb5631e218151315dda30aa0065b2</anchor>
      <arglist>(const std::string &amp;name_)</arglist>
    </member>
    <member kind="function">
      <type>const sc_attr_base *</type>
      <name>get_attribute</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a67ab456d61770c4bad5f775c6935f248</anchor>
      <arglist>(const std::string &amp;name_) const</arglist>
    </member>
    <member kind="function">
      <type>sc_attr_base *</type>
      <name>remove_attribute</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>aa98279f99eb9e3a80879fe158f7b5b02</anchor>
      <arglist>(const std::string &amp;name_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_all_attributes</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a812edfdd89e6536ff7e479bbe7296cc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_attributes</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a5a1213ba04041e8caa6140cac50f12e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_attr_cltn &amp;</type>
      <name>attr_cltn</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>abcf1bd476f7ca351105533686b17afc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_attr_cltn &amp;</type>
      <name>attr_cltn</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>ad55e2b84c2e3216df4ac08929a2a6f46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; sc_event * &gt; &amp;</type>
      <name>get_child_events</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a01b26c4f85b8cdb37f9add5e8b6a983a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; sc_object * &gt; &amp;</type>
      <name>get_child_objects</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>aee37abd169adf3d7fd5ef3aea5e232f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>get_parent</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a000b9b011b231abe61d52bc895a9863d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>get_parent_object</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a07f34b1c9c8720e6b4b32ea98bacab09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_object</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a5b861716606ce329ee9a16b6d8f13e28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_object</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a3369d21ab73ffa0f2d27be6cf11b6759</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_object</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>ac094446cdc95b8606ace0c8e301af6b7</anchor>
      <arglist>(const char *nm)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_object</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a367fc3501af7bef3a11017a28a9fdcca</anchor>
      <arglist>(const sc_object &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_object &amp;</type>
      <name>operator=</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a0e79bf80bc35065e23bef0d9ffb7e2ae</anchor>
      <arglist>(const sc_object &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual hierarchy_scope</type>
      <name>get_hierarchy_scope</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a34b4a5943097891381eae42aed30e82e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_invoke_method</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a76ad131484e5215573ca4708695fab54</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object_host</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a6fbfadb40866e7c3c5edb329e1550078</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object_manager</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>aebba0bce7695a731f55e38d2a5ca2d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_phase_callback_registry</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>abad74f3d94e3f056b7caa556811c4a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_runnable</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a7daf768cb0d25e9950151ec7079decbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_trace_file_base</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a82af6a9e21a904d89af490e9536515a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_object_host</name>
    <filename>a02129.html</filename>
    <base>sc_core::sc_object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; sc_event * &gt; &amp;</type>
      <name>get_child_events</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>aeabde9d504fcc8b1d556f5da9e523be0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; sc_object * &gt; &amp;</type>
      <name>get_child_objects</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>a8b56e4e262f5dd8e00f487466092d0eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_object_host</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>af0324cce2313cad6e98c7691e855d1ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_object_host</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>a7e4a55bce8eabe1a16d324d88eb6011c</anchor>
      <arglist>(const char *nm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_object_host</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>a892bd64a91919b0244d8fa54a72b2cd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual hierarchy_scope</type>
      <name>get_hierarchy_scope</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>a4fc8d076f5b0a13e7d8fb2f877bcc805</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>abe316699185dd3108ba952d356e513e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API const char *</type>
      <name>sc_gen_unique_name</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>aa47287dc911bcfe56ecbf593fb688429</anchor>
      <arglist>(const char *basename_, bool preserve_first=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_object_manager</name>
    <filename>a02133.html</filename>
    <class kind="struct">sc_core::sc_object_manager::table_entry</class>
    <member kind="typedef">
      <type>std::map&lt; std::string, table_entry &gt;</type>
      <name>instance_table_t</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a778ab0aab55d1f964302118fdd6bc3f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; sc_object_host * &gt;</type>
      <name>object_vector_t</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>af9fa287631b3b1ae4a2df75681ec7b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_object_manager</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a64632290b56003e5a06a756405eb1663</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_object_manager</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a14a3b81d6c83e22ea1c1a0184137bfae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>name_exists</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a1b5e11045dd14ffc1769ecd66ae7c3cc</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_name</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a0bbbc2d28e584a70cc22b28c8ad6ca48</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>sc_event *</type>
      <name>find_event</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a8f844890b7a4c4fa622a49b4f8c010ea</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>find_object</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a3158bf52fcec451593cf268e65a1a466</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>first_object</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a6084f6ef936546ddbf4ba5b5834d15b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>next_object</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>aa02cada6af49a6bc8efb93a887b33da3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hierarchy_push</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>abe1e90d3931a50be06cbfdd8c5debd21</anchor>
      <arglist>(sc_object_host *mdl)</arglist>
    </member>
    <member kind="function">
      <type>sc_object_host *</type>
      <name>hierarchy_pop</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a586f992e5f58aadbd9ac0b474318fcc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_object_host *</type>
      <name>hierarchy_curr</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>ab370caa0330ea938d3e86e7a3c2c5846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hierarchy_size</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a2ed3e0f05c478e501eee750c96e32c56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_module_name</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a7cb5b3f6c893750ae0ca03602dab8041</anchor>
      <arglist>(sc_module_name *mod_name)</arglist>
    </member>
    <member kind="function">
      <type>sc_module_name *</type>
      <name>pop_module_name</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a234f5349e4fbd26a664b5cb5657e04fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_module_name *</type>
      <name>top_of_module_name_stack</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a291160ebe4a49fb5426587e5688167e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>top_of_module_name_stack_name</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a0f2ff5197f0c2815904f6b502fe1b8b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>sc_name_origin</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a3f6a9e214d55d0c1a4c4c780e40b25aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SC_NAME_NONE</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a3f6a9e214d55d0c1a4c4c780e40b25aaaf9efc183a648f960837e1b9c766d2e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SC_NAME_OBJECT</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a3f6a9e214d55d0c1a4c4c780e40b25aaaabdf0015a043d67983a9755313dab962</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SC_NAME_EVENT</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a3f6a9e214d55d0c1a4c4c780e40b25aaa259bf0b9168b997f48c490f884e25b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SC_NAME_EXTERNAL</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a3f6a9e214d55d0c1a4c4c780e40b25aaa4f2de4629fb81cce8f55c433ece1ecbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SC_NAME_NONE</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a3f6a9e214d55d0c1a4c4c780e40b25aaaf9efc183a648f960837e1b9c766d2e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SC_NAME_OBJECT</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a3f6a9e214d55d0c1a4c4c780e40b25aaaabdf0015a043d67983a9755313dab962</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SC_NAME_EVENT</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a3f6a9e214d55d0c1a4c4c780e40b25aaa259bf0b9168b997f48c490f884e25b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SC_NAME_EXTERNAL</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a3f6a9e214d55d0c1a4c4c780e40b25aaa4f2de4629fb81cce8f55c433ece1ecbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>abe316699185dd3108ba952d356e513e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_out</name>
    <filename>a01473.html</filename>
    <templarg>typename DATA</templarg>
    <base>sc_core::sc_inout&lt; T &gt;</base>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>ac2a131e831a079fc5258d803d3d3bc48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_out&lt; data_type &gt;</type>
      <name>this_type</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>aa445eda64af4cf0136a67b5a5bba1262</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; data_type &gt;</type>
      <name>base_type</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a564733c0d76428a4cc647be456ed326a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>af2ab53450c9845f8c63b624c6f91dd90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_port_type</type>
      <name>in_port_type</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a04e320d6f5e5b2f7d68f63c6614caa14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>af0208ec79c93717c6ce4d3cbf3fa0972</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_port_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a8e5fe4021ca44c53d365cb6b7588b0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a977872d5a76abba52fbd9ce52abd84f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>ada31f90733f2bc0f5b6a33e404b69d22</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>abef7380c0ba86c3f584c958934b19950</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a060e159871ff40f326d318a4a6b89bcb</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a3ccc766f192de1f0aa5ac628940c98f2</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a8ef8f307b6c62e4ff0d6a87d6aa56056</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a3c08e648d7c53980dae03530eeea87da</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>af3c5aeaa04522416229138bc563d6806</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_out</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a4987f8238744c23da02a84c8eac3898f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a3988db98ca4eaae2486fe2885438fad4</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a889f4b8218f62bc974f62af8b85430af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>ad6553c217cbf9c432f990dd15e0251ed</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a2f679eac2e9f9e6ab1ce68051cf3470b</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a81627f63702afea34aae58313ea4936a</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a7f1a2ec22d3cd20a2a236c29497975ff</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>aadeb189e2c78cb1157606a4616c67642</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_out_resolved</name>
    <filename>a01489.html</filename>
    <base>sc_core::sc_inout_resolved</base>
    <member kind="typedef">
      <type>sc_out_resolved</type>
      <name>this_type</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>ac4bd933f4bf620bd54a221f30dd1bc6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout_resolved</type>
      <name>base_type</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a7c56022e7b534ee0e17a7caed62e94ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>ade8f9421aaebf5667280efd541d092e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a26c9d4bfac8fea429d989b714ca5c4d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_port_type</type>
      <name>in_port_type</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a29eb449340a223ba1e573720960159d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a34135fd7214fc3c9113a171619b59698</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_port_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a1346b23feb27006270e8955166f01e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_resolved</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>aa2adf3fdb19aa6a07efb676ff268c40f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_resolved</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a458b6cc6375a8f5c2bf760077e0b060f</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_resolved</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>ad424bf606438858f2fa06b17da821d17</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_resolved</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a88c351869e95ecb7a6463b7ce2910fe5</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_resolved</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a3e9837594c91882ddc01300f86cad176</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_resolved</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a2426d2bc71271b66bf68eafa1f5660c7</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_resolved</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a9d0c12db69abbe0f21f4385a81433ae6</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_resolved</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a5947ebc8de68a320928d5daa496f8b31</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_out_resolved</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a3c5c31152ef969916310659f171a4471</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a8888cd7853c59a61fdd339ba360f5d06</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a6fe5ea20e9020d804a9c3b79a4faf62c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a3ac577ef8b16442eac2f2fc6854ba250</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>ad6553c217cbf9c432f990dd15e0251ed</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a2f679eac2e9f9e6ab1ce68051cf3470b</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a81627f63702afea34aae58313ea4936a</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>a7f1a2ec22d3cd20a2a236c29497975ff</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01489.html</anchorfile>
      <anchor>aadeb189e2c78cb1157606a4616c67642</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_out_rv</name>
    <filename>a01509.html</filename>
    <templarg>int W</templarg>
    <base>sc_core::sc_inout_rv&lt; W &gt;</base>
    <member kind="typedef">
      <type>sc_out_rv&lt; W &gt;</type>
      <name>this_type</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a16192da207ffb61b9775c49b6d67ad6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout_rv&lt; W &gt;</type>
      <name>base_type</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a9a4a0dd40363c67efb0764fe40258142</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>acf2530c13f0ca27def31c7f6a3c68640</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_if_type</type>
      <name>in_if_type</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a1172153aaa69de6fd34d38ed31fa56c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::in_port_type</type>
      <name>in_port_type</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a635991f237d0f521999371cd8efbe3b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_if_type</type>
      <name>inout_if_type</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>ac305531a63d8c3a91381eac25e595865</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::inout_port_type</type>
      <name>inout_port_type</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a9f1528f7c1aa00427f4f15a21cd93671</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_rv</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a030135d16023d8819135cb9dd38cab7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_rv</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a3ec4c674b4357990392e1bfd7155f5b3</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_rv</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>ab522ae2f591fb6318f512f11b5caa10e</anchor>
      <arglist>(inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_rv</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a793a9cc329342723f8cf210b85d25889</anchor>
      <arglist>(const char *name_, inout_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_rv</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a7fa2d4beb7ffdee5e4020a6a7629813e</anchor>
      <arglist>(inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_rv</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a23e8b68d6afc8d12758b469097c916f9</anchor>
      <arglist>(const char *name_, inout_port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_rv</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>aa3a04ad0a13ef3ea4f6ad3ea0804d02e</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_out_rv</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a7bb11244394dd7d6e0f8005d013e4621</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_out_rv</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>abafd81f0e9f16d833bac30198e5f14f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a64b086d1d60f6a6c380e39ddd226f2cc</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>aea340fe9dedc2bff27b9b648c450c37b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a6a638d77d8703cad21c31d7d7a82ed76</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>ad6553c217cbf9c432f990dd15e0251ed</anchor>
      <arglist>(const data_type &amp;value_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a2f679eac2e9f9e6ab1ce68051cf3470b</anchor>
      <arglist>(const in_if_type &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a81627f63702afea34aae58313ea4936a</anchor>
      <arglist>(const in_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a7f1a2ec22d3cd20a2a236c29497975ff</anchor>
      <arglist>(const inout_port_type &amp;port_)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>aadeb189e2c78cb1157606a4616c67642</anchor>
      <arglist>(const this_type &amp;port_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_pdhash</name>
    <filename>a02305.html</filename>
    <templarg>class K</templarg>
    <templarg>class C</templarg>
    <base>sc_core::sc_phash_base</base>
    <member kind="typedef">
      <type>sc_pdhash_iter&lt; K, C &gt;</type>
      <name>iterator</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>af6d01eadd9ccb4b632af3c1627b96895</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_pdhash</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>af53f0e18eb5d017445799b0d77aed83e</anchor>
      <arglist>(C def=(C) 0, int size=PHASH_DEFAULT_INIT_TABLE_SIZE, int density=PHASH_DEFAULT_MAX_DENSITY, double grow=PHASH_DEFAULT_GROW_FACTOR, bool reorder=PHASH_DEFAULT_REORDER_FLAG, hash_fn_t hash_fn=(hash_fn_t) 0, cmpr_fn_t cmpr_fn=(cmpr_fn_t) 0, void *(*kdup_fn)(const void *)=0, void(*kfree_fn)(void *)=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_pdhash</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>ab123195501d3f698b0b2688b4b35cf9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a8cb7b4e7e2193e8835215b8bed25e64e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a8fe5bf2c38cbf5440a6d839ded68e07e</anchor>
      <arglist>(const sc_pdhash&lt; K, C &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>acd678a1320e40c528a53674a5a37d29a</anchor>
      <arglist>(K k, C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a0cb3d9392fb5637db0df476caf0e19d5</anchor>
      <arglist>(K k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a64c750a00f26f2d0198f6061d3c82a5a</anchor>
      <arglist>(K k, C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>ac872f7b38df538ba5944a5763a2fd3c0</anchor>
      <arglist>(K k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a2523e480bd3fe552bd60e7ea512a4bf1</anchor>
      <arglist>(K k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a0368e9f550be66e42de8cdea53f0a8c6</anchor>
      <arglist>(K k, K *pk, C *pc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a15f607a8cff567ba1d30e8f8e421e4bd</anchor>
      <arglist>(C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a4b72c08ce75fa699b214aad9ab354ab0</anchor>
      <arglist>(bool(*predicate)(const void *, void *), void *arg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a3e8053dcac513d398666d21f892f95cb</anchor>
      <arglist>(K k, C *pc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>acd5516be4984482b55201c93dd2b03dd</anchor>
      <arglist>(K k) const</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>operator[]</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a19288a8186c064d1aa089847142561fb</anchor>
      <arglist>(K k) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_pdhash_iter&lt; K, C &gt;</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a359de6cc4ef5fb2ec5a2ca5e183c7334</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_pdhash_iter</name>
    <filename>a02285.html</filename>
    <templarg>class K</templarg>
    <templarg>class C</templarg>
    <base>sc_core::sc_phash_base_iter</base>
    <member kind="function">
      <type></type>
      <name>sc_pdhash_iter</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a99d5be2fac482ce6262438727d6a2934</anchor>
      <arglist>(sc_pdhash&lt; K, C &gt; *t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_pdhash_iter</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a1390f4f53d1f83de338a183d3414ca3c</anchor>
      <arglist>(sc_pdhash&lt; K, C &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_pdhash_iter</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a6361becde762edf21c2c66ad754b3193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a8075ffcbbd2a278fd294396878ddd483</anchor>
      <arglist>(sc_pdhash&lt; K, C &gt; *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a10ac3d6ad2b22bd83775015b405ea58c</anchor>
      <arglist>(sc_pdhash&lt; K, C &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a23f170a99f3063a7fcb4549648959c3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>K</type>
      <name>key</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a03e65ae12d8a0f9623949ed9ab2aa5b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>contents</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a31a1e50a728fcc88aa5275591b60253b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>set_contents</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a64d6958f1276c9273fb434a177979422</anchor>
      <arglist>(C c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_phash</name>
    <filename>a02301.html</filename>
    <templarg>class K</templarg>
    <templarg>class C</templarg>
    <base>sc_core::sc_phash_base</base>
    <member kind="typedef">
      <type>sc_phash_iter&lt; K, C &gt;</type>
      <name>iterator</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a03fd482143868631be2366989a39bdb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_phash</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>ab6937a3b63192f795c56e0dc71554419</anchor>
      <arglist>(C def=(C) 0, int size=PHASH_DEFAULT_INIT_TABLE_SIZE, int density=PHASH_DEFAULT_MAX_DENSITY, double grow=PHASH_DEFAULT_GROW_FACTOR, bool reorder=PHASH_DEFAULT_REORDER_FLAG, hash_fn_t hash_fn=default_ptr_hash_fn, cmpr_fn_t cmpr_fn=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_phash</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a3e67ecbbbab5e0cf3d330ba82e272ce8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a2c51a31e2277beb79246fd61ee757852</anchor>
      <arglist>(const sc_phash&lt; K, C &gt; *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a4de059258489c01b3d5863bfbd0cd1c9</anchor>
      <arglist>(const sc_phash&lt; K, C &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a36b5636343f668932ac16593840e3e8f</anchor>
      <arglist>(const sc_phash&lt; K, C &gt; &amp;b, void *(*kdup)(const void *), void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>adbdacd35f27ddbb1d459461703b113c2</anchor>
      <arglist>(K k, C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>ac3a5da105c944e1d920a855a882391c7</anchor>
      <arglist>(K k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>af548a0fd3deaab20045571ba9b7ec36b</anchor>
      <arglist>(K k, C c, void *(*kdup)(const void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>ab468962fb793693cbfea833b8ac374f7</anchor>
      <arglist>(K k, C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a3fb8aedb02a13f8d55bb55e3b8d81e3e</anchor>
      <arglist>(K k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a5f19ab6f4d46ff20f40e9c716d61fa4c</anchor>
      <arglist>(K k, C c, void *(*kdup)(const void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>af3a91d4b98ee91f552936a20501272b3</anchor>
      <arglist>(K k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a87d463c998073762348fa41954a9d08e</anchor>
      <arglist>(K k, K *pk, C *pc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a968681e0d0e81d578532b9cdeaa42ca2</anchor>
      <arglist>(K k, void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a28d617da62c3c107cff75b4d9107bb52</anchor>
      <arglist>(C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a4d76894c22064e8f92c885514b810f82</anchor>
      <arglist>(bool(*predicate)(const void *, void *), void *arg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a3c0c66bea7930bdaf3caf6490936fddf</anchor>
      <arglist>(const void *c, void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a9b8a99a412de96617e63955a609cb0f4</anchor>
      <arglist>(bool(*predicate)(const void *, void *), void *arg, void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a8c39e4641f779194e7444225f94563a6</anchor>
      <arglist>(K k, C *pc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a872a0b3233640198369891d63e475bf1</anchor>
      <arglist>(K k) const</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>operator[]</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a786503bdfc170b64c74b87b197ceeaf7</anchor>
      <arglist>(K k) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_phash_iter&lt; K, C &gt;</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a811283b5e65292839b362921ebd4d363</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_phash_base</name>
    <filename>a02289.html</filename>
    <member kind="typedef">
      <type>unsigned(*)</type>
      <name>hash_fn_t</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a26d2ac47f5063b29356c84831b9a4a03</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="typedef">
      <type>int(*)</type>
      <name>cmpr_fn_t</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>ab07f0af7347f3e2baf2186efccb5df59</anchor>
      <arglist>(const void *, const void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_phash_base</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a17331b21a19f165e0521610b5dfaa466</anchor>
      <arglist>(void *def=0, int size=PHASH_DEFAULT_INIT_TABLE_SIZE, int density=PHASH_DEFAULT_MAX_DENSITY, double grow=PHASH_DEFAULT_GROW_FACTOR, bool reorder=PHASH_DEFAULT_REORDER_FLAG, hash_fn_t hash_fn=default_ptr_hash_fn, cmpr_fn_t cmpr_fn=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_phash_base</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>ac8e300fb36097c0fcf27cefc36b52368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cmpr_fn</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>aa3f7f3bef4b089b91b5e4299dfb97deb</anchor>
      <arglist>(cmpr_fn_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_hash_fn</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>af98c51de3efc59d6027d1043f3679669</anchor>
      <arglist>(hash_fn_t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a57b665dd44b8cacb73582ace3b56a5c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>count</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>ae0d61f4aa469d86b1c78b8192830a56c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a80f2be9a2f2b77ce2c428dc935be991d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>abdbb49159df8b5b877961c9122bac9e5</anchor>
      <arglist>(void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>af9db74d4c750e099ce70f4c72abd959c</anchor>
      <arglist>(const sc_phash_base *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a04f9b49d7ed8fb1c3e3710d09c7e251c</anchor>
      <arglist>(const sc_phash_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a7c1703c2832e8face20f0cd94d57c64c</anchor>
      <arglist>(const sc_phash_base &amp;b, void *(*kdup)(const void *), void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a022a21748d8cd0974d3542660dc293a6</anchor>
      <arglist>(void *k, void *c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>af75909eef1d8dc9941bb9cd2dbdfd581</anchor>
      <arglist>(void *k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a8734a0185f81d4eb1b0fa0d284f91c82</anchor>
      <arglist>(void *k, void *c, void *(*kdup)(const void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>add2fea1e71b2c753ef8311c3200bc336</anchor>
      <arglist>(void *k, void *c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>ac9302b4acd958a7f1ec23df23c81e843</anchor>
      <arglist>(void *k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>acf1b94268fc4eca45fd472f663303f1c</anchor>
      <arglist>(void *k, void *c, void *(*kdup)(const void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a4454b5079837cb83d347a9294f2e4b2c</anchor>
      <arglist>(const void *k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>ab3932fde242498dacda232f22b9299bb</anchor>
      <arglist>(const void *k, void **pk, void **pc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>aedc7a7ff084d70cce8c8b01e0d4703f6</anchor>
      <arglist>(const void *k, void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>abd513cdedf9d49f24b210c801495aee5</anchor>
      <arglist>(const void *c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a113d533b097c597fca7c0af85a06b66d</anchor>
      <arglist>(bool(*predicate)(const void *, void *), void *arg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>ad7599cce2ebc22bc3278410ec7a9ed69</anchor>
      <arglist>(const void *c, void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>adba5faae9a836f2c77b2a3ec61d9ae7c</anchor>
      <arglist>(bool(*predicate)(const void *, void *), void *arg, void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a6a87a0ba9c3463ef310a4712f6a3b478</anchor>
      <arglist>(const void *k, void **pc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a9f9c0ff24c0117ad0a7ce743c39cd82f</anchor>
      <arglist>(const void *k) const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator[]</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a812014549d596a38939ef0f8981d1dd4</anchor>
      <arglist>(const void *key) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>rehash</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a6400e22ca66b43be5cc50ef46fc3cf37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>do_hash</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>ab1db3f6c3d577d591bdba097f069c7b5</anchor>
      <arglist>(const void *key) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_phash_elem *</type>
      <name>add_direct</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a1b97bfb8cf7ff89756a5d65f0de1034b</anchor>
      <arglist>(void *key, void *contents, unsigned hash_val)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_phash_elem *</type>
      <name>find_entry_c</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>ae149cd2651f92f27bcca73a1863c2ddd</anchor>
      <arglist>(unsigned hv, const void *k, sc_phash_elem ***plast)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_phash_elem *</type>
      <name>find_entry_q</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a9a235ef2e2b6be7792966272af93fce9</anchor>
      <arglist>(unsigned hv, const void *k, sc_phash_elem ***plast)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_phash_elem *</type>
      <name>find_entry</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a90efdb81098292439f2121ddaba049fd</anchor>
      <arglist>(unsigned hv, const void *k, sc_phash_elem ***plast=0) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>default_value</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a3bf8d404259c72d9cbe4081b27f46457</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_bins</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>aeced047ff0c2b5fd489e3c815cda2e27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_entries</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a0dd202991132db7e8e6d1e0f213bb51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>max_density</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>af66353cdf032339990242864ef0a3f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reorder_flag</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a9b8329a91c235660f0f2344bb84ab283</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>grow_factor</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a465bb4574cca3fdac0158ced4aec228d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_phash_elem **</type>
      <name>bins</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>ad1c4c2e20a04fbfec496a38ade6208dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>hash_fn_t</type>
      <name>hash</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>ab3bd8ab737e21a89cb8f1808d5c6c401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cmpr_fn_t</type>
      <name>cmpr</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a0584b2279e9ce71f58eb485e34ca4fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_phash_base_iter</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a3b247b2a01d8688d9b14aeb6ee58258a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_phash_base_iter</name>
    <filename>a02293.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>acdaedafcfdcf65968fd401118f41cd3e</anchor>
      <arglist>(sc_phash_base *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>af4cd507dcef212e1ffc5c1669407d9f5</anchor>
      <arglist>(sc_phash_base &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_phash_base_iter</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a62cd39e9f7df412dd7dca2753b00dc0e</anchor>
      <arglist>(sc_phash_base *t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_phash_base_iter</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a783cbee346e5dca6ef94438b2575cb24</anchor>
      <arglist>(sc_phash_base &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_phash_base_iter</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a33ddfe2de7658dbaaf5d002f971c8828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a399bac5574749fa0be12acdffc05d03e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>ad6e8c2f688b8608a07cc0e0d4f7d65f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a9ceb96715a9b9097886c2147351f8234</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a3c0db39735e794085dfc570857a17d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a962f0b2272f78441a06d6b1ea937c110</anchor>
      <arglist>(void(*kfree)(void *))</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>key</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>ab3d8601efd7ced72e14d692b1a42be41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>contents</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>adc6002d8cd2f5009f6fd77745b2be8f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>set_contents</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a8ec124a9ab629f6a75feb432f09f4398</anchor>
      <arglist>(void *c)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_phash_base *</type>
      <name>table</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a9fa1ba9941ef88363c1e534c50ed0a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_phash_elem *</type>
      <name>entry</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a2ce19ca73151bf6ce7fd70acf39621cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_phash_elem *</type>
      <name>next</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a047e21a9c119827e8981e78e858c8eb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_phash_elem **</type>
      <name>last</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>ae1c1d3acb8e059649d6cf59238dab68f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>index</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>acc4c15105fab4ddddaf2c45e5a3349e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_phash_iter</name>
    <filename>a02297.html</filename>
    <templarg>class K</templarg>
    <templarg>class C</templarg>
    <base>sc_core::sc_phash_base_iter</base>
    <member kind="function">
      <type></type>
      <name>sc_phash_iter</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a9d82a92d8f6291cb293b09849a69aa1f</anchor>
      <arglist>(sc_phash&lt; K, C &gt; *t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_phash_iter</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>afa11466971a40470e09811c0d4043146</anchor>
      <arglist>(sc_phash&lt; K, C &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_phash_iter</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ae9051d1346f16ade55427dab9b20099b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a4a1e91f817ba775560e87f55f39bcfe4</anchor>
      <arglist>(sc_phash&lt; K, C &gt; *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>aa1eec14398d12da7f238ceb9876e87ce</anchor>
      <arglist>(sc_phash&lt; K, C &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>K</type>
      <name>key</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a876a2975c3ce86328f5e192e2d42e3e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>contents</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a40843bcbe52f22ad6ba6abcd68fe4d51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>set_contents</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>afdbea54bab8f9a31e2add3c7b7a0b96c</anchor>
      <arglist>(C c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_plist</name>
    <filename>a02201.html</filename>
    <templarg>class T</templarg>
    <base>sc_core::sc_plist_base</base>
    <member kind="typedef">
      <type>sc_plist_iter&lt; T &gt;</type>
      <name>iterator</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a6aca20a87b9dc0bcc5be40d373760758</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_plist</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a2ea4609f75bf12877d2ca4992471b520</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_plist</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a2d003de584c0f703471e8bb7a8da6b68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>push_back</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a83b915e0553f88d11a4726a011ee4dea</anchor>
      <arglist>(T d)</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>push_front</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a848632a67589902341b561e401b386be</anchor>
      <arglist>(T d)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_back</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a0bc527b45a0e5be7d2588c603e16e717</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop_front</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a38b9ca911c1a3a4a37bbe76aafe8254e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>insert_before</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a50d77410ef290b06779a31803bb537ce</anchor>
      <arglist>(handle_t h, T d)</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>insert_after</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a5fe41780153382a60597cb773db4ed24</anchor>
      <arglist>(handle_t h, T d)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>remove</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>ac43a30a604ca9ec83e8c8173cb6a9342</anchor>
      <arglist>(handle_t h)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a7f1b47eba80a1581f64b002d08fc917a</anchor>
      <arglist>(handle_t h) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a28a079ad988963d878263cb87b0213a9</anchor>
      <arglist>(handle_t h, T d)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>front</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>aedf1f401f0cd7cd20c5d90e5f24870f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>back</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>a46190692516bef9514ea0c1c22df0d5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_plist_iter&lt; T &gt;</name>
      <anchorfile>a02201.html</anchorfile>
      <anchor>afa209fe8e911045dd397d52a948f99c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_plist_base</name>
    <filename>a02321.html</filename>
    <member kind="typedef">
      <type>sc_plist_elem *</type>
      <name>handle_t</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>aee2a58030e6a6a402e7ad237dbb6f6c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_plist_base</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>ad0ae7c2d6ca7f62517f424f92b0f353d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_plist_base</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a1bdecfbd0dd4fd1be8d8de36afa5da9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>push_back</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a2c2be0f99f988e934608a9339bea19d9</anchor>
      <arglist>(void *d)</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>push_front</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a70dbf8b386f49946f148bae7c52150eb</anchor>
      <arglist>(void *d)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>pop_back</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a685b2ed46055284db392c293b7302aba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>pop_front</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a7e26b00796047396f1bae455a8e91b8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>insert_before</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a3c68920892a691afd39e85b00b121a26</anchor>
      <arglist>(handle_t h, void *d)</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>insert_after</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a06997a69a3377f70b25800aa96483d28</anchor>
      <arglist>(handle_t h, void *d)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>remove</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>aff2fb8102c763a042719d5cce137861f</anchor>
      <arglist>(handle_t h)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a47b3e4566ac05abb7ea68618e48176a1</anchor>
      <arglist>(handle_t h) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a9557f192f03b5a013f44e526db2e874a</anchor>
      <arglist>(handle_t h, void *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapcar</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a4d5c8ae4c17e62a662ac2d1b801fa8d7</anchor>
      <arglist>(sc_plist_map_fn f, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>front</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a93023a40b5a040b6aaa239fda23ea7d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>back</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a59152b2a65432782d32f29fddb943feb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase_all</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>ae96ae66effa5ae111724ac5a102ebdba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>ad78ed8fb4ca02092e647d38b490cba47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>aec491c2294f290f166c87fa2858380d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_plist_base_iter</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a97047803f54e70a6ec8664f10afc43bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_plist_base_iter</name>
    <filename>a02325.html</filename>
    <member kind="typedef">
      <type>sc_plist_elem *</type>
      <name>handle_t</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>a992a851bd4667aeaf959f54347e6d235</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_plist_base_iter</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>a16ea04a8a44a8f757f2347dd8ca8dc35</anchor>
      <arglist>(sc_plist_base *l, bool from_tail=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_plist_base_iter</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>ada240dce0ff66ea1e8a82022ee79a1c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>a7739c0e2f32670497e09af2849c06073</anchor>
      <arglist>(sc_plist_base *l, bool from_tail=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>a84f5d3e1126ae29a608ff7714af31535</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>a2482647530779ce31fd962346d52ee38</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator--</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>a77eb26c6fdaa46fac35c03deb87ae904</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>a79185da979f95deb6c6db7fc44b06fe7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>a67b239a365fd480fd48bddac451ae86a</anchor>
      <arglist>(void *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>a896674804d288b06e71cbc3d978e6c2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>ab24dde879b11e45a8c0844ef16f172b2</anchor>
      <arglist>(int direction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_handle</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>a5920701fa6b8b38eab20618b5db45553</anchor>
      <arglist>(handle_t h)</arglist>
    </member>
    <member kind="function">
      <type>handle_t</type>
      <name>get_handle</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>ac62642550c9ca1ef2b7c3b09daf1d9ca</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_plist_iter</name>
    <filename>a02317.html</filename>
    <templarg>class T</templarg>
    <base>sc_core::sc_plist_base_iter</base>
    <member kind="function">
      <type></type>
      <name>sc_plist_iter</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a9e7bd44e5f0d2b500a6bc6917df9e697</anchor>
      <arglist>(sc_plist&lt; T &gt; *l, bool from_tail=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_plist_iter</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a0dd435b0c913165e93302a9314441dd8</anchor>
      <arglist>(sc_plist&lt; T &gt; &amp;l, bool from_tail=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_plist_iter</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a1ff33733a48d03cb5db0414a36f10625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a6ce5631c8e155002f8286d099d0111f2</anchor>
      <arglist>(sc_plist&lt; T &gt; *l, bool from_tail=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a1106e475e5d6a865ee5ae45db89d2d18</anchor>
      <arglist>(sc_plist&lt; T &gt; &amp;l, bool from_tail=false)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a03ce911e8392844b7d18c1513fce135a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a9a655c058dd5a6218d9fa1861635e80d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a08622141232a796204065a033bfcaef6</anchor>
      <arglist>(T d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_port</name>
    <filename>a01385.html</filename>
    <templarg>class IF</templarg>
    <templarg>int N</templarg>
    <templarg>sc_port_policy P</templarg>
    <base>sc_core::sc_port_b&lt; IF &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>a5d5899d71f4b216585ef575d3ba248e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>aae2c9e3615c8deb2dd920a6bc40b08f6</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>a9c73c08ae2a2b0202068ab4b057bfff4</anchor>
      <arglist>(IF &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>a40e00d99862a802c41d03ee21bbf584f</anchor>
      <arglist>(const char *name_, IF &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>a319319fb574eebe704360721eac2c068</anchor>
      <arglist>(base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>afc783861f40f24b01ca82b47cbfb14b2</anchor>
      <arglist>(const char *name_, base_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>a1ed164b1004e278a406559a51effa3ca</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_port</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>a0a4aea5992c1e325612f225d77743335</anchor>
      <arglist>(const char *name_, this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>a05ed24ccefa54ef482f24285caa6f1ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>a0e9d914574014b8faed3e8f12b2d9f3a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_port_b</name>
    <filename>a01381.html</filename>
    <templarg>class IF</templarg>
    <base>sc_core::sc_port_base</base>
    <member kind="typedef">
      <type>sc_port_base</type>
      <name>base_type</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a0c10b80dd7fec8bdd01c58e9e497ab13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port_b&lt; IF &gt;</type>
      <name>this_type</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a2be58af885163063ab4dbc8bdc80c287</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>this_type</type>
      <name>port_type</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ac3b6075b8a210e7e01f5cb998d4cadbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ac0f3488562305403b5688bb99116e81e</anchor>
      <arglist>(IF &amp;interface_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>aaadb0a30f3d3760dbe02ffe7ff7bb2f9</anchor>
      <arglist>(IF &amp;interface_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>af4be4eba763265dbe0a795b7d14cb703</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a4bb01c2a2ce925e91069fbe9f733091c</anchor>
      <arglist>(port_type &amp;parent_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a90b19c6a12abb609b80dff024b991526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IF *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a19f1c46c4ab383654369c8b9654b7745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IF *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a67faacb13ed075b79fbc51633f1f1437</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IF *</type>
      <name>get_interface</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a9a14346a0fc16a6cdc18513c46c14d2d</anchor>
      <arglist>(int iface_i) const</arglist>
    </member>
    <member kind="function">
      <type>IF *</type>
      <name>get_interface</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ab0fd6b672c20d321f5848acb7601f5a3</anchor>
      <arglist>(int iface_i)</arglist>
    </member>
    <member kind="function">
      <type>IF *</type>
      <name>operator[]</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a8e23ab2bef0c0ddc12a0b59c942a3c0e</anchor>
      <arglist>(int index_)</arglist>
    </member>
    <member kind="function">
      <type>const IF *</type>
      <name>operator[]</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ad955409cd413959ea3060b0ed86f2d27</anchor>
      <arglist>(int index_) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a01fc6f573d40f47a969b905f8bf7f548</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a7bff29f3e1be405f7b4f0a398c07f969</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::type_index</type>
      <name>get_interface_type</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a9a068e2026b4c62b8a1cc35e34c236dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a0d86878f1170c7db006778082535906a</anchor>
      <arglist>(int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_b</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a7c1c20d80257de1e0d282cb2cfe298df</anchor>
      <arglist>(const char *name_, int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port_b</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a7bd4000f6457ef6c6a8c7b6073d7e71b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a6b530248b9c4ca08da914b0f9b70c072</anchor>
      <arglist>(sc_interface &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>aaf4a3b72b61e007e45e196320a2c9069</anchor>
      <arglist>(sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a7b52ca906e645869c91f57b328989f8f</anchor>
      <arglist>(sc_thread_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a36298239f77fd864ec73c744161ef3f2</anchor>
      <arglist>(sc_method_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ad3d4027e6ef16484903fcd92f865519d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_neg</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a98963a9ab02b155f3cb5061dcdbbb1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_sensitive_pos</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a83751c37d469e63b83c9a1e209b7319b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_port_base</name>
    <filename>a01373.html</filename>
    <base>sc_core::sc_object</base>
    <member kind="typedef">
      <type>sc_port_base</type>
      <name>this_type</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>ab30546f89a264c8a3d727f5ca688ce88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bind_count</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a6448d53a209be65590b26e0547516aec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a2964e45fdfc6ac85ba3f475c85fb2b55</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_interface *</type>
      <name>get_interface</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a9e71ebfd7731cb60e651b3c1dd099b88</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>af14fd5f55b0a38ff984503bbf32cfeef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::type_index</type>
      <name>get_interface_type</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>af09829efc83b77d44c64c97a949239bf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_base</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a49a2335e1b3f7058c1f9445151874d1e</anchor>
      <arglist>(int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_port_base</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a2128f4445171e7625633365906ab012c</anchor>
      <arglist>(const char *name_, int max_size_, sc_port_policy policy=SC_ONE_OR_MORE_BOUND)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_port_base</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a2b8424bc3b800e4ed426183fbbdb0d41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bind</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a0684ec254aaf508e1a265521e2adf489</anchor>
      <arglist>(sc_interface &amp;interface_)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bind</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>ad223e4f31a0d17731a7bc60423731ae0</anchor>
      <arglist>(this_type &amp;parent_)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>ad48a2a91e5064dc5d5b733e7641db561</anchor>
      <arglist>(sc_interface &amp;)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>vbind</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a5c3b274e098183ded49dddee80a60faa</anchor>
      <arglist>(sc_port_base &amp;)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>before_end_of_elaboration</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>abd3794439fb67b489a57b95925c78a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a6de92b3f34b64c853599c40d5a42a15a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>start_of_simulation</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a262b9ec042009301a6a170b8258245e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_simulation</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>aec39c7c931426fc6a5c4bb602e6a540c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_error</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a73bc9bb3eb8b6c58ac783394ff788b4a</anchor>
      <arglist>(const char *id, const char *add_msg=0) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a9c60712c746ae37b2894b34c82d6e35f</anchor>
      <arglist>(sc_thread_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_sensitive</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a0077d5f3de15998cb0877bf117061b04</anchor>
      <arglist>(sc_method_handle, sc_event_finder *=0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_static_event</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a59308809e967032b25e99964d39dfcb9</anchor>
      <arglist>(sc_method_handle process_p, const sc_event &amp;event) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_static_event</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>ae7f97fa6790c6ee01c6fedc56f52d404</anchor>
      <arglist>(sc_thread_handle process_p, const sc_event &amp;event) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_bind_info *</type>
      <name>m_bind_info</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>aa8b1c991b599ac1fed5bdf1898ff51e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_port_registry</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a9db64b27e3fa59526834c1244e6f20a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>ad3d4027e6ef16484903fcd92f865519d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive_pos</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a83751c37d469e63b83c9a1e209b7319b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive_neg</name>
      <anchorfile>a01373.html</anchorfile>
      <anchor>a98963a9ab02b155f3cb5061dcdbbb1b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_port_registry</name>
    <filename>a01377.html</filename>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a01377.html</anchorfile>
      <anchor>a1af868ebb6e09f2b8443b2edf88d717c</anchor>
      <arglist>(sc_port_base *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a01377.html</anchorfile>
      <anchor>adbe317941a71ec3c566fd6d80065336c</anchor>
      <arglist>(sc_port_base *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01377.html</anchorfile>
      <anchor>a0d250524bdea70168d8fe3a37597b1f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01377.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_ppq</name>
    <filename>a02341.html</filename>
    <templarg>class T</templarg>
    <base>sc_core::sc_ppq_base</base>
    <member kind="function">
      <type></type>
      <name>sc_ppq</name>
      <anchorfile>a02341.html</anchorfile>
      <anchor>ac5fd697aa3ab3d353a4865d6e0f53d34</anchor>
      <arglist>(int sz, compare_fn_t cmp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_ppq</name>
      <anchorfile>a02341.html</anchorfile>
      <anchor>a8254cbd10295e7292a30f926da429b6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>top</name>
      <anchorfile>a02341.html</anchorfile>
      <anchor>aaf588c32eaf57b5a5909751b8dd4d631</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>extract_top</name>
      <anchorfile>a02341.html</anchorfile>
      <anchor>a00046bb25feaee6cf4ab998b4f67e72d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a02341.html</anchorfile>
      <anchor>a3d3927372c5147a90fe458caab47f6ae</anchor>
      <arglist>(T elem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_ppq_base</name>
    <filename>a02337.html</filename>
    <member kind="typedef">
      <type>int(*)</type>
      <name>compare_fn_t</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a6918f47e50c1fe44f514b3243d73f1a9</anchor>
      <arglist>(const void *, const void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ppq_base</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a836b130b15ff89dfe7cdb6573060b6a0</anchor>
      <arglist>(int sz, compare_fn_t cmp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_ppq_base</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a71f0c739165fa19b7dcf2d8ad916c823</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>top</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a11bacdb64286e6dea81a8f16da103e48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>extract_top</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a3088e9c7f6961ab02234c1631391e7b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a04e569f8e749cd238d737c1b240681aa</anchor>
      <arglist>(void *elem)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>ab83bdde9aaf0a6239bbf4f2851f2d6a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a698165e4ec86672d1e01592afaf8b30c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>parent</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a2a04c0deb463c52ca79a0b27b22f3d45</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>left</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>ae17a1bae1dcc3c0dafd6f09229920754</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>right</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>aa73bd99ab0d624dd4bae78714e439c69</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>heapify</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a62a817ad4499fa1a41bceb2c5ca98125</anchor>
      <arglist>(int i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_prim_channel</name>
    <filename>a01389.html</filename>
    <base>sc_core::sc_object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a3b1a03be298787b6bfb895545b20268c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update_requested</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a08bb4a2536b7867fc9b07f0a8f6b354c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_update</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a4425be1df41342d34b811c9c4a311fd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_request_update</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>aaea343cfd39a55513dde1375ed2c8118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_prim_channel</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a6fcd8df8c99a6d18e108f64fa9a9f5db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_prim_channel</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a9465234b60ef3146f3cebc12e9a586df</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_prim_channel</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>afc20ff476e6bc68c2f86e5792c88f109</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>aa5424bdf12aa3eccc5060b49d49ba506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>before_end_of_elaboration</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a2916851247ca5443c3224fa138173778</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_elaboration</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a9c28aaa7c9a510eec74317a9ed7763b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>start_of_simulation</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>abe01cf8288a6acfb6975dbef9066f8a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>end_of_simulation</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>acf81d9d475c7295773f47a16ddab3ae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>async_attach_suspending</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>acf7e15787bcbd69372ca7aa3e0078850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>async_detach_suspending</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>ab6ae5db1b5bf50bcf62379ebd4bcc5b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>aeb8ce70dffbe186c2e37652fe6d59999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a8e7b39bf540586a4d286f0c4b07dea75</anchor>
      <arglist>(const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a035a8cb75b6edcc4602260de793cefa4</anchor>
      <arglist>(const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a83926c0f35246426d0f6e1914e362ab7</anchor>
      <arglist>(const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a360e61ef1933e8b10c9f61dd6d45cfae</anchor>
      <arglist>(const sc_time &amp;t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a7022637b4de91cbb0329379a8c157461</anchor>
      <arglist>(double v, sc_time_unit tu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a7a61ceed5f74611adbb39955495473e6</anchor>
      <arglist>(const sc_time &amp;t, const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a690bce7b736d29a7a66ef53e9770060e</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>abf05eb0b0696113f67adf9c0f10d7733</anchor>
      <arglist>(const sc_time &amp;t, const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a53d9324845443071624132a5cef84459</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a5b47eff8cb19f7dc1d6ac334c1e02504</anchor>
      <arglist>(const sc_time &amp;t, const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a4a9f326f5e38302abd32f182135f9750</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a1c4072e95784e0275244b4edc3423173</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a000afa996b27f83657ac6daa127fe319</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a5b88ce5a56c6342af86f5dbac155a17c</anchor>
      <arglist>(const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>adbafeb3d82b376553efbc17bd19a0bf3</anchor>
      <arglist>(const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a44006b03ef93f3326ce33a8cc54803e0</anchor>
      <arglist>(const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a7175e06de7a76d2e281c260777c13f4b</anchor>
      <arglist>(const sc_time &amp;t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a28887573a11769d42f4f3cd380a6b2f6</anchor>
      <arglist>(double v, sc_time_unit tu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a10ac850f2250024198491b12bf9ab7a2</anchor>
      <arglist>(const sc_time &amp;t, const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a3ddbdae049a5f7f32c92fb6664f01ae2</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event &amp;e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>af1a55774a522f3419b03faf6aaf86fbf</anchor>
      <arglist>(const sc_time &amp;t, const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>add2b9a5b6fdd4afee6ea89d930a514e7</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_or_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a36c1b2c186cef9c979e702fa00992aa5</anchor>
      <arglist>(const sc_time &amp;t, const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a3b99e3ff7af74a44460a4e529f225621</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_and_list &amp;el)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>timed_out</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a716213487640ac313243d19b6238adc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_prim_channel_registry</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>aa55374e55a96f357791338986acafa36</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_stub_registry</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>aa698ebc65a5063fc5cadfbc56e9c1faf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_prim_channel_registry</name>
    <filename>a01393.html</filename>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ab8b541ceb7a22b96967947f083a6efff</anchor>
      <arglist>(sc_prim_channel &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a84b6065e1b779945f8aecd86aea487ac</anchor>
      <arglist>(sc_prim_channel &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae02323d80e37562f525661860ef6798d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_update</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a3a3e2974d04c5f05e0e2223421701483</anchor>
      <arglist>(sc_prim_channel &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_request_update</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a3c5284e4a925a2aa52799be12b869607</anchor>
      <arglist>(sc_prim_channel &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pending_updates</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a6c6735a2f0e08b7aa30bf8232bd54535</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pending_async_updates</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a019be8c4398bb609b2fca927b4fd4721</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>async_suspend</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a84edad2f0e5c8b8f7cbefb5df3cf80d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_attach_suspending</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a68a183e18449986af415e67df975a79a</anchor>
      <arglist>(sc_prim_channel &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_detach_suspending</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a5e6ae3fa33a8a6281ba375a471dcd179</anchor>
      <arglist>(sc_prim_channel &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_process_b</name>
    <filename>a02157.html</filename>
    <base>sc_core::sc_object_host</base>
    <member kind="enumeration">
      <type></type>
      <name>process_throw_type</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_NONE</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a24a72304587d661b4324884a702e56c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_KILL</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a288ddd2ebc117b8e3efa8f499e018bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_USER</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a209bb27e361a60f551c3f557b111efa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_ASYNC_RESET</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a97b12fe9ed7373e18fa66ffd1ec9f988</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_SYNC_RESET</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a9b3ad2c20e1c611bfe214298f7b0dfbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>process_state</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_bit_disabled</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443a88e7de4bbbf33d9ae67354e37cee18b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_bit_ready_to_run</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443a75f72f390a3b933df53f86db821ef0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_bit_suspended</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443a2f163c7d80598bf4bbf2a9977dfbfae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_bit_zombie</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443a60229a842a99b0f2f7d9fab83b3970d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_normal</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443ad84a00d0fe477e398bab774b271020e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>reset_type</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aa3a79eb27dadbc8055524c8b73b1b051</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>reset_asynchronous</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aa3a79eb27dadbc8055524c8b73b1b051acf19c7930f6a21b901212fd682cd7ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>reset_synchronous_off</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aa3a79eb27dadbc8055524c8b73b1b051a55516b1601564ba08fe50a9d951e12e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>reset_synchronous_on</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aa3a79eb27dadbc8055524c8b73b1b051a26d9c9e8590b76f26a91b642a1aff629</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>trigger_t</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATIC</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a6bbcc4d4c50193b508e8e81659d3afd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EVENT</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a39f7f9f3dc00e458831624140be5d8b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OR_LIST</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94ae404ac4285d683c40788def820a0821d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AND_LIST</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a2f3564efd6df3306ff53c71913f20b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMEOUT</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94adc22a2642d2d0f5812012a8cc92d8880</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EVENT_TIMEOUT</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a72d68be29f9bbc26877861cde8d2717b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OR_LIST_TIMEOUT</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a76edaf79319541b19bae3d6132cd31c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AND_LIST_TIMEOUT</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a2f6c6abccadfc5bda6b9ba0f3b00dc4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_NONE</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a24a72304587d661b4324884a702e56c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_KILL</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a288ddd2ebc117b8e3efa8f499e018bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_USER</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a209bb27e361a60f551c3f557b111efa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_ASYNC_RESET</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a97b12fe9ed7373e18fa66ffd1ec9f988</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THROW_SYNC_RESET</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac09c2c06a786f9911d58ad3515137784a9b3ad2c20e1c611bfe214298f7b0dfbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_bit_disabled</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443a88e7de4bbbf33d9ae67354e37cee18b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_bit_ready_to_run</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443a75f72f390a3b933df53f86db821ef0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_bit_suspended</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443a2f163c7d80598bf4bbf2a9977dfbfae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_bit_zombie</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443a60229a842a99b0f2f7d9fab83b3970d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ps_normal</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a2933596250177f33a0a637caec05c443ad84a00d0fe477e398bab774b271020e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>reset_asynchronous</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aa3a79eb27dadbc8055524c8b73b1b051acf19c7930f6a21b901212fd682cd7ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>reset_synchronous_off</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aa3a79eb27dadbc8055524c8b73b1b051a55516b1601564ba08fe50a9d951e12e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>reset_synchronous_on</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aa3a79eb27dadbc8055524c8b73b1b051a26d9c9e8590b76f26a91b642a1aff629</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATIC</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a6bbcc4d4c50193b508e8e81659d3afd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EVENT</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a39f7f9f3dc00e458831624140be5d8b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OR_LIST</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94ae404ac4285d683c40788def820a0821d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AND_LIST</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a2f3564efd6df3306ff53c71913f20b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMEOUT</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94adc22a2642d2d0f5812012a8cc92d8880</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EVENT_TIMEOUT</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a72d68be29f9bbc26877861cde8d2717b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OR_LIST_TIMEOUT</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a76edaf79319541b19bae3d6132cd31c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AND_LIST_TIMEOUT</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aed728eb97299bc2cc355d521245e5a94a2f6c6abccadfc5bda6b9ba0f3b00dc4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_process_b</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a068ef7a3f787a043d7a0f2d412094568</anchor>
      <arglist>(const char *name_p, bool is_thread, bool free_host, sc_entry_func method_p, sc_process_host *host_p, const sc_spawn_options *opt_p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>current_state</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a48098896b8b1c430ff9024d00bfd436b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dont_initialize</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a0dce3ee99b471e48d1962c8c10fed46d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dont_initialize</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a448f38c460ba68fc76b80f18cf4d15de</anchor>
      <arglist>(bool dont)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dump_state</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a0e61baf80f9b2a1d02321b4e135ab506</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_curr_proc_kind</type>
      <name>proc_kind</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a95564aa2085d052b96b6df248977dca9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event &amp;</type>
      <name>reset_event</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac334a6ad8ff09f628a7fb51c1be20477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_event &amp;</type>
      <name>terminated_event</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a114dad1904c124e221a1010548ebb6e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_process_handle</type>
      <name>last_created_process_handle</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ab8442fb6c17ad5f72f7177d4beb286c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>file</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a99cc428f873fa6470a210f92a19098c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lineno</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a3484e4adfe2f43e2115929f2798f90fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>proc_id</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a5d0b56fd49755c938b8ffcd4c7e1097e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>spawn_t</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>abb492afddf95c95018a2c048de36eb3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SPAWN_ELAB</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>abb492afddf95c95018a2c048de36eb3ca73aa4e07d44b5646d12abc42f85816cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SPAWN_START</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>abb492afddf95c95018a2c048de36eb3caa00663aea0d393d9b2d8dff1f5473f84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SPAWN_SIM</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>abb492afddf95c95018a2c048de36eb3ca6df4da73d5e041b540b756b92bfcafd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SPAWN_ELAB</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>abb492afddf95c95018a2c048de36eb3ca73aa4e07d44b5646d12abc42f85816cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SPAWN_START</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>abb492afddf95c95018a2c048de36eb3caa00663aea0d393d9b2d8dff1f5473f84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SPAWN_SIM</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>abb492afddf95c95018a2c048de36eb3ca6df4da73d5e041b540b756b92bfcafd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_process_b</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac68384ab1922dcde59aaf5f8ac9ff658</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>add_child_object</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aada14415b9be5b1b9beb4ed97a32742d</anchor>
      <arglist>(sc_object *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>add_child_event</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a5ab845befc8804dcb3d5335297332178</anchor>
      <arglist>(sc_event *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove_child_object</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ab9490244d3a43726e0240cfe12884830</anchor>
      <arglist>(sc_object *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove_child_event</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a8d9bcdc9c54ba023400a5e6423cab398</anchor>
      <arglist>(sc_event *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_static_event</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a80d59feeb38b0a14f9fbd346421ae623</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>dynamic</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a0d27ce850ad0424b4f4deb48ce703ada</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_report *</type>
      <name>get_last_report</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a242cd808867a7891789ae624efbb25cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>is_disabled</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a7daed93e35a4d436b18ac65d2f51d617</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>is_runnable</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>af19238d335e3cd528f5a7538822bff6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_dynamic_events</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a93cedc4e538aac20e8f2584324b229aa</anchor>
      <arglist>(bool skip_timeout=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_static_events</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a8471138d3ba14870baa08058e2a08ef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_last_report</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ad7004d9c622d35af3dc6107abe42c681</anchor>
      <arglist>(sc_report *last_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>timed_out</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ab07cfef3b264ac72941da8ced3106179</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_error</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a03a0d91a60d6ea6d5c8962cf1d13d1d6</anchor>
      <arglist>(const char *msgid, const char *msg=&quot;&quot;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_immediate_self_notification</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a1d1f0368e0a934d5e71eb75043ecbc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>disable_process</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a914dda3b1ff60d903cfd6dcd9be3cb5c</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>disconnect_process</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a0c9280a028ff6e61ec2f83b94b75d535</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>enable_process</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a254aa9cade9b3e2845d7e3e409889bd2</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initially_in_reset</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a3fd75df28f38539e7266f2988e6a54af</anchor>
      <arglist>(bool async)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>is_unwinding</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aba04382da34bacfdb87754205a33bdb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>start_unwinding</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aec1fd9e4a80f0f70869a099750e9f682</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>clear_unwinding</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a35cb7dad0a07d594dfcb6c5532e15b16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>kill_process</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a2a9a00ef1f025ef141757d380179ac71</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_changed</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ae2fcac32f0933252105660eabe2e01ec</anchor>
      <arglist>(bool async, bool asserted)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_process</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a7e4b14f8600d9137187b5a9f4e9eb0ee</anchor>
      <arglist>(reset_type rt, sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>resume_process</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a217f211da141b960f239cb77c0e42e2e</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>suspend_process</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a9839b7477d47f1d32fcf0601fe9abb11</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>throw_user</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aa431865a79cdf51b1c19a8da4a4423a0</anchor>
      <arglist>(const sc_throw_it_helper &amp;helper, sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>throw_reset</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a4ec15bb1d268eb5310c6081f817abeb9</anchor>
      <arglist>(bool async)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>terminated</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a76e434c6e5ac898ac1f6e8584f25508f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trigger_reset_event</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aa5b7d4f76c359440b370b4962427ee5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>semantics</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aacccc829d67e9b6b9892a5446530e343</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static sc_process_b *</type>
      <name>last_created_process_base</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a598fbf04facff586e0c743d007bd9cc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_active_areset_n</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a11b3d6abee08c4193a82800496c3f770</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_active_reset_n</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a6b933e4ff7ebfa245069cb79e3bc2788</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_dont_init</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a4bba193dd9f42734a0bf18e694464c9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>spawn_t</type>
      <name>m_dynamic_proc</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a713952890dc059af03e3b0943496316f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const sc_event *</type>
      <name>m_event_p</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>acd2ccfa88438085032b72d154ea6c733</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_event_count</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aa06f8822ecee9661a4558f165915060b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const sc_event_list *</type>
      <name>m_event_list_p</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a6d6e55ba572b77c74dc9999946a5b9e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_process_b *</type>
      <name>m_exist_p</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ab816e15feece55ddbda9dbc46cbd6659</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_free_host</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ad2c393784246e910cda401a479b0ee13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_has_reset_signal</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a70c3c7de06e5a03b39052f17c4dd9207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_has_stack</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a9290049f92d92b2cd8669cabd0f2359c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_is_thread</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a52f7ec996a79e50038b84c085c9d6975</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_report *</type>
      <name>m_last_report_p</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a00d61b089792b1bb93e5866c8067014a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_curr_proc_kind</type>
      <name>m_process_kind</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>af40bf45d91c9766c3582f8a5aa8aa0c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_references_n</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aaef110083edfc73e241617a1b5e5fb4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_reset * &gt;</type>
      <name>m_resets</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ad2f2018f471252b6cb453dd95ffd5ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_reset_event_p</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a1c8ef5a4fb1d603649d1dbe6e3188848</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_resume_event_p</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a14c3baa00f8759d75c35fee61f612210</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_process_b *</type>
      <name>m_runnable_p</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a4090b13b42cd1259d2b40867a1ca5855</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_process_host *</type>
      <name>m_semantics_host_p</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aded7ad046c6039c7aa86240cd50eb418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_entry_func</type>
      <name>m_semantics_method_p</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a7b2d86c793245291649ea4fb2e827172</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_state</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a3a7c616f6590f84df9caff51ef47ab29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const sc_event * &gt;</type>
      <name>m_static_events</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>afa69a0ea561f83794f7a22e0278fae1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_sticky_reset</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a04b6f76ef03e8092d0d1510934a757dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_term_event_p</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a3ec8bdaa79ba3c4e9e04fb4d8aeaba09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_throw_it_helper *</type>
      <name>m_throw_helper_p</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a738d6e9f16a1650d015651c307c2d99e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>process_throw_type</type>
      <name>m_throw_status</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a5eb7fe7c88ba1de299071e9dec2ea02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_timed_out</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a8e21c84fe49e911a4f2fbe76e98d5e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_timeout_event_p</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a7a4fb73508cd06832780de9b4ce1ea9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>trigger_t</type>
      <name>m_trigger_type</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a35a19ed7e35d33ea77db5042c98f9ce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_unwinding</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a17bd4b253de298fb1694a6100b5d3230</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_unsuspendable</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aa8372f7f3a5e7311024bd0e3e9a90528</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_suspend_all_req</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aa5f4026a29791841812069773d194c20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_process_b *</type>
      <name>m_last_created_process_p</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a48edb38a4b7e32433804933444cabd5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_cthread_process</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>af2c9e96bc0fe4f99c3fdbf18a3965fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_handle</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a4a61fb98d9d86beda7cf6016f55d01ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_table</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a12ba92f261d993145709693ea4466b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>abe316699185dd3108ba952d356e513e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_port_base</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac16572a975a3185797ffbd9f318470fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_runnable</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a7daf768cb0d25e9950151ec7079decbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ad3d4027e6ef16484903fcd92f865519d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive_pos</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a83751c37d469e63b83c9a1e209b7319b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive_neg</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a98963a9ab02b155f3cb5061dcdbbb1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_report_handler</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aaba7034cfa93e6c1a3e2f1e9e57f9b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_reset</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a459c3ab69abfc8912c9261f7dc0719dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_reset_finder</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>af692216008e752352d2831cd7c62e7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unwind_exception</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aa82b5a44736cfa6eae577e422fe1da51</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API sc_process_handle</type>
      <name>sc_get_current_process_handle</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aaa33df6397450db8f31f649e60e2eab2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a285a9415d730026b6e9477982147ba11</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API bool</type>
      <name>timed_out</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aafa7fdbbf385182abbd6036ffbabbfcd</anchor>
      <arglist>(sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>sc_suspend_all</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a0901ba8ffc212e2a1b89dfbf73abe437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>sc_unsuspend_all</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ab00d6b03331b0f0e9d757f90db9d8751</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>sc_suspendable</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a496f9f47d3c00183b287f46501d233fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>sc_unsuspendable</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a3129c45bda1cdca526adac065d4a80d6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_process_handle</name>
    <filename>a02165.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_process_handle</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>aae174624e0f27d3a4c87784138bf8e73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_process_handle</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>aadae3b03c5ce34e2c0f34ddfe97e2f88</anchor>
      <arglist>(sc_object *object_p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_process_handle</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a58ffb7a1bce18fead41ed52d75fcd54b</anchor>
      <arglist>(sc_process_b *process_p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_process_handle</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>ac69885e0499b490a627b53d7b58f5279</anchor>
      <arglist>(const sc_process_handle &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_process_handle</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a496f28d7586080b47e761ca613202fc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle &amp;</type>
      <name>operator=</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>acfca4d9a9d9744f1ecddc010a86c6292</anchor>
      <arglist>(sc_process_handle src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a7d3c0cd16c76ffb1950f7edb66f904b7</anchor>
      <arglist>(sc_process_handle &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a1f7ca1b4b7c181454095f84360316330</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dynamic</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a841f2f471bed8c03b11fdff073f63ea6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a39e6f89e641c0917e6a82b298c3dae95</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sc_event * &gt; &amp;</type>
      <name>get_child_events</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a2baedaf870d67edadf52ac7ceb3589a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sc_object * &gt; &amp;</type>
      <name>get_child_objects</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a7876cc1013d02f91af473ef4502efc80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>get_parent_object</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a0558eb49020b5a588b63d5f555214ecd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>get_process_object</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>aeb183e0d1f454d5d512484d7d066c662</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_unwinding</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>ae87c67766fa5bf259cb024a5975b7dcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>kill</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a6698d508929a8d4d3a3ee9e015a4ef70</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a490748a44684eeecec814a583a2094a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>basename</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>aa625d7f74d2f9aec8452275e14040edf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_curr_proc_kind</type>
      <name>proc_kind</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>ae8b97f2cabe249c72ca2338c4a4c6530</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>ae773070079aa5a660c6a370338364269</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>sc_event &amp;</type>
      <name>reset_event</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a856bf152a422892857c71a226b78f4cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resume</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a893b2e55367627556863b5c23f7d7e1a</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspend</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a73370b93855a7d9131c7e49eb400bfa5</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync_reset_off</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>aea2d31a4fd74836ed5cc19688aea1978</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync_reset_on</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>ac6d5b6e68cfb770ca60cd09a5f34cdb8</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>sc_event &amp;</type>
      <name>terminated_event</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a3ba1726872c886bd7fbd27621f599919</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>terminated</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>ac0e074a6e68f3343701698fd4e72446c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>throw_it</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>ab9ad47b3b8341ceb54ef870a7e7502e8</anchor>
      <arglist>(const EXCEPT &amp;exception, sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a2f01c9d2ab793a1651927115455d079b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dump_state</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a5fa45b361df163995215623f5317a336</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_process_b *</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a7b6f22594564a4cc2319f48f3059b08f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_cthread_handle</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a22be50fea0a9b7a93ebfd32bcd56eb2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_method_handle</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a2a10fe75c3f85a9c2261c9119d416df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_thread_handle</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a540c9b2cbffa001aa92312141b76fdcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>dont_initialize</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>ac5d5035ffc2355c74f850db84ba5cb88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dont_initialize</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a69a76fbb1c768fd450a0889722bb56c8</anchor>
      <arglist>(bool dont)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static sc_event &amp;</type>
      <name>non_event</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a6460801ed7d21e43a24a281260ee4d9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_process_b *</type>
      <name>m_target_p</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a72903172697a15674e032286baa2d3a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::vector&lt; sc_event * &gt;</type>
      <name>empty_event_vector</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a5a7789d3a75c355e5c76afb21f509288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::vector&lt; sc_object * &gt;</type>
      <name>empty_object_vector</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a7d62b018af4eb8ae661860ea621b7da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>abe316699185dd3108ba952d356e513e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_join</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>aeb79ed0c7e8b054a1908e8e6346ef2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_reset</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a459c3ab69abfc8912c9261f7dc0719dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>ad3d4027e6ef16484903fcd92f865519d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive_pos</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a83751c37d469e63b83c9a1e209b7319b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_sensitive_neg</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a98963a9ab02b155f3cb5061dcdbbb1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>ab59ca88ddcee98ed1842dde0843b64c0</anchor>
      <arglist>(const this_type &amp;left, const this_type &amp;right)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a04d9f9de9173ba30957bd3652e72ce89</anchor>
      <arglist>(const this_type &amp;left, const this_type &amp;right)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a8472be65af106f8df033c337acbf4d77</anchor>
      <arglist>(const this_type &amp;left, const this_type &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_process_host</name>
    <filename>a02141.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_process_host</name>
      <anchorfile>a02141.html</anchorfile>
      <anchor>ac5e639b1c7069ba45b190c361c832cbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_process_host</name>
      <anchorfile>a02141.html</anchorfile>
      <anchor>aa314af2f955cf8c79b4d56eef65714bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defunct</name>
      <anchorfile>a02141.html</anchorfile>
      <anchor>acf24d38ae99fdf5fed561e8fb8301111</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_process_monitor</name>
    <filename>a02145.html</filename>
    <member kind="enumvalue">
      <name>spm_exit</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>acbfe2f49d0e7a1153cd1b3388bb7ea80a302665cd4a823e3f8b6c702fb29466b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>spm_exit</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>acbfe2f49d0e7a1153cd1b3388bb7ea80a302665cd4a823e3f8b6c702fb29466b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_process_monitor</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>ac807fb723845344ad8bab1db426d2e5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>signal</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>a0e298ea807c0d1ed5d0f14941d58cec8</anchor>
      <arglist>(sc_thread_handle thread_p, int type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_proxy</name>
    <filename>a01625.html</filename>
    <templarg>class X</templarg>
    <member kind="typedef">
      <type>sc_proxy_traits&lt; X &gt;::traits_type</type>
      <name>traits_type</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a8ec571f48d0485a51df9c1e9172eb1ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>traits_type::bit_type</type>
      <name>bit_type</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ab7ae69bce898bf4ac7a7518d476ad874</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>traits_type::value_type</type>
      <name>value_type</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a47130a0e9448807693dea071a51a0b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_proxy</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>accea890ca3d76271b14869cd5d296c96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>back_cast</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ae7bb9256fda3f6868579c75cb3ba87d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const X &amp;</type>
      <name>back_cast</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>afba11b7fa3361154e66ac9b9caf2d214</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>aa78eec2715d09e6bd0ec5fc2bbed01fa</anchor>
      <arglist>(const sc_proxy&lt; Y &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>acf1b2909e107881e6dcbe686f2988c83</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ac0337fdba86b96a04989a171442b90c2</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>aead6476441626a33fda6454c829d8d9a</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a58dfc1b8cf0f429d1eb1006f7be7e7ae</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>abf88c5f9fcf30d00515eacef81e51ab3</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ab2e32b5617372f81cf8e4c81392a3a1f</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a469c7be1bf2c368257540143fafb2e6e</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a520bd5e7211b6c6c9fffe316b0349ecc</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a702f89f2149e4ac25765265ca74c16a1</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a4638e65f60e07c46587538a4a19d5b13</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ad8ff4c0defa9b2ee308a091c7f233493</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>aa71aaab91c3586527b77b9465c02395e</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>assign_</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ab2073e7075b8d90298f6db2348505e27</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>b_not</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a54452404cfaaf83f5b965521dbbbb367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator~</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a8dec93ef1a73500ff58b1faf2b9a351d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a141edb57ae1d163a701c5db6ce64d377</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>af1edcb36e1c93b8972fa202f160400cf</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>afd6e5d2d361c5690f5e0985a321f88ea</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a13fe8c03611e69e738c34d85c5fea096</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a2f489315bfea11ce3902c1606188e883</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a3e4c96b53f6ee10bf3d62c53d86919a2</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>af21482289fba90a6a5c9f6f505d214f3</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a41fca8e75b6a988685985e58ed26a535</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a8d3a9f48505a33f8e734e88f5b4b816f</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ab508b7c7a06b7d5c4ab620a7323adc1a</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a8f81c2337acbde37e681b6b8642651ba</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a29d3a8a7ecceb0ae5164716c580f4fdf</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a882fa9bb1c310d67d99611f352d2ebdb</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a779f424157878fe56f3d2eef1d544727</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ab8c5a6968f8af9cd94f7689a6069a211</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a179f4706d604b0db3c84537247dcb089</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a33f107d23fba4cc723c8666a44e6be2c</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ac890ff69a2ba76629164c83a369f94fc</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a4899fb9e5400f6d1c08f75e33f9929ff</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a657c52cca1f072f2edd465d0ac904a29</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a936e256e9fa672961ccd05521c4bd028</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a4106debc41fa87632a9078d41530cf43</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a6615dde3f455798324ede138a33b69ef</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a3e95bdd5908704af4a2694f9cb1644a2</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ae86e9ef321c62fa10ccf59bef22e3048</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>abd93dd3bdff8e0e9c85c8ea4d07b2eee</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>afffa77d68481c3aec32817db9932f2c4</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a256ddb37054e0bf0185e922d4bbac065</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>afb9dc6f9dba811b103a3692d754eb349</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a718e21c7549728ceb333812c8303df51</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ad70671185f982e6d7ee669a2e7d28a19</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>aa968f734d140a5a1e367469a05a95450</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a95f3b8a9c98aac57d6ead7f937d98b4e</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ae5aff9f3830a0f2865ea2326b6223b0d</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a845b6a6bf4a9d5f57dc3da94fb740058</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a1b974bce9afc69cae59cf4fdf5936e1e</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>abc5a3f5c0fea7bd19929826aac6eb30c</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a278ba8bbcadab473a7b07ba5af49638d</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a7320d6ec3b2e988d25e14560a96c455d</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a7c98e1d02fd9bb149bdd4136eeddca0d</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>aca67d22bbd57c166dc664d6539516163</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a3042b98af46b3ef854ec13ad8bd1bb30</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ac186c393c76e89af497a95dbfebef1c7</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a572accf581cb423a11e037bd03eb0b31</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a7b6ccf5e1bcb62c02941ae3ecbd9825d</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a6943bc31204296d5c9cd6ba3fcdf5e44</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a147f9ba576b860e2aaf1f70213ac83ac</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a7084b4b22fa1d3c8e86c9b79b9232b20</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a6c205fb5fc1d50138698ff46b4e114da</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>acc4ae30de242a841438e9d0670855027</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>aeaae505ac622a8dca9c1fd59c59b7a07</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a4c9b4a6778e01de2a526c1f0b21990e6</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a2e5ca20a42a903da4e8e672ddb527192</anchor>
      <arglist>(const char *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>aeaec8ae383675417af6daa19c416486b</anchor>
      <arglist>(const bool *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a2e9464c0b22d5e337c3b3c70c395ee63</anchor>
      <arglist>(const sc_logic *b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a9d26a596b44b3a2417d4b84bd07e9377</anchor>
      <arglist>(const sc_unsigned &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a2fca19fba03b757153d9b9734e325685</anchor>
      <arglist>(const sc_signed &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a52fbb788c068bc31e1d423740e80c8d5</anchor>
      <arglist>(const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>afa8d4158bb9919d9197a8d73913436c6</anchor>
      <arglist>(const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a714b94975b8493a57301d7a1dbc9e9ef</anchor>
      <arglist>(unsigned long b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a8622ee64c97bb796a6e45a93675a15c7</anchor>
      <arglist>(long b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a112ec81a94b6d7b3b704dd4109a0426f</anchor>
      <arglist>(unsigned int b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a689e519c59e2bc3e55388d367b583fa5</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a5f4904c43d080cf08808f99fcfaeb3ba</anchor>
      <arglist>(uint64 b)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a2def4e4ff4d43d7262217fcb33ba7a6b</anchor>
      <arglist>(int64 b)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a4a397f6a6dda7c80e0252421c6ec059d</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a510ebea7aadac1c9eecc04474abfe1e4</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a840d2eb0077ba1e9f0d7984cc9cc0234</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>af485bcf22e7c6e22bdf4a425a1b3aba3</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a209736d4a773d94685495c713458a3ae</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>acf9bf6ccf7defcae02e2d9379019baea</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a361c2f7db40b5893cf78f1f53c02d0f9</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a182b0f9f59c3019815028296d8765879</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>acab2b473cf36113b820193f85533f5d2</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a0d67d2d5bda83c1b40b498b782629056</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>aa0c0a4ae8ce69b7d21759cd6ab936556</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>af1f1fc4c4f406ae6d3905d49bc43c64f</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a77524b5c0d605e86b522bf82ab7a3c1e</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a2882e7426bc972fbb191889d2dcd1bf9</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a70a78f993a9751dd4fc93a662cab7022</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a09b602fca8cd3df55a16e69ed75178a6</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a56ef8931def9d6fb89741573f909a2c3</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>lrotate</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a0aec43149b265e26139d8b9973a6991a</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>rrotate</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>af0fd16d5bc50daa7286e0d3cf6a6f6e2</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>reverse</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a4b367159d44258eecf57bd36c16d5554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt;</type>
      <name>operator[]</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a1d020227bb6f768f5a058feea61a3620</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref_r&lt; X &gt;</type>
      <name>operator[]</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a750814ae3d13d3c3edef981b3c2e4fe7</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref&lt; X &gt;</type>
      <name>bit</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a85ccab63361d7355ab4b47628fb69f46</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>sc_bitref_r&lt; X &gt;</type>
      <name>bit</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a5c802e19772f3f586f9c83813cc4d098</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt;</type>
      <name>operator()</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ac6fae1133c32ec8532a3aa0528c5224f</anchor>
      <arglist>(int hi, int lo)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt;</type>
      <name>operator()</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a39b7fd71a3056da2eaf0166c3223e7b6</anchor>
      <arglist>(int hi, int lo) const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt;</type>
      <name>range</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ac63ed265d57483482aa9bdd38ff87318</anchor>
      <arglist>(int hi, int lo)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt;</type>
      <name>range</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ac7073ae04b156ea157a818108185d918</anchor>
      <arglist>(int hi, int lo) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>and_reduce</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a3f454d9349b2bb5483c32faf29747ec7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>nand_reduce</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a6c96bd041c5ee7228f3f62f9531cc5d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>or_reduce</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a7494a80dc05a0a940ab1615b0ec8a599</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>nor_reduce</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>aa3a9dc70e43e8936e0e33ce51cafb4ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>xor_reduce</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ac5885c34da1bbed13ce82c23fc51eb95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>xnor_reduce</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>aced50af0ca090f1b150d583ab8f56cff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ad13398f205d5b8a53f71605412f361df</anchor>
      <arglist>(const char *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a7829bdf1b498079c14ebec82b1405eb0</anchor>
      <arglist>(const bool *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a9f1254d5bdb19033d0ae8ac571c4eafe</anchor>
      <arglist>(const sc_logic *b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a889b273c321437528630c794964f1da6</anchor>
      <arglist>(const sc_unsigned &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a3018eb3e4553f73e21d3ffa6d6ea765c</anchor>
      <arglist>(const sc_signed &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ad806388868e0fd388eb352136ae60ee8</anchor>
      <arglist>(const sc_uint_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a7c6535f135da67eadf1d0529d4cd608c</anchor>
      <arglist>(const sc_int_base &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a6a48d1107e791634cbceaed0b2187965</anchor>
      <arglist>(unsigned long b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ab63313dafe9ab775c588ed8da8bbd06b</anchor>
      <arglist>(long b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a7f2fbed25a2b7e77ee8c3260ed1e1c6a</anchor>
      <arglist>(unsigned int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a74ce3db95d1d00e5f35425015f8300ac</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a10364103e06df161f81b33dbdec68b3e</anchor>
      <arglist>(uint64 b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ae25f4528cb003daec2784f5bac4c6dfc</anchor>
      <arglist>(int64 b) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a091c06138d9ff2192591885607eb955e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ae503a231c4171cedb9e02b1227c6bbde</anchor>
      <arglist>(sc_numrep) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>aa768e69e1f0d8136f5ecd75cc9c7a859</anchor>
      <arglist>(sc_numrep, bool) const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>adaa8fae85694bca2cc32df9a096bf831</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a5f397533750a51f6aef9d47d249dd60f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>abfee16d1787a828ac01decd569199aa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a714205f3bd2bd16a979f8e8d8b77181f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a13ab95af579bbee1ee64f4d3274929f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a93218be1c993aa03bd6f33453b682768</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>af3cd336e8752b48bf608fa7eda24ca51</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a1bac4fd44ca356072cb734e8fd74a6eb</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_bounds</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a146fc7f639127ff0614a4b1c2034a289</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_wbounds</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a840c619647d717b35123f933d4cb3570</anchor>
      <arglist>(int n) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits</name>
    <filename>a01629.html</filename>
    <templarg>typename X</templarg>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_bitref&lt; X &gt; &gt;</name>
    <filename>a01645.html</filename>
    <templarg>typename X</templarg>
    <base>sc_dt::sc_proxy_traits&lt; X &gt;</base>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_bitref_r&lt; X &gt; &gt;</name>
    <filename>a01641.html</filename>
    <templarg>typename X</templarg>
    <base>sc_dt::sc_proxy_traits&lt; X &gt;</base>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_bv_base &gt;</name>
    <filename>a01633.html</filename>
    <member kind="typedef">
      <type>sc_proxy_traits&lt; sc_bv_base &gt;</type>
      <name>traits_type</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>a215650bfadd90d59cb7516425aa0b842</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>value_type</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>aef7b82927b5676f2ab131d9589835412</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_logic</type>
      <name>bit_type</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>a5d9672a259bff6bc5bafe7fd086f293b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_bv_base</type>
      <name>vector_type</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>abb4ae7a44e27647b1e551f8bb16a2fea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_concref&lt; X, Y &gt; &gt;</name>
    <filename>a01673.html</filename>
    <templarg>typename X</templarg>
    <templarg>typename Y</templarg>
    <base>sc_dt::sc_mixed_proxy_traits_helper&lt; X::traits_type, Y::traits_type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_concref_r&lt; X, Y &gt; &gt;</name>
    <filename>a01669.html</filename>
    <templarg>typename X</templarg>
    <templarg>typename Y</templarg>
    <base>sc_dt::sc_mixed_proxy_traits_helper&lt; X::traits_type, Y::traits_type &gt;</base>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_lv_base &gt;</name>
    <filename>a01637.html</filename>
    <member kind="typedef">
      <type>sc_proxy_traits&lt; sc_lv_base &gt;</type>
      <name>traits_type</name>
      <anchorfile>a01637.html</anchorfile>
      <anchor>a30b4d85c86577fb69d38d24ddca5122c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_logic_value_t</type>
      <name>value_type</name>
      <anchorfile>a01637.html</anchorfile>
      <anchor>a9a27dd1aeb81f5c8023a4d07a79544f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_logic</type>
      <name>bit_type</name>
      <anchorfile>a01637.html</anchorfile>
      <anchor>a6374b4efaddbe2ce417072ed2485dd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_lv_base</type>
      <name>vector_type</name>
      <anchorfile>a01637.html</anchorfile>
      <anchor>a070f76d14a8650f598d69750f3464d06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_proxy&lt; X &gt; &gt;</name>
    <filename>a01657.html</filename>
    <templarg>typename X</templarg>
    <base>sc_dt::sc_proxy_traits&lt; X &gt;</base>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_subref&lt; X &gt; &gt;</name>
    <filename>a01653.html</filename>
    <templarg>typename X</templarg>
    <base>sc_dt::sc_proxy_traits&lt; X &gt;</base>
  </compound>
  <compound kind="struct">
    <name>sc_dt::sc_proxy_traits&lt; sc_subref_r&lt; X &gt; &gt;</name>
    <filename>a01649.html</filename>
    <templarg>typename X</templarg>
    <base>sc_dt::sc_proxy_traits&lt; X &gt;</base>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_ptr_flag</name>
    <filename>a02345.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a020f000d9d8f1ff46c28c361722797a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a48be8bf9805c0b7a14172d259036e891</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ptr_flag</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>abfc05b0bd5b0c1201e21903df5bf9fe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ptr_flag</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>aace3ceded7e57ada37dd50c4b749db12</anchor>
      <arglist>(pointer p, bool f=false)</arglist>
    </member>
    <member kind="function">
      <type>sc_ptr_flag &amp;</type>
      <name>operator=</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a9d5d25b8d1c95b35115eef8794df8111</anchor>
      <arglist>(pointer p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator pointer</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a8707a9e686557bbc42183c7bafb09cba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a304ed06d8a41321afde8521df84c8a20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>aad34e23fa661f1c10ac7cc304db90283</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>get</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>accf6d87ad0c66a7598eed7c647a4ccbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>ae40d0fd11ecf3d2e602598c91e823988</anchor>
      <arglist>(pointer p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_flag</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>aadce96f64e56beda0d40b86b4e9193f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_flag</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a0ccca76d21e279d7e563536a48ad4919</anchor>
      <arglist>(bool f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_pvector</name>
    <filename>a02349.html</filename>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_iterator</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>aeee2c94d2fe9d90e96ba0659d5e8422f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>iterator</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a6ba637c671307dcfbd92a1bec64e1e65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_pvector</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a6678174b56d3994e2bb481b712904340</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_pvector</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>ad00eb10bf276225da8e99ab29fbe05b2</anchor>
      <arglist>(const sc_pvector&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_pvector</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>ab2d7e7a33f0f32d89eb679b2a107eaa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a20d80a6cada6372a25b1f622495abdcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>ac6af1c03ca496dd688b1ac0c9e39026f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a567d26813ecdfc4a9f2471a6815cb628</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a417cf2ad581cfc92cc293a9ba5244209</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a2e0f456af0a31ba2d8ad2d4761bc3b65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_pvector&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a61fc7f22e9af124600b35b86f158e3ce</anchor>
      <arglist>(const sc_pvector&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>aa5e14e5aad6086b47bd5926965e3c70c</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>ae74169e197adbd319d91f5e41e324f7a</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>fetch</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a68b65d5517eb44e8bb41391559a095e8</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>fetch</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a2726cdb6db17df78aa63d4a0cb0a9890</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>raw_data</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a41b871b1371885daeee2d0cf55b640c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>raw_data</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>ab4286bb7b36b86b9c3c45209e60db54b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const ::std::vector&lt; T &gt; &amp;</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a288d1f44c3b4a29f7664709b1e620343</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a34208867e140a447cff66ffc221d1c68</anchor>
      <arglist>(T item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase_all</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a01070908127744178971b57030c2db10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>acec913cd1aa138a2e70bfde9df1497fa</anchor>
      <arglist>(CFT compar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>ae25fb5f8f28ade9124b24bcafdfd928f</anchor>
      <arglist>(T item, int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decr_count</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>aa5257c0622a0d6da68e3343a9ca9fcca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decr_count</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a8ca50da1abe8653f35a342e205fa4a3c</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mutable ::std::vector&lt; T &gt;</type>
      <name>m_vector</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a2de0a1016715adb1fa5f0fd0159ac706</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_report</name>
    <filename>a02353.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_report</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a69e2466d84837de7691cc3f664da9c27</anchor>
      <arglist>(const sc_report &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_report &amp;</type>
      <name>operator=</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a9ae5ae736c155b286749539b3340b100</anchor>
      <arglist>(const sc_report &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_report</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>ab20a081683399592f0fd586ee8089fe8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_msg_type</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a143d64cd7f43607f3ba8e8567462120d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_msg</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a6b74731b800e628939068b939134ad86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_severity</type>
      <name>get_severity</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>ac27d91a69ccf0020469eb9eae6ed75dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_file_name</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>ad01a4cdca1ef09589b1d2d6827c6a955</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_line_number</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a7a8274efcf44f5b4f049251bab9ba646</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_time &amp;</type>
      <name>get_time</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a9f7921bdb38e29b38af00f1e1a9b3af5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_process_name</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a7e035220a07c6e7bef544df94d241b92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_verbosity</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>afccaef2a01b79e56695ef3a1ebc08453</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>ab01fe32b8c41f1a8a0b1770c0ec2983d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>ab0feca57950181a67aceeb19cca9b829</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a749bfa2eab9c71a257883986771c3469</anchor>
      <arglist>(sc_report &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_id</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a8bdfdadb285609318d15fa61040ee4b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>get_message</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>aea71b3cbdda6322b0facb1ed425312cb</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>is_suppressed</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a9c5f3831495a9112ff3b36def62e3b8a</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make_warnings_errors</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a17d064208ef1237c8acee0367fbc9524</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>register_id</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a29444bcc87f33553222f4dfa59febaf7</anchor>
      <arglist>(int id, const char *msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>suppress_id</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a173032de1318fa6362b755519921a056</anchor>
      <arglist>(int id, bool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>suppress_infos</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a7d17fa48fedbceffb8f6b599ffeb543d</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>suppress_warnings</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a071058617234e14af95d74160a226300</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_report</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a6690fe02e85097442c58240e35ceb430</anchor>
      <arglist>(sc_severity, const sc_msg_def *, const char *msg, const char *file, int line, int verbosity_level=SC_MEDIUM)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_severity</type>
      <name>severity</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a4c15d41e03a228a892c6dd50f8d4110a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const sc_msg_def *</type>
      <name>md</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a4c662eb8f2c1eca3ada268a34e45e00e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>msg</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a4a59c2388719c3a03e945f3b7828b170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>file</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a3c57ea4596fc8d7e514d2409b7b4aea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>line</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>afdc783ad849e1b81bcb920e62392b3bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_time *</type>
      <name>timestamp</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a7b7fdef48274049bf9b24d3f886aee61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>process_name</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a1dd1c8fc2831535804e85f17d100c7cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_verbosity_level</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a53aada114f80b94d3e6ed37ef48df304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char *</type>
      <name>m_what</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a9d9e9190baf7d7b29a5660e2ea280d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_report_handler</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>aaba7034cfa93e6c1a3e2f1e9e57f9b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API sc_report *</type>
      <name>sc_handle_exception</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>adbaeec0e9f535f6a31d6d2dccbb8f139</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_report_handler</name>
    <filename>a02361.html</filename>
    <class kind="struct">sc_core::sc_report_handler::msg_def_items</class>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>report</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a2f5982e27329ddf79528a42682d4cafa</anchor>
      <arglist>(sc_severity, const char *msg_type, const char *msg, const char *file, int line)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>report</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a46b22c53c6977d135dcc9bc067e72b78</anchor>
      <arglist>(sc_severity, const char *msg_type, const char *msg, int verbosity, const char *file, int line)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>set_actions</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a12fa58880045f69093171ef9087a3e71</anchor>
      <arglist>(sc_severity, sc_actions=SC_UNSPECIFIED)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>set_actions</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a80bce4475369c277dad6004f72c0e6ec</anchor>
      <arglist>(const char *msg_type, sc_actions=SC_UNSPECIFIED)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>set_actions</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a639eb7a2d3ef8245076ecd9a7257be14</anchor>
      <arglist>(const char *msg_type, sc_severity, sc_actions=SC_UNSPECIFIED)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>stop_after</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>aa730d4804036b41675f0a44a8492619a</anchor>
      <arglist>(sc_severity, int limit=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>stop_after</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a625fab1c491ddba0a203adbff4a350a0</anchor>
      <arglist>(const char *msg_type, int limit=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>stop_after</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a43785f0d26da14c5afba1aac261e7ed7</anchor>
      <arglist>(const char *msg_type, sc_severity, int limit=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>suppress</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>ad8efc312922c9ff796a8f0e9863b4b3a</anchor>
      <arglist>(sc_actions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>suppress</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a5d209bc5905df0618be6fff118ee6207</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>force</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a8ed5ae33998b96349e4e3e7463a9f349</anchor>
      <arglist>(sc_actions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>force</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a3d7e3bee1d6e3447223d681f009f2db3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get_count</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>adae3db5a5eca940bb6b72bf3d868a43b</anchor>
      <arglist>(sc_severity severity_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get_count</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a64614f9f138da99cab2a1a2903c5ffe3</anchor>
      <arglist>(const char *msg_type_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get_count</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>acf560b2f424bd13db680f165f77c3261</anchor>
      <arglist>(const char *msg_type_, sc_severity severity_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get_verbosity_level</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>aa94b00d0247b5a2231d0a21c960bae9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>set_verbosity_level</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a12e15f16c2f86d08be3ae7a9e7a18665</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a1a700d6e3597d808ca287eb45ebf82dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a97ab01a401e6b1b703a5f627e779b576</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_report_handler_proc</type>
      <name>set_handler</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a63ae30f73b77ce21615413a63354d12a</anchor>
      <arglist>(sc_report_handler_proc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_report_handler_proc</type>
      <name>get_handler</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a2a193142918cc8150033097486de31af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>default_handler</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a3d2a0bc49f9bb29c766fbb33697448eb</anchor>
      <arglist>(const sc_report &amp;, const sc_actions &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>get_new_action_id</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a4f8d77c90063490aa7466e63e28877e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_report *</type>
      <name>get_cached_report</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a7d5224215ab288fb5f68057503b47be7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clear_cached_report</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>ae2e22d432f4a9eae29e8e73d832b3f0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>set_log_file_name</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>af6e78f8f6055ab877630d53870ce85cb</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>get_log_file_name</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>aecf49b4c2ffa6a9a1afc6b9e9dad81aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>set_catch_actions</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a9a28cffa03a6e54f81019a48f3c9c0e5</anchor>
      <arglist>(sc_actions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_actions</type>
      <name>get_catch_actions</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a5d495f76da5d3751f4988ee24935f393</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_static_msg_types</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a08d60085012c319c35045717cabfd5ff</anchor>
      <arglist>(msg_def_items *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_msg_def *</type>
      <name>add_msg_type</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a4a97826c4ebb8d5aad7226e9590fd1e4</anchor>
      <arglist>(const char *msg_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>report</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a4038a57e2b00cdb8cf3f195ad97336db</anchor>
      <arglist>(sc_severity, int id, const char *add_msg, int verbosity, const char *file, int line)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>report</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>ae66f8ac6885bf8a8954fbe9597e1cf26</anchor>
      <arglist>(sc_severity, int id, const char *add_msg, const char *file, int line)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>cache_report</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a924ab6206f0b1c914709242b87cb4f44</anchor>
      <arglist>(const sc_report &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static sc_actions</type>
      <name>execute</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a6a81c2d0c7f56ef2ba4e4c175bd950cc</anchor>
      <arglist>(sc_msg_def *, sc_severity)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static sc_msg_def *</type>
      <name>mdlookup</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a101a15497872e2de831cbba7047eb381</anchor>
      <arglist>(const char *msg_type)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_actions</type>
      <name>suppress_mask</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a93d4239b2a2bb543dcdbb43a0f726f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_actions</type>
      <name>force_mask</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a9b2f87072ff55af8082d9751b65c9a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_actions</type>
      <name>sev_actions</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a8780dce51eb67ac1beca6c5b0619c738</anchor>
      <arglist>[SC_MAX_SEVERITY]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static unsigned</type>
      <name>sev_limit</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a070934d1902f18a565d78fc2783b0e6f</anchor>
      <arglist>[SC_MAX_SEVERITY]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static unsigned</type>
      <name>sev_call_count</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>afd84d41cdbddc97a8d54d699ebee78a3</anchor>
      <arglist>[SC_MAX_SEVERITY]</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_report *</type>
      <name>last_global_report</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a3862196aab67e3ea88b53f843a3d544d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_actions</type>
      <name>available_actions</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>ada57f87504198adced48e443dc1fd7f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_actions</type>
      <name>catch_actions</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a6c514cfafa53464e483fd21006047344</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static char *</type>
      <name>log_file_name</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a2add9c71044d7ae7c82db2ac0eecd605</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>verbosity_level</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a883db3d127e7676353fe72e0b104906d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static msg_def_items *</type>
      <name>messages</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>af9d9e21bc401e78d3b6ecbf4ccb285c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static msg_def_items</type>
      <name>msg_terminator</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a41907c3ad9176745ae6a0755bddde819</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static sc_report_handler_proc</type>
      <name>handler</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a27377bcce2e0bd434733a21fea45a63b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_report</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a0752ef816341a65f29f869d200c86549</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_reset</name>
    <filename>a02181.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_reset</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>ab0f28fbfbe059183806280c8edbe15d3</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; *iface_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>notify_processes</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a6a4d8abc3fee9340ffc7c57685e372d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_process</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a76df1ddaa2cb5fddf32174f9de336ebd</anchor>
      <arglist>(sc_process_b *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>reconcile_resets</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a88cf7f13d1b1785a6d2d82edfb0358b1</anchor>
      <arglist>(sc_reset_finder *reset_finder_q)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>reset_signal_is</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>ae7d09b54e38a6f2250347859929c3374</anchor>
      <arglist>(bool async, const sc_signal_in_if&lt; bool &gt; &amp;iface, bool level)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>reset_signal_is</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>ac5f468a5a6b6f08fe345d1b0c616cc1f</anchor>
      <arglist>(bool async, const sc_in&lt; bool &gt; &amp;iface, bool level)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>reset_signal_is</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>aa4b24fb1b10759bc53c63dea2f11ada9</anchor>
      <arglist>(bool async, const sc_inout&lt; bool &gt; &amp;iface, bool level)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>reset_signal_is</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a78d2fdf2bd7357c7f3495176ae9e47e2</anchor>
      <arglist>(bool async, const sc_out&lt; bool &gt; &amp;iface, bool level)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const sc_signal_in_if&lt; bool &gt; *</type>
      <name>m_iface_p</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a182ac2397b431be9cfa1da1fc3b5233b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_reset_target &gt;</type>
      <name>m_targets</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a9dfa71633901f6b8c78e3b76019cc544</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_cthread_process</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>af2c9e96bc0fe4f99c3fdbf18a3965fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signal&lt; bool, SC_ONE_WRITER &gt;</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>aed8bd449a86d253c0bb8244d163f97ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signal&lt; bool, SC_MANY_WRITERS &gt;</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>abd6d1d40161d82c11b78741e28868bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signal&lt; bool, SC_UNCHECKED_WRITERS &gt;</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a6955ada6338a02dc37b3ce53bed13b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_spawn_reset</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>aa7502c4c4532c9b04b5368d321554349</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_reset_finder</name>
    <filename>a02177.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_reset_finder</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a5aeadf9792dd2d6d377ddaea4c1f4fdf</anchor>
      <arglist>(bool async, const sc_in&lt; bool &gt; *port_p, bool level, sc_process_b *target_p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_reset_finder</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>ab45438b4f104c04104daa7c672b4b27f</anchor>
      <arglist>(bool async, const sc_inout&lt; bool &gt; *port_p, bool level, sc_process_b *target_p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_reset_finder</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>ab39580d4ddcdeadce8a42210398d917e</anchor>
      <arglist>(bool async, const sc_out&lt; bool &gt; *port_p, bool level, sc_process_b *target_p)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_async</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a38624f3bbc2400a9f9a8961fcc7bd6c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_level</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a789e6209b910f7a6992d197f894e6f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_reset_finder *</type>
      <name>m_next_p</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a0cf7f37e49cc548e30c13f6f1b5c16ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const sc_in&lt; bool &gt; *</type>
      <name>m_in_p</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>ab208433d7842b90f884cc4609062f106</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const sc_inout&lt; bool &gt; *</type>
      <name>m_inout_p</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a15efcb4bb4b01fc05d0e6c0e4c2effa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const sc_out&lt; bool &gt; *</type>
      <name>m_out_p</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a9d4dcb15be317ab9f56e46ba54b4378e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_process_b *</type>
      <name>m_target_p</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a2b14057d9261a0221585d77b37458790</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_reset</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a459c3ab69abfc8912c9261f7dc0719dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_reset_target</name>
    <filename>a02173.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>m_async</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>aacb45ee9fbbe13c48f21fa00260f423e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_level</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>ad1244aeb679918ddf0f70c88554c0a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_process_b *</type>
      <name>m_process_p</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>ace2d7ddc8bd1e80fbf0e21362d1372f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_runnable</name>
    <filename>a02185.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_runnable</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a25c522a6ae4220b655b3b2ad9495d6f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_runnable</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a0b229274cabc74789b9ec67a37d18b05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a08bcc8fa13b220c4f67db7cf3136e9a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggle_methods</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a00a80901a65cc204ced7db9af698007c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggle_threads</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>ab610e2e8924f9e21863f83897462d9d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_method</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a79126ce283e9e1e14a71d06aaf30ca8e</anchor>
      <arglist>(sc_method_handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_thread</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>aa1e1024be4438bbea4845cc629a4a352</anchor>
      <arglist>(sc_thread_handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute_method_next</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a94d489fc7ae649460c62b8661d2a4e28</anchor>
      <arglist>(sc_method_handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute_thread_next</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a39bee2036a6731976222445a56175f1b</anchor>
      <arglist>(sc_thread_handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back_method</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>adb7cad7b6eded23b17882cf92c2ee7ad</anchor>
      <arglist>(sc_method_handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back_thread</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a840d9587ece497f2c64ba35f0babc790</anchor>
      <arglist>(sc_thread_handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front_method</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>ae2995bc36b3cb0244eb1a0a76ae4f879</anchor>
      <arglist>(sc_method_handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front_thread</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a22e36e2799e565725d22e9a77964a95d</anchor>
      <arglist>(sc_thread_handle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_initialized</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>aa45c5c77d12c00cd81f2cf94ef60d62f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_empty</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>ae1a08294e423d8b0d0c8898e70770609</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_method_handle</type>
      <name>pop_method</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>ae824571559dacd7de8601e144dfd452e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_thread_handle</type>
      <name>pop_thread</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>afee0c05abfda18740ad7d427c612f523</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a18667baf83471811c0eb25259aa4311a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_scoped_lock</name>
    <filename>a01369.html</filename>
    <member kind="typedef">
      <type>sc_mutex_if</type>
      <name>lockable_type</name>
      <anchorfile>a01369.html</anchorfile>
      <anchor>a23f30ceb2528d6639a204c8e0c0bf316</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_scoped_lock</name>
      <anchorfile>a01369.html</anchorfile>
      <anchor>a7ab4d6c186ebc30999014602bd582deb</anchor>
      <arglist>(lockable_type &amp;mtx)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>release</name>
      <anchorfile>a01369.html</anchorfile>
      <anchor>a144cc48927dd272767638856b58de56f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_scoped_lock</name>
      <anchorfile>a01369.html</anchorfile>
      <anchor>a63a2c68ec6a47e53114fb6f5ea02c2ec</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_semaphore</name>
    <filename>a01397.html</filename>
    <base>sc_core::sc_semaphore_if</base>
    <base>sc_core::sc_object</base>
    <member kind="function">
      <type></type>
      <name>sc_semaphore</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>aeef4c0badd55db086e7fafa0af1b61c0</anchor>
      <arglist>(int init_value_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_semaphore</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>abb812ffada0aa593016d68e4e1ed8987</anchor>
      <arglist>(const char *name_, int init_value_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>wait</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a3dfe662a01bf1969d4653760a16a4dc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>trywait</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a2dc83e13c644fe76e7dff55acb2a54b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>post</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a10b7e710d29b7f5e5186c6e83e048517</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a8185e27765f9e6f961c7ff7e76ce3274</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a98e8d913eccba3a03cc61aadc1a9563c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>in_use</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>af17df3402c17d093359459e5e0b19966</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>report_error</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a024ab702400b697fe184a951c1ef9618</anchor>
      <arglist>(const char *id, const char *add_msg=0) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event</type>
      <name>m_free</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>ad6103731d523d85dac4b5c3df11b010f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_value</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>abb0967254d50a4126b6c06eb27b77c01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_semaphore_if</name>
    <filename>a01401.html</filename>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>wait</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a502abd3615bf0acc76fdcbfbdd37ce86</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>trywait</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a2f5726bc11969f8dd2fce2c1e6940334</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>post</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a40b9903de2407397edb7f8115613a22d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_value</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a8e0c609b176a938d4fbdf454874ddb66</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_semaphore_if</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>ae8e4f1f89aa8e6e34882b7461abe19e7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_sensitive</name>
    <filename>a02189.html</filename>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; bool &gt;</type>
      <name>in_if_b_type</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>afe57f3e1858f5edbe0f47f1ab3228ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; sc_dt::sc_logic &gt;</type>
      <name>in_if_l_type</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a6ba2a4c1fd15fb44d2fe9e5bf7f40c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; bool &gt;</type>
      <name>in_port_b_type</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a0647f440d316a89cb5acf9cfde9652a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; sc_dt::sc_logic &gt;</type>
      <name>in_port_l_type</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a7a4f7efda7f587131366d1d0b3668dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; bool &gt;</type>
      <name>inout_port_b_type</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a811ece5ccf2d7a51c748b32b57069a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; sc_dt::sc_logic &gt;</type>
      <name>inout_port_l_type</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>adb252e4398191d5a1453b76f6ae50258</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>adbe907d612ca35719362402bd697f919</anchor>
      <arglist>(sc_process_handle)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a1ff0aadee8424f0b22721111f4241c5b</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a8bf5b9e1b005fd5ec6d9801a89736825</anchor>
      <arglist>(const sc_interface &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a2c7a27b0e87b2569f46db031f9db27bc</anchor>
      <arglist>(const sc_port_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a5665dc458a4d0d12b8e66188f802494d</anchor>
      <arglist>(sc_event_finder &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a23e7b18bddaa5db2efbe626e82c98d40</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a7f002768bcb345ae6e657f9f5e118fbb</anchor>
      <arglist>(const sc_interface &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>aec24b44b52cb8634509f9d51c5fa4e55</anchor>
      <arglist>(const sc_port_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a888f3e948f55f0d2b67b057bb6bff8e5</anchor>
      <arglist>(sc_event_finder &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a41d96326d23ff109769419b3c6644b18</anchor>
      <arglist>(const C &amp;collection)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>af793a96637dd9d53fedd1f59f9fb5f10</anchor>
      <arglist>(sc_cthread_handle, sc_event_finder &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>aad4a35a5e39316455f3360a2f5e1d7e3</anchor>
      <arglist>(sc_cthread_handle, const in_if_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a721ace7b777e9fc83b9dbb460b1bfcb4</anchor>
      <arglist>(sc_cthread_handle, const in_if_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a25c88278973d683d2a1b6cbf8b4da580</anchor>
      <arglist>(sc_cthread_handle, const in_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>ab2c2749b4a947602af23f85893b90476</anchor>
      <arglist>(sc_cthread_handle, const in_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a2c7bb141d685c8ac698bfac741e60f26</anchor>
      <arglist>(sc_cthread_handle, const inout_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive &amp;</type>
      <name>operator()</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a609e9ed83e0978ca3561482e9c751228</anchor>
      <arglist>(sc_cthread_handle, const inout_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a043ab37bf5ac8b32532b0a232358d507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make_static_sensitivity</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>ae24c60148462ab30ca8278dd9823d97f</anchor>
      <arglist>(sc_process_b *, const sc_event &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make_static_sensitivity</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a8bebbeac56ad6847ee7acdc39dfdcc51</anchor>
      <arglist>(sc_process_b *, const sc_interface &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make_static_sensitivity</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a1b9b07cd5bec5a1be47fad3fbbdc59ea</anchor>
      <arglist>(sc_process_b *, const sc_port_base &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>make_static_sensitivity</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>aa3c1bb637a41e33862f9905a2e72fea7</anchor>
      <arglist>(sc_process_b *, sc_event_finder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_sensitive_neg</name>
    <filename>a02197.html</filename>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; bool &gt;</type>
      <name>in_if_b_type</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>ad53f8beeecc7a5c3a0dfba0fde0243c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; sc_dt::sc_logic &gt;</type>
      <name>in_if_l_type</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a56760504b6589efa59d6e24d33f245ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; bool &gt;</type>
      <name>in_port_b_type</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a9aac6b62a767f7cb2e2b54f458752428</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; sc_dt::sc_logic &gt;</type>
      <name>in_port_l_type</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a8c338bb36713f15233d5d4baf6b55ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; bool &gt;</type>
      <name>inout_port_b_type</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a1ae4ba9141ebc65cd2de0bfdedf36c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; sc_dt::sc_logic &gt;</type>
      <name>inout_port_l_type</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a4ab55021feef277a515a3e33076c9a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a3cc2ab459d7af9f24d7b4252d990c688</anchor>
      <arglist>(sc_process_handle)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a1c485402dd9de5bfbd4bce2ff9a74c4e</anchor>
      <arglist>(sc_method_handle)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a9232a25aade51d878085307447b06981</anchor>
      <arglist>(sc_thread_handle)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator()</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>ad08507d69b0067fbc1e4caa1c60afd20</anchor>
      <arglist>(const in_if_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator()</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a095efc10f8724c98adae79de2d067ff9</anchor>
      <arglist>(const in_if_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator()</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>aa14d928c29a613b5127bb0e1e7a959a0</anchor>
      <arglist>(const in_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator()</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>ad1ad85ab719c930a89d23ce1b767467a</anchor>
      <arglist>(const in_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator()</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a9cffc3f79290abf94289efb27a69dced</anchor>
      <arglist>(const inout_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator()</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a7f9bb914769c8dae29a45f2be36ca8e6</anchor>
      <arglist>(const inout_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>afd5aed4fcf5c9d06ffcfc4f53ff9a742</anchor>
      <arglist>(const in_if_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a3bf8629c6382d39f178cd61456a831d1</anchor>
      <arglist>(const in_if_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a56a2d49863e9ef4174e1aeb58b8ce721</anchor>
      <arglist>(const in_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>ac8f8cb8350b44e9efdae955bb603ad88</anchor>
      <arglist>(const in_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a60183d8e6a3c1846416c9c920f6043fe</anchor>
      <arglist>(const inout_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_neg &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>aa49dc60d84fc7c9cb1309aa32db5b2cf</anchor>
      <arglist>(const inout_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>af708a896f434738929b0bda1b15d759f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_sensitive_pos</name>
    <filename>a02193.html</filename>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; bool &gt;</type>
      <name>in_if_b_type</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>acdb84090d39dabfbd03e52ffc1e8d66d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_in_if&lt; sc_dt::sc_logic &gt;</type>
      <name>in_if_l_type</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a3aef950b6370c4a959de254ab5ad1606</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; bool &gt;</type>
      <name>in_port_b_type</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>afc4ac536bbd6db14d75e2f619680a28b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_in&lt; sc_dt::sc_logic &gt;</type>
      <name>in_port_l_type</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a39ed1e1929c1bd54e56d435c74e11664</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; bool &gt;</type>
      <name>inout_port_b_type</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>ad99e5c355fa6bbd3ba7c224d8d39990c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; sc_dt::sc_logic &gt;</type>
      <name>inout_port_l_type</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>ab0bd238c1f45ed2597f274738d82ed7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a2b7dc9908f86c1873bc88dc96f17cec9</anchor>
      <arglist>(sc_process_handle)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>aa110c94b7c83d9aab019298294ea33b5</anchor>
      <arglist>(sc_method_handle)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a7fdcb5aabf5d628449e03298efb83f84</anchor>
      <arglist>(sc_thread_handle)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator()</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>aaf07ef03adddce739e88accb0fa5892a</anchor>
      <arglist>(const in_if_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator()</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>af7f259d2218eb0026f78185ee3338727</anchor>
      <arglist>(const in_if_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator()</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a5c812a0a9c54274f9b2398dd5753aff3</anchor>
      <arglist>(const in_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator()</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a8ae3b863b72711839177fd2a4a35343b</anchor>
      <arglist>(const in_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator()</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a58d651bd2b31405277187d12c6a5aa69</anchor>
      <arglist>(const inout_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator()</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a2703c3b4d4b53c587bfe8d5600b631a2</anchor>
      <arglist>(const inout_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a140287dfd9e64f1628b5f5f8096a1cce</anchor>
      <arglist>(const in_if_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a33d12f90e1bb666c1fd6a475172453d6</anchor>
      <arglist>(const in_if_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a300d49342cb80102f9cd9917ea3455e2</anchor>
      <arglist>(const in_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a68bde3dfd759c364c5091f6f733dd0e8</anchor>
      <arglist>(const in_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>ac42e2e2bbf20ecb2478d4d00dbdfaf9f</anchor>
      <arglist>(const inout_port_b_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_sensitive_pos &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a033b7132f0cfdd703b3a431fdcdd3967</anchor>
      <arglist>(const inout_port_l_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a9ae0124b831db87c005d4a38e354870e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal</name>
    <filename>a01413.html</filename>
    <templarg>typename IF</templarg>
    <templarg>sc_writer_policy POL</templarg>
    <base>sc_core::sc_signal_t&lt; T, POL &gt;</base>
    <member kind="typedef">
      <type>sc_signal_inout_if&lt; T &gt;</type>
      <name>if_type</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>acbd023b9b039542d16c41c2e3ddcaa81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_t&lt; T, POL &gt;</type>
      <name>base_type</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a8264b5654e15aa97596cc4136238cc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal&lt; T, POL &gt;</type>
      <name>this_type</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>ab11977e7fd150b6afffa058e38211f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a3d76433f0ee1a66095be499ad2c008d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_writer_policy_check&lt; POL &gt;</type>
      <name>policy_type</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a3c5ff5f47a7918bca95290ce55a67959</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a821e961a8dc5f58df5066459dd80cf7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>ab6eeb51a814f44d4e2f134a449ccba22</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a13666ca69ac02f5e0e3a57adaed8700e</anchor>
      <arglist>(const char *name_, const value_type &amp;initial_value_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signal</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>ac87186cdf66e8d0bd36a789e33366f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>affc9f61f4530e6b64552e793bea323ec</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>aba6b94c0f2d923388f491fb339e8a958</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>abbcc8c4c8ed5cb56da7a928269e3f726</anchor>
      <arglist>(const sc_signal_in_if&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>aca076dc8ed81672f51159a9528458c93</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal&lt; bool, POL &gt;</name>
    <filename>a01417.html</filename>
    <templarg>sc_writer_policy POL</templarg>
    <base>sc_core::sc_signal_t&lt; bool, POL &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a8aaf3085b78428abde2069c01fe075b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a796e84eb7eb6326e1f4a556ff285324a</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ab9cd40b6b0de7863662c9bb2bd6ba703</anchor>
      <arglist>(const char *name_, const value_type &amp;initial_value_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signal</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a856b2e845726c0459cc94d8b49270f0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a6ab247d20f4279be6997513351e8abb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a075ea7d157c02a44ca409a34bbba81d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>posedge</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a15bdbf400dfcf6339fe9789f62bdefbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>negedge</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>acfa155ae472671b53ee17a3db4d7cc05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>af606ccd02e8ec4f2743b12be38bd4f59</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal_t&lt; bool, POL &gt;</type>
      <name>base_type</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a259b440c85bdcbaa1423b4ce7c7a9431</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal&lt; bool, POL &gt;</type>
      <name>this_type</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a1473abdabc131de61c3eaa7ce96d670f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>bool</type>
      <name>value_type</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a423a1d66cef1933a4d426d9f0348a974</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_writer_policy_check&lt; POL &gt;</type>
      <name>policy_type</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>aad8c13b076b56216f3c24fe3fe2ec98c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a9b4ab529779c4140bf9281aad4f418c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>do_update</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>aa5eb1620128e33378d156b28940ac10a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_clock</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>afdcab73eae67f45bd1a0bf91288a3c73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_negedge_event_p</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ab21b3dd9d383ede2a440f8da95b973f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_posedge_event_p</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a06a376030a93dbb115c95a32c323d9d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_reset *</type>
      <name>m_reset_p</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a1b049447ce2ba9bbc8803d598ca41dd8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal&lt; sc_dt::sc_logic, POL &gt;</name>
    <filename>a01421.html</filename>
    <templarg>sc_writer_policy POL</templarg>
    <base>sc_core::sc_signal_t&lt; sc_dt::sc_logic, POL &gt;</base>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>add13f963b1fe2e21e40b5ee03d495b24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>ad2ee6d559b22b102fed72accf01f0d4d</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a88d31110acc8bd1f54e0e3a08f108031</anchor>
      <arglist>(const char *name_, const value_type &amp;initial_value_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signal</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>aaf5726123db39b3bb2fbbe2aa8d56535</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a4073874f91d4c9fa90ea972a00d6f65f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a08177b97a96914ff2362fe06fc5dd1b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>posedge</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a3170524bb13edbb131680df11f4b030e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>negedge</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>af03305e7502b6d9cb733b7e1724be576</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>acdd77ec2a0c634ad687d63b58a30b6a5</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal_t&lt; sc_dt::sc_logic, POL &gt;</type>
      <name>base_type</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a20b3e12adf4b9750f245b789d1ed3b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal&lt; sc_dt::sc_logic, POL &gt;</type>
      <name>this_type</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a32ee0a79b778a637aee27a65e4e3f3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_dt::sc_logic</type>
      <name>value_type</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>aa70bcb25b73e1d844dc06e52edfd3d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_writer_policy_check&lt; POL &gt;</type>
      <name>policy_type</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a3acec84459fcc6b0678ec0d724e2f286</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a318a2b5fee69705184f7271ddd42c8e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>do_update</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a45832872d4380babea79404d0a629f4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_negedge_event_p</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>ac00a6f02b16aa7ff3856d46bc85dbdf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_posedge_event_p</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a371161a9aaa15d24377cf93fcee6a76c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal_channel</name>
    <filename>a01405.html</filename>
    <base>sc_core::sc_prim_channel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signal_channel</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4fe3577aaa0a56596aecc4d3a968bbc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4a8229e3c36385abd2f805b09552f20b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a1ada614cbe9cb48b493091274d28c137</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a06028004a62194af9fae173559fcf9b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a688b9c5ac75a98945c86ebd87b0e036f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signal_channel</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a5706e36572400dbeee88f839b432c068</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>do_update</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a113a4e923393622d8141055f354c1e64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deprecated_get_data_ref</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aee1d93c002a8ab27d4020b2e3e0bcf90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deprecated_get_new_value</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aae12938f076def7a03d9a6e173bb8ec9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deprecated_trace</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac6aeb64a6d46019b9004e283b0f612ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_event *</type>
      <name>lazy_kernel_event</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a331b22608e0cdcf814909e6bec35de4a</anchor>
      <arglist>(sc_event **, const char *) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>notify_next_delta</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3c2eccc1033bc708b785e829d9cf0578</anchor>
      <arglist>(sc_event *ev) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_event *</type>
      <name>m_change_event_p</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad76b18cc1fb525c6b16caadbdbe5566c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_dt::uint64</type>
      <name>m_change_stamp</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a6428db87d73f8ac3b3646a47eaf4da2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal_in_if</name>
    <filename>a01425.html</filename>
    <templarg>class T</templarg>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a3b51a3bac738df9f7375f5651263cba5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const T &amp;</type>
      <name>read</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>add7eff25e352159761d34cfb2d3f445a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const T &amp;</type>
      <name>get_data_ref</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab6e020dc933e0cc206f8c422aa81be15</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>event</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa1a12f3c5f702e1dba271774e8aaf197</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signal_in_if</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a63f14a632546ca826dd9e96ef06cbab5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal_in_if&lt; bool &gt;</name>
    <filename>a01429.html</filename>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a33ee290cb30c17fb00779f9371e04736</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a43ea743a3c47f7d10d8a92c0c1753451</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>ae1dae9f5db062de54b771d3ac2a4e6a9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const bool &amp;</type>
      <name>read</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a0903f579402e5803e826d7dea7a92640</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const bool &amp;</type>
      <name>get_data_ref</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a8cc0fb37eeae78fb15ff37d4876a6548</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>event</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a163b6cddab318db80e5e5dc5fc699e0e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>posedge</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a6b6c3d2d95aad99e57e39d17a5171480</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>negedge</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a7b7bd76eda5060d79b15b76252147376</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signal_in_if</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>ad033c6fc989c943ca3dff214b2c7f2f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_reset</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a459c3ab69abfc8912c9261f7dc0719dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal_in_if&lt; sc_dt::sc_logic &gt;</name>
    <filename>a01433.html</filename>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a9269799419be1b62ce8c6a83746c278e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>afab620d3eca96ac6900fb13e987cff6a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>aacc3cf1d33e865984add81bc8570334a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_dt::sc_logic &amp;</type>
      <name>read</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>ae156e958883b25c1531acdffbf34ee32</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const sc_dt::sc_logic &amp;</type>
      <name>get_data_ref</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a5b92f40e8db9ad2bbe67a226bb9f673a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>event</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a8088cf00767db75ee84ed68d2048b980</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>posedge</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a96fcd1858fce429c75a507574d435f83</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>negedge</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a58e94044738deea44313006f04b15e5e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signal_in_if</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a0b0e5b4b8fafc8198f6f08bcda0d77ba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal_inout_if</name>
    <filename>a01441.html</filename>
    <templarg>class T</templarg>
    <base>sc_core::sc_signal_in_if&lt; T &gt;</base>
    <base>sc_core::sc_signal_write_if&lt; T &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signal_inout_if</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a008ca3482ed6cadd6b4a65e5624af61d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal_resolved</name>
    <filename>a01477.html</filename>
    <base>sc_core::sc_signal&lt; sc_dt::sc_logic, SC_MANY_WRITERS &gt;</base>
    <member kind="typedef">
      <type>sc_signal_resolved</type>
      <name>this_type</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>ab840479ca9f840d18e607f63cdd3dc97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal&lt; sc_dt::sc_logic, SC_MANY_WRITERS &gt;</type>
      <name>base_type</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a73bd5c633fc3b7cee86420e78f311539</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_dt::sc_logic</type>
      <name>value_type</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a049a31b4881449b4aa562ebd6f00b871</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal_resolved</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a26e46f4c1cf86a91c8901f40acc2930c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal_resolved</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a1071c18c6e25c795a0983659eba43611</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal_resolved</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>af37e5b594af2f449d29af3db8505f727</anchor>
      <arglist>(const char *name_, const value_type &amp;initial_value_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>ac861d4a662e835f2ea8aaf80341fc044</anchor>
      <arglist>(sc_port_base &amp;, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a81f2999db8defb7bed454f93dbb9b4d5</anchor>
      <arglist>(const value_type &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a88ff023145d3f2c1340ff686e04892a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>afce9dbf81a827ef50291ae699ae87c61</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>abc54cfbe9b6936f01359d1471b8ec58d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_process_b * &gt;</type>
      <name>m_proc_vec</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a9d8d2ba1e1f3f74a5d464c822a7a2c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; value_type &gt;</type>
      <name>m_val_vec</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a3732da0cf1c8d7353d34a8745f96d409</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal_rv</name>
    <filename>a01497.html</filename>
    <templarg>int W</templarg>
    <base>sc_core::sc_signal&lt; sc_dt::sc_lv&lt; W &gt;, SC_MANY_WRITERS &gt;</base>
    <member kind="typedef">
      <type>sc_signal_rv&lt; W &gt;</type>
      <name>this_type</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>a51a375a63d50cd4ad4e68b51d43676e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal&lt; sc_dt::sc_lv&lt; W &gt;, SC_MANY_WRITERS &gt;</type>
      <name>base_type</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>afde3529c2097a91f821b854740b4eaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_dt::sc_lv&lt; W &gt;</type>
      <name>value_type</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>ad1c9718d695711ccd243c5f1723dc5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal_rv</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>ad85c846b2a80c42fe78f97b257aceaa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal_rv</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>a38ce528d335f44d3b37fc64c024f5025</anchor>
      <arglist>(const char *name_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signal_rv</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>a2144e95dae98a3216facfc355eed3e24</anchor>
      <arglist>(const char *name_, const value_type &amp;initial_value_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signal_rv</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>aa01c7764c1a7d915778157051af9b91e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>a30a70b7873c0602045f5e493f4cc393f</anchor>
      <arglist>(sc_port_base &amp;, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>af5cfab8dd010ff590a0f7862aca77e69</anchor>
      <arglist>(const value_type &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>aadb54e14bda93d6de4a3efa98b49f879</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>a431d5730ee656a519a01a6357ede00cd</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>af6febd662bfda27d8e1cfcc11bb00a06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_process_b * &gt;</type>
      <name>m_proc_vec</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>a0c5ef7aca8eb80c6a90570dab1529caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; value_type * &gt;</type>
      <name>m_val_vec</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>a9a1d79aec99eb5becd966acaa0445079</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal_t</name>
    <filename>a01409.html</filename>
    <templarg>class T</templarg>
    <templarg>sc_writer_policy POL</templarg>
    <base>sc_core::sc_signal_inout_if&lt; T &gt;</base>
    <base>sc_core::sc_signal_channel</base>
    <base protection="protected">sc_core::sc_writer_policy_check&lt; POL &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a624b35a3bae00bfd183ed8bd26db04c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>register_port</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>acd9eff9b297ea6c088c1f719ee39e2d4</anchor>
      <arglist>(sc_port_base &amp;, const char *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_writer_policy</type>
      <name>get_writer_policy</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a26703092ff5396b824e5b136c3781f10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a6c184095e8434d668f915793985d4914</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>aea082eaa93226ebf5cb10ca6cfa89f33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const T &amp;</type>
      <name>read</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a7c48531bb90b18ee2308cf0a89dc76b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const T &amp;</type>
      <name>get_data_ref</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a4490eea72c19229740f5dc2a99898d19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>event</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>aeb36b4ee94b55bd724253db4705d9903</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a678160f9058979faeb11f499e5b03eed</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T &amp;</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a4a3ca0cbfaebd3081b46228cc3ae4583</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>aba6b94c0f2d923388f491fb339e8a958</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>abbcc8c4c8ed5cb56da7a928269e3f726</anchor>
      <arglist>(const sc_signal_in_if&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>aca076dc8ed81672f51159a9528458c93</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_new_value</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a3ffae5c0da500c7584c56d49ce49c93b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a9f3476b58602377a0016fb2ac9af9a50</anchor>
      <arglist>(sc_trace_file *tf) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a113240bfd69e6a3ac3b3df73f0668b00</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>af808e7c642065e2dea5532273748f5fb</anchor>
      <arglist>(::std::ostream &amp;=::std::cout) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal_inout_if&lt; T &gt;</type>
      <name>if_type</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a34af65a4c6037f95d8eb50bc36ed53a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal_channel</type>
      <name>base_type</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a485745e00473ae181a57bda69605e22e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_signal_t&lt; T, POL &gt;</type>
      <name>this_type</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>ac5d2e3f4161dae7c314f1a4f5ff931cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>sc_writer_policy_check&lt; POL &gt;</type>
      <name>policy_type</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>aa4ec6cd0b579156cb751ab6d749adfef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signal_t</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a3ba1fd2e9764753e2a06b8887d6edeb4</anchor>
      <arglist>(const char *name_, const T &amp;initial_value_)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signal_t</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>aadb7b96753d8310107768d5727dc326c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a2c72af904893741802a8efa5f4fc5c97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>do_update</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a525ffa19de8491e3a06f9c84ddbf4e7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_cur_val</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>aa7a6c0c5b61161d552a22f7956ce848e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_new_val</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a18d3142a72b4a4ca9016ace4333a8388</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_signal_write_if</name>
    <filename>a01437.html</filename>
    <templarg>typename T</templarg>
    <base virtualness="virtual">sc_core::sc_interface</base>
    <member kind="function">
      <type></type>
      <name>sc_signal_write_if</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>a7dc59e19ca2ae5f2975cc147adf70589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>aa6f236905f206bc98458c7c38d51f12f</anchor>
      <arglist>(const T &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual sc_writer_policy</type>
      <name>get_writer_policy</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>a77f46edcd83f910ca3134973b9d99bca</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_signed</name>
    <filename>a01893.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a803e21df7189ce4430bb915813738292a22e10aff744e173e38d284da008c4e79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a803e21df7189ce4430bb915813738292a22e10aff744e173e38d284da008c4e79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae46541d5ed455364cb4da7194667660f</anchor>
      <arglist>(int nb=sc_length_param().len())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aeca1054c5f28c2a8e57b3d3a00333529</anchor>
      <arglist>(int nb, sc_digit *digit_p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a06f405fb8659a988b059966a6624a54a</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac5580c36b6e0bc7455b143cc63697987</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a02f1826f33ee440a3145f63da923caba</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a64a1eb38c842d00f8d3b335c53e013a7</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab843c8498937c443b58039b362273886</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a19645de43c6ce7035963b2ec39dc47ac</anchor>
      <arglist>(const sc_int_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a56b7332adc6c7f2401896f12876ee0f5</anchor>
      <arglist>(const sc_uint_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a23e44cdb37a2a5d18496efa5cf3a39e8</anchor>
      <arglist>(const sc_signed_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a66a2bac54f53ca5043aa6d2394fa872c</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a122a76e5c123a4496b0af7fdb5c1f0c3</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af2876609323575ae8497f19d69922a1a</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>afb4c239e9c958594122c520f15e30735</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a845c27ee671cdc046f2a83713c8144c3</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af0d8a9dd6c2217ce4138f3e9e3f14a4a</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8971a675deea4a67e399bee844cd76b5</anchor>
      <arglist>(const char *v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af6c985ca0df5840f806d54e75b6ff1b0</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a47f9c4177a503bf0984b8aac16936f2d</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2483c0a648a2f8034f96ce711bd4f736</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3139ce16d0e7aea7eee59a5e4f53c7a9</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a60bd8562785de2a4cd15d1b0aadb99a7</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a0e5aa1c1fc8b6c8042b118e106dae6f2</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a57c6a528874ed04666bb982676989a59</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5ec93b9402ebb9e197a730f7f20af07e</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a7bf57430d50e29cabf5326179f69274f</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4a8bb096026b958b97b103bb93ee2324</anchor>
      <arglist>(const sc_bv_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2ca7f47fcf53ef2b073504f707a4fc57</anchor>
      <arglist>(const sc_lv_base &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signed</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8efa7629cccc7536aa46f47dbbc60fe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_raw</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aca79bd1f542caa7d743eafc45b5ee3dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a82c79dc2bcb55beffca19f380cb2df09</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3e2b445cd5ae78b9287eba61841e66f8</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab89a8c0db9fb872d47af0a7482854c46</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8ae203d8d9cb34b821f5eac876b70b90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>adc8270fd3c1fe4ec8b8f744587c9cd40</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aeecbf419d2b6a79386a5df0d5576c7c0</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a27f787401a638c42626523a9c81c686d</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab4d9b0f4b14e12f47fbf140e5a01e2d1</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator++</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2ddacbebe28135d1226834563a622f96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator++</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>acea70009e5cff04a207e508b007a8b71</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator--</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab6e4e26d38662b327c15e3ac77865f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator--</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a810327ca70da7b30c5ca1815cf23b8d2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalid_init</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a741de08920a3bf0f3ad8e2616e117244</anchor>
      <arglist>(const char *type_name, int nb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_index</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af5b98b9179f7711fa39c8b4fea1b05cf</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalid_index</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a245e628500b46881dc2680c9bc03df2b</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed_bitref *</type>
      <name>temporary_bitref</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>accc7a9ff00bd8d41a925b3aa86dc9c71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed_bitref &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae50c6b3c1d5d547320eb973807010c85</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref_r &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a70a43a6a39b7990de672d9a724efccaa</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed_bitref &amp;</type>
      <name>bit</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>afe18327606fd448f25507a9d2b131fd8</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref_r &amp;</type>
      <name>bit</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a936deed352cd8ad1666d9e7c4b7828de</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_range</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a0209fb746ead94146064ad790424bb5e</anchor>
      <arglist>(int l, int r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalid_range</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a0720f40f67b10d1a44db30c6abe03f48</anchor>
      <arglist>(int l, int r) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed_subref *</type>
      <name>temporary_subref</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2d763c5efafc18d7b41667fab33cfb4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed_subref &amp;</type>
      <name>range</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a29249e9d068658a11d7b4012495af911</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref_r &amp;</type>
      <name>range</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3356f2674babd52ae8f1fd554f90baa9</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed_subref &amp;</type>
      <name>operator()</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a94166b80d840a12b3f671b7f8d1dfdec</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref_r &amp;</type>
      <name>operator()</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>afc3b213ced42761efd531aedcd1f57bf</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a13ef7f637e8b57d3abd2251d6e018654</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a74df7bd2e6bffe79941050eee4268b30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3350fc2556746f09a9c83c1eaaa8e2a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6558a7156750f6b044cd592e6cc75ded</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8668705ea7a40cf24c95a3c810bc0402</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a631517c82d7cb9ac5ea58487fd9874d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa695b5349868fba020c66a0128415833</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad76b492b0e24bc27c1ebe26e81d9f9f8</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a009bce59b43ee0ade4b036a9f333c20c</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1e10f32a8739fbda6b8e7471546dc2f6</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aaa855fe7f45a74fb6de6bd2554dfa506</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab282e25b0cf67c937f762754a2a9b428</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab28b6aaf3a108d1a94c0c46f6095e50d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iszero</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9e80a7935d4a5e7dd95155423072c06e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sign</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a75ec167f970e243f40116915646cfdc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a526dee7a98f315d204ae82024a457eed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac7e2c7d5996f2939f1dc2e00e606a4af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>afcf904ec269b38dcf158a37ba80dc5d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5b582e0185b63ddbddfd54a34b675e6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>adddf6fbf4bd765946ced16ef5fbca3ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8e525c918285f7c3255d6e864800d759</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a21ac8b8bcc5e8cb7f0fde1d3ca15be12</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a097f07a048d3b4da7a04860d62795385</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2e20217fe4a93a4a4352a82e42cffb70</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4bab15c06384ebf1f4c0f4be2a7c85e0</anchor>
      <arglist>(int i, bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa647055183aa206e91af0be9b78e2e01</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_negative</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3bbbb2c7dc8b7c62d9be4b2dcde8e4a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2c57bfc3652132ac49f625355d665b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_packed_rep</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae0e7fef01b766627580716c9458fe6a5</anchor>
      <arglist>(sc_digit *buf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_packed_rep</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5e27829702ab24bdee5a12c481dc29fe</anchor>
      <arglist>(sc_digit *buf)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9335603204b47d8b6d7d91b52e83ac07</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a7a1fe48cb31fab2cd4994e4c32a5f317</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8bb24fd71f569afddbb40d12919149c0</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aaaac1be17b0ebfbe1fd504465e2d5a1c</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4dc0d99db53f2f0af49c4d7829b9993f</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af36fbb493e70a3ea0d11051c462159e5</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab4fc030fcba996326de53235b5d6392d</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa04bf2a05780d734194334b3b23432d8</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad56762a7821faac7afe2d9098f7d8e6f</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aeec7dc742a087dd878d88cb6b29183d5</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a67cb6d935dcaaf08909a3382549b6a1b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a7d0fb633ad93eeb21a300d4ef3068cc8</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3be3cbb66ea0fb46ff5b1ea24b51f36d</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae95f30cef71fa6d3ac9745a517c302dc</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8081465c28ba50c94697a13529d320cb</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ade8927b79039085527ad8563edf0f4cc</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>adf08e12e79ed8e3486c67f936a3050cc</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad39d1d959e86643ea9a50fcf6055042b</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aafb99a88c1f75821860390c11d4cb609</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6ef1393b79555cf5f21019a889bb8bdf</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af14a644d3c86d49e91146e2d97112684</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af0f139bbd1b9a738b2c3fecee132cf02</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>afa6e5ffa43177dbdd9d7bef5dd4289f5</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad82d3465a8ce38eccd4d10ce9bdddca0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a993b6ce72724eff8fde78004ed91066a</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6762652774b4932874881a4038a0c093</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac6d3b7ee6337dd50035b6ab7f6f63a94</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6c7d7440568cb78ed7b589def9a62bbd</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af7f6e54a8fe2637706139bc0f0b1b212</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac4d37f4338c454d4f7076df50b856518</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9c184a109acfa44595094b6a38443801</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af72f6ed30ffbe7f3f67ddf43868233fa</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3ea9cfa9c72d4ba20e991bd02dc13237</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9863c924f5dce31de9878a1364b6c0d7</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab71d21af24874668d1552c50182abcca</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3150df55b854a1ec9bcb33dcd27bdc40</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a76f90e7576afb17fbbd7f9dc9a63b72d</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1836800dfa13dbf78ecdea8952bb63c8</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad2884fc19707053f0d672bbd8a759960</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a0dd32a730ad8a0c0ac98d85cd2b81966</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ada14393dfa7251ee62a4937b4d47d5c1</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a365775dd231f34896b840a7309f2e2e5</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ade25ab307bdb1ef1dbb3f06fe5e6bd25</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae418acd53628367b09e6ca58ae41724f</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1d6dc9cff6986d412242d3859136b70b</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac417b7900d3e27c8f10da59146b49a46</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a614802f2d590ca77af18bdf2d56c04e0</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab2735becc67d2458f88db7988f56d50e</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a548cb6a344c741af5481d3a11ccc62f9</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a12e1e2568b2c26b006afa99d83790a7e</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2610c817980266202038888e3c1d63c8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>abbe90854e1bb58e797a5112fe43cd64e</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6f1451674870769860dce74900fdc3b2</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>acb0bba389b5c98262133505761d0bd8f</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a804701103aba6b281f7496db670a6745</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a90ba8aac0a6218147b7cc2ff29faa740</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1ef8ba6bdcbf8dc72561d4ad52f1a2d8</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a22a46c026642de7aae1f12cb94bc7aec</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8e3d898a15a9bc8f3e5aea4b03df874c</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3177b805b02ac93fd4b55e2755754f70</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a67efddc20c840fd7857d09c519386820</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af1da075e0f7e2371545d5d351a3530c5</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a225484cbe9bff83112d40125112123ba</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aaf068b08cb2e5acbb6734ba844ed1f3d</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae13a8fa9e6c4cfc8eff111b0266131fc</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a174bf4a9dd02f43045c85fddbf80db4d</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa624158d21b66a5f4b189eedd77aaf46</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8aec246f4155167d70e272c818364242</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>acb2b46d23abc29f766d087cede055893</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1206645eaef9827a09882c537b22f0ad</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a486b742fc57deab750755e5e00f3c9a1</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a440f592f39c77067490c081a9ad8de5a</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a020669123b313de4ee2ee823e65a8ada</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af127a667c93ba0139613bd0386c51730</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a263a6f1ab592d536e149725f10e2c2ab</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab2473b4c2f8a5aeb26589846386f5e3f</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a10f8d6e6e7f4321f28d4a20b45972a1a</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a20666bbd06d7630a8e49b60da23a1708</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a04ee31636074351f474ab5a9af40ca34</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a96e7024e7ccd05bea172f7f5cde093e4</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4c6d0296b27e4c1e1c2d6d7e4fcbfb99</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a619891e1200229b691b20c7b6d1d41dc</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a45711a3af4996835ccb97602a81dca99</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a18a30bc0f0992646cd3f7f65547fd246</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aec73efd3898816213a85292e7be1d3b9</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6a346d3459568663b775528b6de8b3cc</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a86d17722c9e073eec313108d010a73f8</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae237382ec176d958edb7dbd682562636</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a74ce332c131a610b18d16a7a7e10d142</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a554f1017a109570dea47820ce646c23b</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a94d808cb9907e0753ff30ed026241860</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a279bbee5fb389d49f83470b23826d47d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a25ecb2fea827fd5bf8c298fab6b3b538</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae4a0d3960e9a6d8530b2a2c8fb9cbeb6</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1bd7d86ceb0da00c7dfbb4e7e3921357</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a90be7cd4f731bca42bf3e18588384942</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>afacce36df31ec94efe7de62a5a8b01f7</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af9f58f5ab57429b0afc97bf5dd2503a2</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>abcfb4da2673b649ac4df904b0c13cf07</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4f98fe5776843327bdf12333011ac7f0</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a46697ebb01430f85d140000e57121905</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>adc546ec84723a4da1aeb1e413ccc7902</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae4a1185b316b465c3ae67c52e520e33f</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac17aa14ddfddef7eb7739437a6ef890d</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2e9b0f5033ebf082257e7be462829daf</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>acb589968a4538890fe0686a17e28f6af</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8d559804bd4945f59efbd5c84159e2b7</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aee8e5fb19b1e23ab8f357c8937d4aef6</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a75bbac0eacca334297857afa0b9d6833</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a15bf0843fac8b2166dce32144cb3c7a1</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5dadb7bd6879cccd73d0f35cb41430a4</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab73336cad9d67fc77e696809fdebd15f</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af25ee9db9287e995602a2f92b2e12302</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a05c992961bb6a8417d302ccb07144ce1</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a388d3b89e2da43405811749a8329e709</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a53da6eab30bea146a138392d4d15e86b</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab15a0d3aaaf6c3e115b96bca6f9fed93</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac53950cba6fd9eedc9c7a41ad18a1e19</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>abb6dc0e38ec2341f11be4fc26e9280fe</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>adc724dd9562f8fc9af6938fa81f2dbd9</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1a1d52195eaf64b1c01a274a80bc3efd</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af6d16365451a681bafe0e033b64ebce1</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>adbf3f8dc7d7dae5a3f699cdbf11ec5c1</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a00a50354fbe2139e1789a4fc676d5e77</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2ee1f0d12fdf7b455ba6c40d95559f97</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4aecac0d79437bd08a681ae93f02a6b5</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6715d565593ab0fe7e1e488bdaa5b926</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab10001c57da03510d0d21a8f26336990</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a7a2ebdef5238e7081f3b852952782a3c</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad682abe0e541d45fda596e079e2b2652</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3679152d5f0fcc42e14a3c69770a5a93</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9bd859f109080ec197192dddabd23d7e</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1c63a80f7e692b6d19da361532c2ec6f</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>affe0a2411ab579ee289b97246405d1c9</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4c4febc0c9b9a47ac23dff698c50e3e9</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a004c25be3488498ca9c38d3e11f74d0a</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a52bb02184bfc3da67896e3b31cd5fc68</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac2a33c61e4db40a13e3f3c056cf7eac8</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac47a51af2036add3e09c00a68f7ed637</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a98e6ae0e9725df009700c8e497eb446d</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa92388cdbe36c94ae9201ebb924aaa59</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab16b5d12ead4b1a0ebfb30b940fe5ecd</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac99bb97197ff0033540b3250be536c26</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac3d65c057cf14a0cf58f10f57157251d</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5c9f4e3aaa1e1da76768fd720a4df67b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a69a417880adda44f73d7a6cae1a39f76</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac1ce2bda501f1d4a10329ae4c55d7a58</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a75bebe1754c3613b8cd62b7318f33c4d</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a00109488e5209c0b29ff1af1af992642</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab5bf702d6246860dbbb598f087f8fdc2</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2e984bcaed09464650d76601bdf412b5</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4c8d5c91b4bbdd02188b937909d47e2d</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>afc4a5428f4332bc5da5914ddbb8012b0</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>acf4b82176674a58d6cfd89ed06c4a368</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a260fd158ba51593957f29b6dbec2780c</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a497196fbc8dc8e9dcb3126ae9b9e4b69</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa04b5a5cf1a81ee055372ebb340316a6</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5c3a7c7019e828359b3827edcabea232</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a7cf36854730e6be1452f3f5874695b19</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac296210c3e1363eb2e1a2d96d39ec4e1</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a0f0c4176c03a82ea9f0290dbdc6f13c4</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>afa9bf5b026c41f790da835d219c67403</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af2cc20942de3fa809f72e63deac9c0d7</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5cd27e40d63682059363056abac8eb3c</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1ced0f886b2865c9a416195f7a828fe5</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa28c49185e8b12822a4ae0759374f62e</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5a049d3a4ee0e771a1d3fb1ddfe17ed1</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a25a5400dcd1ae75560b2978ef470e205</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3a2e928b78fe066987c3a86470fcb58a</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a54e4fd898eaba3b96d0fada951ca374c</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a579e1eb63be611246d35194a69cffbdb</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8ccda5016e740a7917418452c7cd80ff</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a92e889bd27e9ad717dd59ee9433373f9</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1a3e8f6ea60a94493f8e519d135637de</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a94610cc208347f5b2d64cbbbce373607</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1ccfbd0d5b287067a1120fa5332e64d6</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ababb4a9022c9edb760b0469d07b1feae</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3bd8820bbb8aed8791db07e5e7eb418d</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>adf5d62c9ea4ba1068532175ce6540650</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a465d29aaecec5a0f074b17978635b7fe</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aedfdbe6c07b596929390bb176cd3f6bd</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac79524b7f04b61619f3ad44fae3a8e6e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aabba227460ec2398e547fb70a29819e4</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4ff3718e70b5b8589658c065ce915021</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1e029aff2b7cd7f16d8a0379aa6cf1aa</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac4cd976cb41d23fb0d0feda5436729ae</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3a9f03dad06c3fe4a98f5761191e9f6f</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae376b9376c41d049a87be0457ff5ac95</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac136e61fbbeba650b371c8980687fb41</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a67ced6b01d8856c010377ddc925e4f3c</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a01a5e9ebc031f1b8cc9a40613a23b433</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a25156319112701d1dfb42d9c9b6cfefd</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3c25d37a74d158eddff4b537635b48f0</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6a65cc27d703abd20e5966426399a92e</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad8d60dd563ace56a2bd29e470b1138f2</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac5078f3d27ae3bfef7a83cd859c032b7</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>adf765fb2805161159e0a43f39b0ef460</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2866bb32c751a26b5bcf89eb96c31b71</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8da4a155ad5f07840536b9b3c52d7e48</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a81387bf4552fa2794a792a09e647feb8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a28346ad02db744eb5ee49e17f02b624f</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4a6193c79770022d9ccf68cb2da2048d</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2c6f81c8d79662ab1e40dcdd2d931905</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9977ed8b101ad676049cd739dfa03cd9</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af791082ee907d8c61d5766ae77297fa5</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a7c423580f934d705ddf33343b152a2a0</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a11d8d0bbcf3a150916211313707097f6</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3cc610cd0a72063bcb8de87c611a70ac</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5e888d29f9d8d8ab52a6c8b25f217196</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab0d18b626574277e309ba1230edac5d0</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5e280c03a82125a4a41658cedc4504c6</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9d407c1f3f81476f5f2e4a0ea9b4451b</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a7e0578e7ab19a3850d26b3c01648228f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a20563624cd6edbb3a6d52608fae55de3</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad6e84847e010044f0fb6be84e28e582a</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a7f28f0a872f991d377d7509649b75d1c</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab1cfe7702ee92becc9571b073f663ca3</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2f7e3cc6e8f466e411f2122599f3bff1</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a63caa5b4d10de388d7e77f77bf182c58</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a146b9a61e89a007b25ec82de10da3947</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6fd821afea56540f0c5c06808c792d6a</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aca9ce40ed837261c8021c51d9c0e69b8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a938467c54ccf0f8c6c2ea27ed54d3676</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae9ba8a075d4efdb0cf5be75a334ade1f</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a290c1f0f86e34fba6d58dbad87369379</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>abe2658eb89e35b02736b88e2b34ae919</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a12dabb98adf0c0bc7017ac14576241c2</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4bcdcd7d290f49970fbc2e8c8415bb98</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a46f8c5602bc6f2f7a4f4d3542075cdb9</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a973c13367f8a4442b25b045cd52da1ac</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aec750a4b51f0cc093bfe5e5697e918eb</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a15acf45921ce80708729e03d67dc8609</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6bb613adbd7f5d900cc0f9f1be20238f</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>abf0cebafc5f8f7e66835c82aebe1dfd8</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a31d138bc8bc6b28904aa6634d4202182</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6b4e9bd84d63dc0dc22bbe7dd4924447</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a0f85a7631e2b726677bc4824a5555e16</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>abfdb66c703e80bff70a0e9200bea87c5</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa8608d9ddee08b0d0edc7927aae22ad7</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a149027d640e2903c11e7f1b77a0435b5</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae681489d0f2066f75d5f3774f57c1b33</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af2fbd73635dacbea1dfd47f155dfb68c</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a176f3a06948969f73afcf3287f3e8fd7</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab098c0d67c564a53e4ca54dc90fba51e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab518b2c8908f73dcc0979739cc32aa3d</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad9f1902b1de6ce80a0cdc5452a080b5f</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a7ff3c1189357b1964890d334de16b639</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a85bbd3dc715052e7020ec4ee68ac6d49</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3953aa131e3d31541bc59beefdae4cff</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1673d27fd31952c6899dd84c4085fc63</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa71da4dab11a8fa50cf68a6e5e652a6d</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a34c65ee102bea0be8b37dc96faf8abc7</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a705ccff7d0e6dcf1528299187113eb54</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a04975c21cc4ca58664c74a34e16bfcce</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3b0b4f03bd5deb42fad3bd076058b1f3</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac45046d76c93f2ec8450b3e8c82450ae</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9fec46d989f948dfb79c3f8175fd7599</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4fee871a21343cd0d4a9a687b7ad7249</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3ebda21c5d17381a263b9d4b8ba98743</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a088ce0ea594937017fdabb13c60e1821</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a497d7330455b2eaa9d05694ccf452a13</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8a62341fc89236de490e3915e88980aa</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab2071401e39bf8c3e3b73e8ced9c5eea</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af3f8a2bb923d4352ea2f2212573c84a1</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2bbe9b1a98c07bc2bb449f29f106d496</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3e7b08ded33691b9fdde2a2fc62f2709</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3aa4215d3cf598953ad6af8a475615b0</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a58ea0aefa36f46c41a349b24da30b0ac</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae0ab9e8b1c52747cedded2a7e4866ab3</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a29c2c2404693f57baef9f1ee90591484</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aceb6f77dc0e7ecc68f2e390ca471d01c</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2a3e271c330e88e0c33b233d8a9b7f7c</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9c97101552ecf0a87b0ca298bf168836</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a894d6c9d3d218c657273aae3747c9496</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3f2ff4d628a5b84cd348f497f9d65424</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a75e0005bcac4ec20b6bbea11f83ba228</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5dbba3712b88133ddb08e7ce5980b972</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6ebcf945875122c7112abdae42cbb6f2</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3a09eaf210c598e4ffa97b038b90ca0b</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a40d226a4f987108bd034540c8ea9346c</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8f4e61a80b745d2bd46259e857e8010c</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a83d8cda8cef127774de1f88d473fc765</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa0df6bec413144d05a4de5d7434a7bf9</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9873c5afead21d783533e71eda31e940</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad33b6f8f650b47958a62d79822ab21fc</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac6a6e1a9a2f3945aa1220319df60fc1e</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4cba28bfab6e11c55668c92ec51f2be8</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae1d9334eb507f8bede18cb24c275a846</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a35d8692dc9eba078d1a09938e2b91277</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4689364df56c6a955cd14b539768c5a3</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a486f2d39f3536a6c768102ccd7da0858</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6f96ed900bda0c7f14e1dcfb5d725615</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af6097e972ec810abea2d648e13e29600</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab9905cd573ec7ad39f537357b292cf7c</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae227590f2249cc54c8493795a0a277ff</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac00b8780348fd807ab52d4294ed1e251</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac3598163b57692d094f1961a98e47887</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a79949b7be182d40e71ae864363d5d064</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a942a423298aed3afd5094bef4f55ae75</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a060db2a926808e00c0c9af0e17c3380c</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a46d4cc26b8386bc67645c45c0a112362</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>adfd445f11cc8691bd9b0d9a247ebb39b</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3d71c5cb0ffad72af0b2999cbbf50fec</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a19d85e9fc05cbb9eb2337b666cb2297c</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6c6894fc965d5ef7b58b2d85cc2f405f</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2bb8ff71ab8c4ecd529d3370bf0239e9</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>afd413df2cd5a41845bdec7dacde5a106</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad43e126f0474d4a946fcf9bc179fd218</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3c6a6631f922e6a2a2f48dc8cac5a822</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a91b0b897bbf20339f9076ee993458816</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1ddb61e667519c0abb43e9a117afbf65</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac7967ec0c07db0877e8b98a157e422c0</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4cd333d28871e86cbf4c590237f803cb</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5e43f0f60f3c00227e1c012ed6b98768</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a278122b1f9cd5dee14f8e9e3e8feecfe</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>afe50fb8b97b603aa6242c8b6dfc7859a</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac6eb6e51997889704cb89ba33466b8c2</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>adb415d7bd546fa7454b8b9ec1134c8fb</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6f566744dec633b4a50664cd0a3ff114</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8564d2dc4739ecedf49afa4af5930584</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae5034a18d96c083bdb36093f75b63fa8</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a427c9155071c415e8855b84e80834d1d</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>adc152fc9db9edcb6d9eafcba1675dbd5</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3735eb5547421ca34475f4d612077f57</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad483312f6339ea787466a8859ac102da</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a349cbd78d3ec0bd9f7944a6814d24a46</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a13930baa70578dfc387f6a8d5701ba80</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5ac4fc9debc0e7ff9e3d2fb97dd64d20</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a52569270a1ab00dd87d153ea63efe50b</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a51c3a6368467c2de81b3c7e4b3742a7b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa34461bc4afc9100c2d1976ed298fe77</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aaad782fcddd13d95d9d1300da5f0aefd</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac37994ab3ca0a3a938053062bc7eae8d</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad8a17ed83263e11e710641219e2f6d26</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a74b817ae546d9ec2d34a316f293d552a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a0043d9601ae858665d2e77c31cc178f4</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a54f28bb823872da7b783edbb36626072</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>abe9ae548c2af61d6bc95fcda2300d15c</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac44b33b4e950d31eeea4749d83c85a83</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4b14b0848e25b670f8bd387714b0291e</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>adef58c1f82fbc8808f4ee7591eb7b4db</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3b34cd0522914f8c88c788c90698907f</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>afda716388ae9c01f83c431cb6a66e21c</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2e1f3656493cb0d3f0787139e1ccb3e3</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae7385ac9b042090f3854043f3755e23a</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a622c2a915d51d56f697c82d352e46248</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a15efed41bbadf8cd90f07fd1053eb1f4</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad651e399538be48dfabb64edad14a080</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a0ac18332d432a1e54e5e1bc36fee13c9</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a551e541a1ede1f0497d2fd5cd46713df</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a0af32a591594f7be1dcc9f790d33c8f4</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a293393e94a697bf2ad14864e061a3023</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3086250d38fd2af07f8a90d4c67ad211</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aff3945f5f84f5c2404d8d3897e1f7bc5</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad1cfab26ae374805c6dc26b6f269f616</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a15e18fbe4f2d2325f0c30824099e9f89</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a7e612bb9a5039cdb2c74b0125a8654b7</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9299dfd286c50336e4e7594147d85498</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa89b9d4c1bfbdf811b08e8a3d712ebd8</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa1cd2a2a5ee4986903802d74dffd34a1</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a88a5e56062ef61d93572f7eb87bc16da</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a26b4abfbea95b7fe692821b55f6ec5bf</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aaca9392f1bfca5ecaa0d0832a3a31e3e</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a11829edbba9e3bbf9e220e04a8e8217e</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad234c7c47f3be70240d1bd565d28690d</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6da3c78f8e540b7e3aa021d3500a204b</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a94531ac077e4b5fe36bdc2a6d11162aa</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>abdee7a384c64482e0e24e4b4f34a1b42</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a815f3ca88a9d3e6caafdde4d24ca16c9</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa66e51e71201878a76efac3c8596965a</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a7f42f0f1c1a8bcb07a311490e980b14e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9ffca270484093bda09054b60e71fc92</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4f7b19ec5afaa9da7fa6d3bc07be5683</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a779d60e1df5f99f324c284c98314fe22</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>abeffde30295bcfa01bc5493f26912d1b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a188520ff5c88c57c046a569997a2ef51</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>acacb0ae71fef13e0fd59f15026c0ed58</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa4ba015b46555f5e4853d3cfa6e9817f</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad51d28b858dc5250cfb3df8f1b546055</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4f67819b64599c49a204eb67a582017b</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5397fe755b15530fa1207790902c72a7</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3f7bb383f5d2fd7f5691b8c151a38ff7</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a89a59b1c013384812cf743a7ae5cc347</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2852c1d241bda3785249a3e9be3eb1c4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a69a5b5c5869fae0b300da5c942d73047</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae90101192b47cfd975b933fc11b62ce8</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a0b19ddfecc7207e00689ceb41f70ba77</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aeeb7195dbdabaf52a905c6762bd8d65b</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad698170c3e3ac0930b79c9c8741328c2</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa229a2bc0a86b9528e7945a8b88407fc</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a142fd6fb888def8b631bb17b7599dc2e</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a7f8fb42e506d131110cbed53ac81fb05</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a51baf18d478fbc13a1581567bf74374f</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad1e15a5e3d910e06d3b58ce6410cb1b7</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aff1c889ae4f07379f1c04968070b9a3c</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac0d403c136b61774346a6e24062ee8cd</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2e686fe19f81f6f1fa8fd050c3d736ef</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4ed11d162525289ffc1683adfdafed1a</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a72a5f2e66a5014200c32546a1e509bcc</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a3fb93eb8d2e16cd1e7f1ea3692e1644f</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a575d6e1f910a61a97e5c98bf5860d5a5</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a0bb6f93fa2afb08deaaf3e4b23dc9090</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9fa43c51dbcb034f3dd4750254c09122</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a44a7184259d13616a569deef99385b58</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aeb5eb45b15515865ca4e1f54b080fcf7</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5f8b832a40122e75ed4148d3424fad86</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac345207e002601da1d3a15d1740387ed</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a592045e796ff17984484f1f27e811edc</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9c2292ba3b8e4fb53a68e32af3f0906d</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab8fe9bf38ea2840e9ec361d9f3472e5a</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2bfb0f9f624f7479a8db79da0cc3cfd5</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8ba8eea131ff6405d0611281223ca68a</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>afc575f3e7d4e1934558701f8d3877b2f</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>abf47c3629eddd05a487eb98a32902acc</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>afc0ad625802285cf90fa24e5b562e5fe</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab7dc3be61b534abb16c8383c2db01376</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ace82599773b462e31d34103af62f9683</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a711f7d901fbab9a41e94426b6e6a7751</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aeecccd6e8c192d225c0da00f732bec63</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aea7fb97db1146f28b16c15b1cc09bbe2</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aeee73e622ce119bbea930bd632cefc39</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5e279d914dc4f4f5532f499f5c0f3db7</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8aac528b61e117fddba80ff1392eae8f</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9c751e07c303726d0f2037c88da25952</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a345ec4c20106537f9ad8b88e6e90250d</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aebd260691737576a1b40f8ab9a6c6fe8</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1991ca8536a5fe3ef6c3115f614ac561</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a167670a4959dcb34869a9bd32d78a568</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad516702b9d0dca77a0bc5e81b4bccf7d</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac2f78440b0409bc063dfe94a434cb458</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac9a75ca572fbaade12b04d348847a472</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae8dd1e5873169d13adba0cc98245c83d</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a07fed2d1a1d0b19627cb2cd91ebc96db</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ad46a893adf3a08187f415b87b64d2dbb</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a83bb1aabab36f9cd73db197b5ffe37b7</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a0d7f5425c20511dafb2061a86362c8e6</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a730840e03d2596bb88d1dacbde4c67cd</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a03e769ba8162f61eea43d57b1f388ffd</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af5b7edba275dd25fa45d605bdc3f50c1</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a05ac1b597ef3fb569508824cff996572</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1aa04ef3d44e90ff81dd97260a42a83b</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5b1f3dff448da87273d5b562c5862b41</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a90b50921764bef878b787347c98796e6</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5d5c4026e543839d13a383af0439eb02</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8291cf3304f232c20de34a99140e5e0f</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a47ee079f61f1523e3be7a747c2f1d5d3</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a68a6dc8c2c3fd9cfc59aa8f0501ec9e0</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aeb719be83a67578a7859955f94afcc10</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae12f2f82fb476f0d16b034f09efb22a0</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a264fce4844fac41f7185af1e816b7741</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1eb337ff1df9d3bc4644022fd87da781</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8d10648c193da22cd546d23c31c8624e</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a21d21a58cf2c70eda59aaaf44631d085</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a541bddf624de2f7cb3f20e4835f98495</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a1d3ab679967a59a681f22809b1b54a7d</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a71a45e8c418797d37fbf481286e9f600</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>afcee4b9d17a2ad1d4839045dcc878ed8</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9143bfc781eadeaf80d26af3dcecbee1</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a2a30ca5c2586f24221fc0fbd50e996ef</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a97b489610578b62ce8f7f3dabacba10e</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af5a189859a7b39d9071931a459d1e750</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab483e541f97674062ba89dbc1cbf72b5</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a051ea0ff027ba4ba76a19135171cfeae</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6d48ab74e7ecc2798a798f0e2b858a52</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae38a5c44e71670a195684896e00768dd</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa57a11484ba16c452ab646fb5a070d87</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>afe3ad5eb65312fb0448c2dc045978b68</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a197795707933fbf1e9a94dbbada7c5b7</anchor>
      <arglist>(int v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9b246f666921e1a16249ea45ce18be97</anchor>
      <arglist>(const sc_unsigned &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a81b83511bf8a9cfb9fba6d0e84fb92cf</anchor>
      <arglist>(const sc_signed &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab42a49f73ccdb956b08bf31e8f891137</anchor>
      <arglist>(int64 v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a86ad779abb2c226efad45a5cce896f56</anchor>
      <arglist>(uint64 v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a79032523f8899fbce39c02bec177c00f</anchor>
      <arglist>(long v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4bbf19ce29637a68d49a2417b29616a9</anchor>
      <arglist>(unsigned long v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a31649e8c180ce71db2a58abddb94cb09</anchor>
      <arglist>(unsigned int v) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5f55a4f62ec14f7c5614a7d4a453f9eb</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4d858ea0072a83fc7be572db9d71d69d</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a6932d187bca01447f4f78342815c3f1d</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>acbaceea8c3304fd59764fed40a1895c3</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a242eeafe19348b0ec0b23d6a26e0065a</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>acdb648926724dde42a717a1de0bfbf14</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af8507b52233231bcfa75fe2ac2ba3cf3</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a07d7c0f94b0bd955d3ac54689e205b7a</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a0a086c1ecc281e5c1e8d3ffe6e40f11f</anchor>
      <arglist>(int v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af1cbe79ceea4bbbdf349eb90407f2914</anchor>
      <arglist>(const sc_unsigned &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a09ca453c9859190073193b8fc9099d19</anchor>
      <arglist>(const sc_signed &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a01c85b34f46ba990339ae79bf2d5bcaa</anchor>
      <arglist>(int64 v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8fcdd1a3343d59e2cd89cad341e08f19</anchor>
      <arglist>(uint64 v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac4eef2d921650b3b489c6b0cfdee3859</anchor>
      <arglist>(long v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a576613d028ada3e83e07df6dcf0d51b9</anchor>
      <arglist>(unsigned long v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a28f944368a976f91fd590ea191604d56</anchor>
      <arglist>(unsigned int v) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a22124b9cd99d1d2ee0856c4b6317420d</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>af027797d945e49bc3e679a945ef337e9</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a0c748f17bbc9bed24e2d4ecb8de107b9</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a7142d71f40b18d35d0bb7e89228cadbb</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5cebd83b6c41b18040a53d05ed10015a</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aef474d1fcedb972cf8e1679947021aff</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a52fab5421726a08d5b3c3273d83f2a5d</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8dc8e0c37272c4bcef2aa32773c960f2</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>digit_is_allocated</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a340b8090dd9dbcd37bcdb7a5917a0d94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_actual_length</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a15d7123042ca91e9b68361d58f41656e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a631f74105782527aaaf4d8ae6a2f8d55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>acd121daafff025168a639ba2d2e6c114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_digits_n</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ab17be10d8940e6f932521a5dfc11fdb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_hod</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a4d75bd5ef4e5ff1181e5634a43811f2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>adjust_hod</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ace1182b97873b94cb328e0edfcd64103</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nbits</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac77b74a73d4b2d0b241934ff1d73ce5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ndigits</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5d69cfebc53d10f32500dcf30e1904a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit *</type>
      <name>digit</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5b91835e7e8bf3385d23f80b38072f69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit</type>
      <name>base_vec</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ac79e5a236dd5f03f29a5ff024d130d81</anchor>
      <arglist>[SC_BASE_VEC_DIGITS &gt;0?SC_BASE_VEC_DIGITS:1]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_free</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a729d96ba22d8f52977d0b1aa7dbe3906</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_concatref</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a58586acadea2fc68be0fd227f1708d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed_bitref_r</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a11e6c116466487560df3d625cae9b3be</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed_bitref</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a32a67bdec9c901ce1bc576f758473f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed_subref_r</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae49cdaa43aed9299ff33a85831d0321a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed_subref</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>ae83c9b2d4f5ed89484c4d7d7ff810aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a837324da08b9164ba6f506d2892bb614</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned_subref</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a89c21a388a8a2e533390deee582c458e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned_subref_r</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a9e74c1b726f98535a147186bf84bd5d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_bigint</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aa0ce2b050c01cde3d2a144d5b5834b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_biguint</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>aead48fbb3f99e15b3c0264e6cb36ecf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a68c02819c8a7d7bf9ed8830f18a6a2ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a5fca710fa913341ccaace9aa5cbaa9ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>afca987608e11dd5f9b4661d737e7f5d6</anchor>
      <arglist>(const sc_signed &amp;u)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a8a682a8d2e360b72f23d414974946cb9</anchor>
      <arglist>(const sc_signed &amp;u)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a0c613bc9c3843a80148d737732bba527</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API sc_signed</type>
      <name>operator~</name>
      <anchorfile>a01893.html</anchorfile>
      <anchor>a495952d25a0a02e196acb2c9e0a3c612</anchor>
      <arglist>(const sc_signed &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_signed_bitref</name>
    <filename>a01881.html</filename>
    <base>sc_dt::sc_signed_bitref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_signed_bitref</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a54cbb050b8f8c96111d2dc1374c24b3e</anchor>
      <arglist>(const sc_signed_bitref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aea1a7b5ef4fa6e501c34b17a8b32ac5c</anchor>
      <arglist>(const sc_signed_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ae53d0aafaeccf8da70c2a417480925b7</anchor>
      <arglist>(const sc_signed_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aabe02d6a263fd1edc77f4b280cb7c96e</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a85131309481a0e92bc6164ac0bc53d85</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a50f75f66b43881fa75f114413e8606f0</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_bitref &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a2036e70e578bbd32af32cbe05ece79e7</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a21faacdf01331334f345738614b5593d</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab9cae4c9722fc06b8a7c0b1a6bf4330f</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ae223256570e774c0b31e3409a75d1a3a</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a038a5a6a29bc118d70e14dfa2fcfbc58</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a6e56740f11f103fdfa86488e866b6ae9</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signed_bitref</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aba6f905f67814dd914019fd66e81a955</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a56d4b9d8627ee59f62be4002d3154edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_signed_bitref &gt;</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a59037ff17480dbf07d8cef3d06ff36ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_signed_bitref_r</name>
    <filename>a01877.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signed_bitref_r</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a014645a4f1f1b28dabd5b6a66f2afc49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed_bitref_r</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>ad47977394c72b6ac4710b23e4978643f</anchor>
      <arglist>(const sc_signed_bitref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a1be780b721195771f1eeb470227a0bc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint64</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a0381b5bd2d49719dcda592be4153b499</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a9954d0393ed6d175d6f3194f31a191de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator~</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>aa6c40f7ddef97e2b5843bc7c802578c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>value</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>ae5ad569ea93032698b28e9bf214fb048</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_bool</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a55f37c777192350594746acfe7218b49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a2d75fc7aa2ca94a4062cd9f94e4b3d30</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>ae23778d155829631fc992aec54b74b04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a3a25b819d2c088d1dfbc624eac2e26d6</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a5ce018562a155e47d01a5b9f09860535</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>ae7dbf6c7a934b60c1a4f710d03a2a083</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signed_bitref_r</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a0501e7def0fbb4eebea773a8659ec715</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a4e30528edd3960d96bc154806e3c9926</anchor>
      <arglist>(const sc_signed *obj_p, int index_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_index</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a2992a3bf76bbcaa6ebf5ae921129ebd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_signed *</type>
      <name>m_obj_p</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a618a0c55dc63f5e75140e63684d5c469</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a56d4b9d8627ee59f62be4002d3154edd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_signed_subref</name>
    <filename>a01889.html</filename>
    <base>sc_dt::sc_signed_subref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_signed_subref</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>ab1fc6f49a2c78be3c1b8da9309052e8c</anchor>
      <arglist>(const sc_signed_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a0c515386a01e62f874d1f63f80190633</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>ac54860192965e6479aa8a758dbed0d82</anchor>
      <arglist>(const sc_signed_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a3b2a765c3e14e0d9cac3b3ba8977cebc</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a940d3f9c3dd11cb95b7059a36664fe8d</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a04d4ab671457c403341f5c70f4229349</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a037c22341d34597733a1af1823de8101</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a3d099a2eadbc02410ab65fc4554021e8</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>ab1adcfb3df3fa886bd4b02c9437bb2d2</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>aa8f7a999742ff3d2dc5406a36fbdf273</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a8aa447451532d6b78c9739cceca3d997</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>ac1975359fcd1a70695cad3727093421a</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a574082123d664f5c3c8ba7d5223561d1</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a974262c7bf418c71fa39f4f2cccb6d16</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a2040857de4d4636b03347944759e754f</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>afbabb762478e55b3d3e6731c3718b054</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a1df4813c420258f2c5a18d3f3dda0be8</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>af4a9caf2e77292cc06b355145b043c36</anchor>
      <arglist>(const sc_bv_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_signed_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>af6c671dfba05b570d29d66cfbe1caba7</anchor>
      <arglist>(const sc_lv_base &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>aecf2606ce554c6d16d76e9de0fa8ddfd</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>aaf7e2a1cbd3611ca4a8e84036c8ae173</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a0f2422b7f3ae9216060269fb86d616b7</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a9b91edb296e5d6ead4fcab66e35065c2</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>ab0472829b30cbea940e085ee3d392d08</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>a56d4b9d8627ee59f62be4002d3154edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_signed_subref &gt;</name>
      <anchorfile>a01889.html</anchorfile>
      <anchor>aaa2aa269d40aafed20e27b90ef867110</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_signed_subref_r</name>
    <filename>a01885.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_signed_subref_r</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>ab3dd2a3dc0eebc7880b7af39afd9dae9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_signed_subref_r</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>af497ddf1b8545a2687f05f2ee7b2ef83</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>ae9a16a1d52fdff8649caa53e7978cb68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_unsigned</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a548b74dab52adae0c1c6dae657b77fa6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a16976c59012bb02dfa21294f4f2e27ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>ae54b9d3a3374e78cf672e7f9e159028f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>ae0eea8cc1e7d40fd95fda49f95ae9651</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>aa567042202588cfa00e634f393dec841</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a4ebe656ed0e83596a7f08890543e0cda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>ab0852991c50434a742f8bd34669fbb97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>aca5693b5f957fd3fcc02c86362cb7f00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a653a8ffe426ad8dd94b67954ecc6d177</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a7c0730bd84adf83d9656fdd0df4cd990</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a38ded6c84afe1a5f7329e45f4c5a8263</anchor>
      <arglist>(int v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a401a9096966c3544b85f8a71e09cb2bf</anchor>
      <arglist>(const sc_signed &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a192bf587210c88098f004383ea6606f8</anchor>
      <arglist>(const sc_unsigned &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a2688e2f3798ac90db66931dc73b6d2c9</anchor>
      <arglist>(int v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a3d3aba0f85b0f66d9edfbca80acd716d</anchor>
      <arglist>(const sc_signed &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a7fcace2edcd4f3c0b1f8aaf8cc0bd285</anchor>
      <arglist>(const sc_unsigned &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a469acdf388368ca6e2e64020ff0db715</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a5e4087784ff7efc2260cf2a9b94dc95c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>acc6cadc32ece35cedd29f145f0e98d3d</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a5fdb9e42d3df76a573139b269a0becb6</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a37f1d448eaec1fde3eb1ba4f1fb5996c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a9ba207c067a93d595bc8ca35414801d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a1323d9494c5e445078780f21b4638533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>adf23dd22645a7a4835b87ad64b0f23b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a086870e25d3a4f3c5b6d6f62c4c0c93c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>abe95f79796613ae6b862599ffcc1e5f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>ac7de633033975543cd621fb0fa842a49</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_signed_subref_r</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>ad23a781217aa1f6925f38220021224a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a7cc83a9288f69895c9551016ef6be718</anchor>
      <arglist>(const sc_signed *obj_p, int left_, int right_)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint64</type>
      <name>to_uint64_reversed</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>afccc39fa32f9fadc7d1958b196061e5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_left</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>ade494f8e2693b396d6638daa3d3328df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_signed *</type>
      <name>m_obj_p</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a64c5d07b785cfdc127de2d0d837f1a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_right</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a4f5fb601aa6928dbbd6c44ef41a1d99f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a56d4b9d8627ee59f62be4002d3154edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed_signal</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>aff3099a7eb72fb330a220a526344b538</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a837324da08b9164ba6f506d2892bb614</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_simcontext</name>
    <filename>a02209.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_simcontext</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a9334d34b5a07200809a59ecd9804eb90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_simcontext</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a6782644b749b256b71907fbb46a06afb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aa9fe599fe163deeabe4a1f5d119f8d4f</anchor>
      <arglist>(bool=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cycle</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aadb67731a021e8ca68e103c3f68f5b85</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simulate</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a1584d0dcd7cfb3926790abe371c56667</anchor>
      <arglist>(const sc_time &amp;duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ab9ac7560758f5f9929a513b7a931401a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aefc96234c50bc5138f17449cd55c59bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a9baeb1082852ea3d274a1c57cb9edeaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sim_status</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a4e8089023e9a73d3be9e1d873a1de001</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>elaboration_done</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aea2deb0ebccef6dd978e774dde6c593f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sc_thread_handle &gt; &amp;</type>
      <name>get_active_invokers</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ab30b0f7dafd9594e1a1060fa93e752b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_object_manager *</type>
      <name>get_object_manager</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a6aa980c35088e698fa2d3aa1aa68c98d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_status</type>
      <name>get_status</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a70201b20480b9c30d29b850bb04557ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_status</type>
      <name>get_thread_safe_status</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a853649621170f04dbd066a4ba6f4a1b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_stage</type>
      <name>get_stage</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>acd064a01d84bc84ba3882f111243556f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_object_host *</type>
      <name>active_object</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a1e13a21db09f081d842700c4cb08fa60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>first_object</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aeb2ea17014ce07e47f0fe8d95cda4851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>next_object</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a64f61c660392848f7404a6c555c09ef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>find_object</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aeb2d456f5252593dd55c19d456d5f7fa</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>sc_module_registry *</type>
      <name>get_module_registry</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>af3e5384d487a745cb2906cd89c0adb4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_port_registry *</type>
      <name>get_port_registry</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aed9144ebbcfee24081db7cde7ad3d2fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_export_registry *</type>
      <name>get_export_registry</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a00f6135b88e21c7583fc9b67cde703a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_prim_channel_registry *</type>
      <name>get_prim_channel_registry</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>afa7081416901ed7f0b0007d3e2ca7544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_stage_callback_registry *</type>
      <name>get_stage_cb_registry</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a9f18acb5cdef36bc308e80049c283abd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_stub_registry *</type>
      <name>get_stub_registry</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>af51af8f8c78290accfca8e4886d2afa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>construct_hierarchical_name</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a5622cff8bde1e3f72cb613b8a2bc18a0</anchor>
      <arglist>(const sc_object *parent, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>register_hierarchical_name</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>adafb2579a39d7d10ad2b608da70f49fd</anchor>
      <arglist>(const sc_object *parent, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unregister_hierarchical_name</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a8b85b968a63dbbcb7e7bde603fa12144</anchor>
      <arglist>(const sc_object *parent, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hierarchical_name_exists</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ac58f22763108d423f0c717cf925e671d</anchor>
      <arglist>(const sc_object *parent, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_hierarchical_name</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a445b6b468e172d57472921860449386e</anchor>
      <arglist>(const sc_object *parent, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>gen_unique_name</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a2072478113b2d187a0046325b62bee95</anchor>
      <arglist>(const char *basename_, bool preserve_first=false)</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>create_cthread_process</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ab8fa0d860c53d8d4d4b9af479314cea9</anchor>
      <arglist>(const char *name_p, bool free_host, sc_entry_func method_p, sc_process_host *host_p, const sc_spawn_options *opt_p)</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>create_method_process</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aca0a05beb813c1fe5f80e0dc5195e17a</anchor>
      <arglist>(const char *name_p, bool free_host, sc_entry_func method_p, sc_process_host *host_p, const sc_spawn_options *opt_p)</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>create_thread_process</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>abbb50782cf2ccee5dd8e791b82178de1</anchor>
      <arglist>(const char *name_p, bool free_host, sc_entry_func method_p, sc_process_host *host_p, const sc_spawn_options *opt_p)</arglist>
    </member>
    <member kind="function">
      <type>sc_curr_proc_handle</type>
      <name>get_curr_proc_info</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a805d160dbea38fffa421c1ed47b97388</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_process_b *</type>
      <name>get_current_writer</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ac04f533a7a064e8ac65dc81cf10af489</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_check</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>af558684cb333a0994944b5c92d7e22f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_check_conflicts_only</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a47b112d587874254beab60f548c9749f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_curr_proc</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ab22fd16892cd874ab61d91fa53f06eb1</anchor>
      <arglist>(sc_process_b *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_curr_proc</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>af5b11d35ff1809f83aa792ce4be29ba2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next_proc_id</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aaceb8068f51bcd6b3a768ec9e82d0d1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sc_time &amp;</type>
      <name>max_time</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a6918bf028e320a1f34f34278a8e6a84e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_time &amp;</type>
      <name>time_stamp</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ac625d4b0d701f8c441100134a747d179</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::uint64</type>
      <name>change_stamp</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a2741bd05b3af16cf4d2ea24ba1e2ab91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::uint64</type>
      <name>delta_count</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ae959f3f89bf4a860b225388c4ab21cd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::uint64</type>
      <name>delta_count_at_current_time</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>af6450838ebb8d18a221da040c7ac988e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event_occurred</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a64ba6d97cea376275e0e738df49ab6b4</anchor>
      <arglist>(sc_dt::uint64 last_change_count) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>evaluation_phase</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a3fae4b327b8098cad0571b1b8977040f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_running</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>acdb245486c30b6cac0a24c600325d782</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update_phase</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a9a81b1dbb276c09823fe4d0a036dafee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>notify_phase</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a358bbdc5719580df3ff3e33f5a72f0be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_error</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aaf7e589ea2181b2373aa35faf27e0e2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_error</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a8d9fe55b060a95e0982cb81da2fc1fef</anchor>
      <arglist>(sc_report *)</arglist>
    </member>
    <member kind="function">
      <type>sc_cor_pkg *</type>
      <name>cor_pkg</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a5e6309697f842751fca35f8017eee70d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_cor *</type>
      <name>next_cor</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a962dea3c39e370c758e7696d00d14a74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_reset_finder</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a31041eb894192da57b3cb36448f102f6</anchor>
      <arglist>(sc_reset_finder *)</arglist>
    </member>
    <member kind="function">
      <type>const ::std::vector&lt; sc_object * &gt; &amp;</type>
      <name>get_child_objects</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a23311822bd0b78d21d0b789e756b2aa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_event &amp;</type>
      <name>null_event</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a3d978559260fb02dc1ab4d1284ccae5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elaborate</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a1308e4a85e567b0f8f67c6a4aefcfc3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepare_to_simulate</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a3901494cff792a7fa4e57aa2ff0d5478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initial_crunch</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a53a4151b2caa14dbafb5a9996d771d76</anchor>
      <arglist>(bool no_crunch)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next_time</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a3b6df19d5eae94b9b6a581703f3673df</anchor>
      <arglist>(sc_time &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pending_activity_at_current_time</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a119e3c7ae6a4c3896746153a38ce3b27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pre_suspend</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>abc20510b22a6dffca9926ba45a8466cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post_suspend</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aa2956f2e19bae69ccbaa3d0573ca8ecc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_export_registry</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aabb8d669dee99758d8298f75012046f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_hierarchy_scope</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a29c5809ffbb8ed7fac8b2f40198b701d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_initializer_function</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aaea356b4d1c604882547aed20d5bc192</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_invoke_method</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a76ad131484e5215573ca4708695fab54</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>abe316699185dd3108ba952d356e513e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_object_host</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a6fbfadb40866e7c3c5edb329e1550078</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_time</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ad5c5666b46e30e83ba2901b492aab711</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_time_tuple</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a934ea96f590283c7bb3ecb0139db66cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_clock</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a034ac2d3cac16d03fca09a19b0b947e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_stage_callback_registry</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>abf6aa7655161290189bd188db7a83f99</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_port_registry</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a9db64b27e3fa59526834c1244e6f20a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_handle</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a4a61fb98d9d86beda7cf6016f55d01ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_prim_channel</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a82133fbb2741616deabd4533c367da1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_cthread_process</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>af2c9e96bc0fe4f99c3fdbf18a3965fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API sc_dt::uint64</type>
      <name>sc_delta_count</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a7ede922c451bf23f33c5d9a9fd1ed1f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API const std::vector&lt; sc_event * &gt; &amp;</type>
      <name>sc_get_top_level_events</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a70cc4247a32e3c2d10b2d44c3593adc5</anchor>
      <arglist>(const sc_simcontext *simc_p=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API const std::vector&lt; sc_object * &gt; &amp;</type>
      <name>sc_get_top_level_objects</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a483e5dccd02e957f9cd07ce75daa9f0e</anchor>
      <arglist>(const sc_simcontext *simc_p=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API bool</type>
      <name>sc_is_running</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a2a92391e7e109d3412930d58f284f4c4</anchor>
      <arglist>(const sc_simcontext *simc_p=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>sc_pause</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a541b2bb161892bcd169644237d33f495</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API bool</type>
      <name>sc_end_of_simulation_invoked</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ab923b7926c07a1e5626dafdc8aef7a3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>sc_start</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ae87b003131722daca55302e9be71fee2</anchor>
      <arglist>(const sc_time &amp;duration, sc_starvation_policy p=SC_RUN_TO_TIME)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API bool</type>
      <name>sc_start_of_simulation_invoked</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a1dc1d3f867bbfed0ed5860dce45cf662</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a285a9415d730026b6e9477982147ba11</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API sc_time</type>
      <name>sc_time_to_pending_activity</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ae30e86c0819e12ad8ee85db90993adeb</anchor>
      <arglist>(const sc_simcontext *simc_p=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API bool</type>
      <name>sc_pending_activity_at_current_time</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a451757c0d8fb1820e194be2014877b74</anchor>
      <arglist>(const sc_simcontext *simc_p=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API bool</type>
      <name>sc_pending_activity_at_future_time</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a246ffda8c29f27f0068aeed87627c78d</anchor>
      <arglist>(const sc_simcontext *simc_p=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>sc_suspend_all</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a0901ba8ffc212e2a1b89dfbf73abe437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>sc_unsuspend_all</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ab00d6b03331b0f0e9d757f90db9d8751</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>sc_unsuspendable</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a3129c45bda1cdca526adac065d4a80d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>sc_suspendable</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a496f9f47d3c00183b287f46501d233fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>sc_register_stage_callback</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a3e56139599c00ff286bfcdfe96cebf23</anchor>
      <arglist>(sc_stage_callback_if &amp;cb, unsigned int mask)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>sc_unregister_stage_callback</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a6e6351d909bf30a141da6b617afcab3a</anchor>
      <arglist>(sc_stage_callback_if &amp;cb, unsigned int mask)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API void</type>
      <name>sc_set_time_resolution</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>afff1a3110e475ce919a23ceb7003f7f0</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API sc_time</type>
      <name>sc_get_time_resolution</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a25e4e16e66b8d936cf0739961aff3d8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API void</type>
      <name>sc_set_default_time_unit</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a93f6dbff483a83c73624525c9fd8adba</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API sc_time</type>
      <name>sc_get_default_time_unit</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a1dca407702a3e64d457f7607ad08ff55</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_spawn_object</name>
    <filename>a02213.html</filename>
    <templarg>typename T</templarg>
    <base>sc_core::sc_process_host</base>
    <member kind="function">
      <type></type>
      <name>sc_spawn_object</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a8e306a2890d46659b23b2a91ba284c6a</anchor>
      <arglist>(T object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>semantics</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a3f6055df6581f96bf11e6bd3f3746642</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_object</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a1d632b76b56ce8b3de1d059d9cae421b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_spawn_object_v</name>
    <filename>a02217.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename R</templarg>
    <base>sc_core::sc_process_host</base>
    <member kind="function">
      <type></type>
      <name>sc_spawn_object_v</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>ae19e80bb3cb6ff8c7a8debf79b1816d7</anchor>
      <arglist>(R *r_p, T object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>semantics</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a29185dd65342a76bfe10d0ea40bb3251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_object</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a61b96f8572784b4fd5ab6bc69cdd19b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>R *</type>
      <name>m_result_p</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>aa7587cccfaf256c72f148b7827b9d988</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_spawn_options</name>
    <filename>a02221.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_spawn_options</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>ae2870e096f6171111e3b965b62a4e85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_spawn_options</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>aaee636f1368e438971035047790beb39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_reset_signal_is</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a2d9f63a0d782a436867e712cb186e2a5</anchor>
      <arglist>(const sc_in&lt; bool &gt; &amp;, bool level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_reset_signal_is</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>ae72f1c81f34297418a6f8a853d45c6ef</anchor>
      <arglist>(const sc_inout&lt; bool &gt; &amp;, bool level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_reset_signal_is</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>ab5d5ce06e4e8dd04b99e0d4c5261f41a</anchor>
      <arglist>(const sc_out&lt; bool &gt; &amp;, bool level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>async_reset_signal_is</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>aa60cbf4660ea1f7df3a579e574b46236</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;, bool level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_signal_is</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a2839be3d14e085b2a123818158396e11</anchor>
      <arglist>(const sc_in&lt; bool &gt; &amp;, bool level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_signal_is</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a8b1ac98f7cad69f1665931a2fdc40c32</anchor>
      <arglist>(const sc_inout&lt; bool &gt; &amp;, bool level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_signal_is</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>ade8730750a58d5fe07d1e39e4af841af</anchor>
      <arglist>(const sc_out&lt; bool &gt; &amp;, bool level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_signal_is</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>acdd6d13604008f7825a57b30085d3e88</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;, bool level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dont_initialize</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a2543a53aea98b147e7a21cb8d9d54f15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_method</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>abdd6ac0fbb9cc2acb496d2d7e1c966a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_stack_size</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a60ac96580288f2939bed145c5b74d721</anchor>
      <arglist>(int stack_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sensitivity</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>ae063bba3b2314df0ce24877a6ef23bb9</anchor>
      <arglist>(const sc_event *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sensitivity</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a4d94797b98a4df5921216dd330a4e186</anchor>
      <arglist>(sc_port_base *port_base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sensitivity</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a2b558e066cd3a3bc41d8526ddba769aa</anchor>
      <arglist>(sc_interface *interface_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sensitivity</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a8dab4c0354d098b89efc616a6991c8bb</anchor>
      <arglist>(sc_export_base *export_base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sensitivity</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>ad9ce12b763706635b3f31854d5361229</anchor>
      <arglist>(sc_event_finder *event_finder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_method</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a3507101b40ea876527a5d34e638eb2ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>specify_resets</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>afd68ab7edf68fce0a32a5384a1d64330</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_dont_initialize</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>ad19813c57288806da38238f7dd743a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_spawn_reset_base * &gt;</type>
      <name>m_resets</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>ac33a6b80ea847b3a5edc5c7e1c5c917c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const sc_event * &gt;</type>
      <name>m_sensitive_events</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>aaf38b96681607b575a5cb0f1e314e0e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_event_finder * &gt;</type>
      <name>m_sensitive_event_finders</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>aaec8b34bc1be7424c2a002cf1f557377</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_interface * &gt;</type>
      <name>m_sensitive_interfaces</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>ac5bbd2ad5ec68068f2d250ea828a2da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_port_base * &gt;</type>
      <name>m_sensitive_port_bases</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a328fe22adb1e8e3aeaffc22927efd553</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_spawn_method</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a1c5dedc98347bd0e2df79ae0b792bc81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_stack_size</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a5421303e30bac9d24675d9047dac9938</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_cthread_process</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>af2c9e96bc0fe4f99c3fdbf18a3965fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_spawn_reset</name>
    <filename>a02169.html</filename>
    <templarg>typename SOURCE</templarg>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_stage_callback_if</name>
    <filename>a02225.html</filename>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>stage_cb_mask</name>
      <anchorfile>a02225.html</anchorfile>
      <anchor>a9cd663415b54a2ad3e731006a2dd6305</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_stage_callback_if</name>
      <anchorfile>a02225.html</anchorfile>
      <anchor>aca87905292270adbe78fa610742a0b8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stage_callback</name>
      <anchorfile>a02225.html</anchorfile>
      <anchor>a25e9b3a7aa103eb8499bc910ef81ac64</anchor>
      <arglist>(const sc_stage &amp;stage)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_stage_callback_registry</name>
    <filename>a02229.html</filename>
    <class kind="struct">sc_core::sc_stage_callback_registry::entry</class>
    <member kind="typedef">
      <type>sc_stage_callback_registry</type>
      <name>this_type</name>
      <anchorfile>a02229.html</anchorfile>
      <anchor>afd4c2ed0c9711be1813a01b5ae431f72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_stage_callback_if</type>
      <name>cb_type</name>
      <anchorfile>a02229.html</anchorfile>
      <anchor>a784e30efd530301e72371a77218a423d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cb_type::stage_cb_mask</type>
      <name>mask_type</name>
      <anchorfile>a02229.html</anchorfile>
      <anchor>afcae8c663200305423143a54980fb7b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a02229.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_object</name>
      <anchorfile>a02229.html</anchorfile>
      <anchor>abe316699185dd3108ba952d356e513e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API void</type>
      <name>sc_register_stage_callback</name>
      <anchorfile>a02229.html</anchorfile>
      <anchor>adafc3d30737bb23a83e695888b3bc400</anchor>
      <arglist>(sc_stage_callback_if &amp;cb, sc_stage_callback_if::stage_cb_mask mask)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API void</type>
      <name>sc_unregister_stage_callback</name>
      <anchorfile>a02229.html</anchorfile>
      <anchor>af5cf09195bf0760f95f81a851af7aedb</anchor>
      <arglist>(sc_stage_callback_if &amp;cb, sc_stage_callback_if::stage_cb_mask mask)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_strhash</name>
    <filename>a02313.html</filename>
    <templarg>class C</templarg>
    <base>sc_core::sc_phash_base</base>
    <member kind="typedef">
      <type>sc_strhash_iter&lt; C &gt;</type>
      <name>iterator</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>a783fba296ef75bdb5964c77096d7a975</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_strhash</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>ac3467828a94198041c0146bc9ca1d2f3</anchor>
      <arglist>(C def=(C) 0, int size=PHASH_DEFAULT_INIT_TABLE_SIZE, int density=PHASH_DEFAULT_MAX_DENSITY, double grow=PHASH_DEFAULT_GROW_FACTOR, bool reorder=PHASH_DEFAULT_REORDER_FLAG, unsigned(*hash_fn)(const void *)=default_str_hash_fn, int(*cmpr_fn)(const void *, const void *)=sc_strhash_cmp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_strhash</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>ad166c10787bf06570033dea8fbcfdb7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>a937ea44a813224c6569aa6b215e4b315</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>a5909b6fe064b8c85a96a9e6564d99fe4</anchor>
      <arglist>(const sc_strhash&lt; C &gt; *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>ae07634ecbf055a089eeaf2a6b85c3ce9</anchor>
      <arglist>(const sc_strhash&lt; C &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>af508aae9b6fcf29a2597dd90b3f1c10e</anchor>
      <arglist>(char *k, C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>ab8f887ed98680996196a9b36277624b1</anchor>
      <arglist>(char *k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>ae0fe4af3a4a5d15f499e3c712642281e</anchor>
      <arglist>(char *k, C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insert_if_not_exists</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>a29bd46da50283981379942033e5e023a</anchor>
      <arglist>(char *k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>a79a89ad507398da2d0475df5a35963bc</anchor>
      <arglist>(const char *k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>ae7cba0782d6e627eb13c388c76ae2d8c</anchor>
      <arglist>(const char *k, char **pk, C *pc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>a513078fc07e9a88b7847f25ad5cb7f35</anchor>
      <arglist>(C c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remove_by_contents</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>a9ada4f3fafa4c6f981eb5aadd0962df4</anchor>
      <arglist>(bool(*predicate)(const void *, void *), void *arg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>a73a26f250fc0bf2cef83c82995f0585e</anchor>
      <arglist>(const char *k, C *pc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>a494f1cb739fd3605675213fd0c20b57d</anchor>
      <arglist>(const char *k) const</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>operator[]</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>a331b4c51caee1aaa82a79f89b5966589</anchor>
      <arglist>(const char *k) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_strhash_iter&lt; C &gt;</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>a9982895c7a6d0b9a9cbb905f5e4701ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_strhash_iter</name>
    <filename>a02309.html</filename>
    <templarg>class C</templarg>
    <base>sc_core::sc_phash_base_iter</base>
    <member kind="function">
      <type></type>
      <name>sc_strhash_iter</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a126a60786b9caf921fcbda277331ff3e</anchor>
      <arglist>(sc_strhash&lt; C &gt; *t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_strhash_iter</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab72973fe0e20f8d588597fac17ca3ebe</anchor>
      <arglist>(sc_strhash&lt; C &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_strhash_iter</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a78871d8b4ea3a258be9d8f99ab9e7179</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a89cd3ce4be36d78b51073b9893409652</anchor>
      <arglist>(sc_strhash&lt; C &gt; *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af405fe2fa0d30cb8c8df6c6af698cffa</anchor>
      <arglist>(sc_strhash&lt; C &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a0cabb8d6e01871084b04214ad91cfd37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>key</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a3d21e8ebc4151c3fc00343052003e783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>contents</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a22123aa446f92a9bf748eba7fcc21c40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>set_contents</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a324a7f7c63bb0177691f3d55283f512e</anchor>
      <arglist>(C c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_string_view</name>
    <filename>a02369.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_string_view</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>ae41c0bf3a9a4fe109bf82290896b47dd</anchor>
      <arglist>(const T &amp;s, typename enable_if_convertible&lt; T &gt;::type *=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a5956eb17049f57547aeb5f28dde63f25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>ac6b02b8f3a6b311794e34f4200f445ab</anchor>
      <arglist>(base_type sv) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>aa065ae62833c44c3a077a083941be019</anchor>
      <arglist>(char c) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>starts_with</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a25fff229efc0bcbcde01a56f9bf1c8da</anchor>
      <arglist>(const char *s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>ae80569eff89c81aba2c2c19f1f15c5ee</anchor>
      <arglist>(base_type sv) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a2b2452e2085c2d4e41616ade7365e6ac</anchor>
      <arglist>(char c) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ends_with</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a7cd5bedaafe324089ce2f88d27af6f73</anchor>
      <arglist>(const char *s) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_stub</name>
    <filename>a01517.html</filename>
    <templarg>typename T</templarg>
    <base>sc_core::sc_signal_inout_if&lt; T &gt;</base>
    <base>sc_core::sc_prim_channel</base>
    <member kind="typedef">
      <type>sc_stub&lt; T &gt;</type>
      <name>this_type</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>ab29738e0fd59c918dbc1a67dddea603b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_stub</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a94f929a360495d5647e08d8491705286</anchor>
      <arglist>(const char *nm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_stub</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a28834d134742dfb11d702c1550c55c2a</anchor>
      <arglist>(const char *nm, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>read</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a66fbc1bb7ca7e1288be61452ea13c81f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T &amp;</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>afed9327125a87284f4465ad29217241f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>ada9215f7552e47ff1a7c512b83219fe8</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a1140080acb3bf40da286dc554655986c</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>aef6ef0dc754bdafb188b56f040377d8f</anchor>
      <arglist>(const sc_signal_in_if&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a2bb6f19220ac882fbbd40358befb3642</anchor>
      <arglist>(const this_type &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>kind</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a29c3397e20e8afa6b823ad1ca0ab5bdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>aea4f9de277e0efce1c2e9c3095efa370</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a8a1da035a412a53dd600a965a8b82388</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>default_event</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a0cd627d7be8358197e9ec446bd2ed1a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>value_changed_event</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a0fb3f637d19fd10783b4fcc1d2273fcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>posedge_event</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a78cdfd534d3756aee8974a5bea850ff8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_event &amp;</type>
      <name>negedge_event</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>acc4aa0f665a39e829dd6ee76a77428c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>event</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>af788864485ae1f85334e53c6e0ab7b69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>posedge</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a628a4ff800e802c704efa406e5d82424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negedge</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>afbd0026d26086b3c5cd573a09e2dc9ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_data_ref</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a736b070bb17d0c2abaf91577b3bd5fd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_stub</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>aff8e66207fd4df779063e3738edf2266</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_stub_registry</name>
    <filename>a01513.html</filename>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>aa7828e83f334001cfa89f673a1423c3d</anchor>
      <arglist>(sc_prim_channel *stub_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>adaab3c4cd37fbc605d1fb20ea2808051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a1a8df152ee5dd093f2211152c5a81e20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_subref</name>
    <filename>a01581.html</filename>
    <templarg>class X</templarg>
    <base>sc_dt::sc_subref_r&lt; X &gt;</base>
    <member kind="typedef">
      <type>sc_subref_r&lt; X &gt;</type>
      <name>base_type</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a3414daf3a4652859b5fdbfd5939646e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_subref</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>aefcb1adc89501545adff91d682d4a91b</anchor>
      <arglist>(X &amp;obj_, int hi_, int lo_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_subref</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>ab4d2561a75d9de26b9a7dfa4b6553fb6</anchor>
      <arglist>(const sc_subref&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; *</type>
      <name>clone</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a95a21d8bbb29ccef7deb6d4e5f4c2e79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a6420794a26d63ea4a7d22c6e61a584a1</anchor>
      <arglist>(const sc_proxy&lt; Y &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a4f1774c048d28d73a8cc77a64bb1837a</anchor>
      <arglist>(const sc_subref_r&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a72de52ea29576f3212262061f0a0cff7</anchor>
      <arglist>(const sc_subref&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a0a9f1f95745a4729e86fcf33c70b706e</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a5533c389806f0ae35fc002c8bc2d47be</anchor>
      <arglist>(const bool *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a5898bc5094afa7868b1f348deee465bf</anchor>
      <arglist>(const sc_logic *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>ac7dce72af7c622fd5433ff0564011c84</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>af22eed813d19c62fbb07167fec1f963b</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>ab8092de62a812a33c88445e445f94b9d</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a7e733f092253b85fd053626054d3968b</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a472218aa7355222f3a4d1fc0e2cd7a86</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>ab79bf5825838cda4bbf2bf7a36ee731f</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>ae111c2e1021d4304e819454730943ef2</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a7d5b32662fc6f8e940bc6a7c887a1b42</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a6c8d0cb94db6ad88271a6f3219866465</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref&lt; X &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a5e140aca6e13ae06ba78a5485aedef63</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01581.html</anchorfile>
      <anchor>a73595ab6a78a28d3d53d94b7c2b879cc</anchor>
      <arglist>(::std::istream &amp;=::std::cin)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_subref_r</name>
    <filename>a01577.html</filename>
    <templarg>class X</templarg>
    <base>sc_dt::sc_proxy&lt; sc_subref_r&lt; X &gt; &gt;</base>
    <member kind="typedef">
      <type>sc_proxy&lt; sc_subref_r&lt; X &gt; &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a4bfe453c0d857118fce8dd0d45f6cd7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_subref_r</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a963f74ccf0e333c47ca4fc4b736a896d</anchor>
      <arglist>(const X &amp;obj_, int hi_, int lo_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_subref_r</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a6a2ae401499544cdc0ff305e23f1e415</anchor>
      <arglist>(const sc_subref_r&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_subref_r&lt; X &gt; *</type>
      <name>clone</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a2a13d38c4f069089512cb494c3d01224</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a644cc8a88ff039b7841c6c9baed5ad17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>ad36169b4eae1f5552e5fa118db667154</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>get_bit</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a5808c925855470b48fa636a95e2c6bd3</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bit</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a1a9940f1d301a3daa4a2d90328643374</anchor>
      <arglist>(int n, value_type value)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_word</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a35e8e00e11a4030b92aa13601f5fce54</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_word</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a334aa8e330bb6b9aa07f53c30d104887</anchor>
      <arglist>(int i, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>get_cword</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a3bd4d0760627edac95bc2b06970f0a89</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cword</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>aa06bf18855d04ca6a925aa4c31659e01</anchor>
      <arglist>(int i, sc_digit w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean_tail</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a7f0206d8d16fbea92db0e9df03061647</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_01</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a77f75c18602ce4b85b8fd22a26b6a0b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reversed</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a9ea999d0fecab3a0a9d48eb0bbb917a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>X &amp;</type>
      <name>m_obj</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a37e13f42a5e87ac860e078f680c5f09d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_hi</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a6c77f14a4ad5aabde73e214fdef08cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_lo</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a4a325258e57d04237346c87c7da62d1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_len</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>ad1f96cc8642ee7d3b84987bf17b80c4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_thread_process</name>
    <filename>a02241.html</filename>
    <base>sc_core::sc_process_b</base>
    <member kind="function">
      <type></type>
      <name>sc_thread_process</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ad8a6ccaf136908a5282e771559a4948e</anchor>
      <arglist>(const char *name_p, bool free_host, sc_entry_func method_p, sc_process_host *host_p, const sc_spawn_options *opt_p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>kind</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a52008dcf976eb80502211f5da5e0f477</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_thread_process</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a0f2bdd5f2b3f17ea1921faef9981c26f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>disable_process</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>aedbdc1ab25de3aff67c23f9c165a729f</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>enable_process</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>aa1f318b1ba7871530006b040fe7e7c76</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>kill_process</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a18d42f4d0363880049a3496c0ed8aecb</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_thread_handle</type>
      <name>next_exist</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a6b801d3370e6fce80bab557913b9440d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_thread_handle</type>
      <name>next_runnable</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a23968d4d398955d823d48ee57c1ba252</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>prepare_for_simulation</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>aa3e04519cd4c25685490e689cf73aee7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>resume_process</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a4ed9c7afca4fbb052174582f2037943e</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_next_exist</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a6d761c9661ffe6edefe4445eee45d3c1</anchor>
      <arglist>(sc_thread_handle next_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_next_runnable</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a59babc0df8faa74445ab97fa5158ebb1</anchor>
      <arglist>(sc_thread_handle next_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_stack_size</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>adfa437ba4592dc072b572f8bbc1f9588</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>suspend_me</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a10b86857b0e76993ddb457eb4989db35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>suspend_process</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ab95e22adb3b522ef054801e933443c55</anchor>
      <arglist>(sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>throw_reset</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ac5d920abe75cf9539332b34bf10bb0a2</anchor>
      <arglist>(bool async)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>throw_user</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a8e99cc1b1b7370afc4c24aa10cef6d48</anchor>
      <arglist>(const sc_throw_it_helper &amp;helper, sc_descendant_inclusion_info descendants=SC_NO_DESCENDANTS)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>trigger_dynamic</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>aa9d15e265958a85539dc7f5c7b256578</anchor>
      <arglist>(sc_event *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trigger_static</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>aaa7f043aaa69dea45a9b9ea9c50a07be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>aaca4f4c89eb42060bf72ca27cfa62c7c</anchor>
      <arglist>(const sc_event &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a11f88c46380e6f27fcecbb105032bef1</anchor>
      <arglist>(const sc_event_or_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>acfbb0b7dfc692ef62021f2d9092c499d</anchor>
      <arglist>(const sc_event_and_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a6d4ef9579a242575fd2df5b9944b0e62</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>af871156c71b242bad4506734e54f0616</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a0944eb526febc9150c67f34081768521</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>aa5b9d7e0b98de9e7d6ad9e038eb7ec5e</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>wait_cycles</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a6e0bb0e7ef8bc1d1611ee86ddd13fe31</anchor>
      <arglist>(int n=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_monitor</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ab45e25b3c382c2ada51d662c9e6c2f92</anchor>
      <arglist>(sc_process_monitor *monitor_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_monitor</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>aa3a157d0e34764f08fd43989276f2f20</anchor>
      <arglist>(sc_process_monitor *monitor_p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>signal_monitors</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a0707da7baa42ff362864b731b873ba2f</anchor>
      <arglist>(int type=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_cor *</type>
      <name>m_cor_p</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a8b0a2830264cb5e118f4314d472c445e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sc_process_monitor * &gt;</type>
      <name>m_monitor_q</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a5ff8d91a3901428aedeaa9f7127ac616</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_stack_size</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>aea4f57aabf2f6853ca54737fd7f353a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_wait_cycle_n</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a7197061aa125a49db17292aa9a1ad27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_join</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>aeb79ed0c7e8b054a1908e8e6346ef2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_handle</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a4a61fb98d9d86beda7cf6016f55d01ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_table</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a12ba92f261d993145709693ea4466b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_runnable</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a7daf768cb0d25e9950151ec7079decbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a285a9415d730026b6e9477982147ba11</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_set_stack_size</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a662f8daef85c7c41c8b8c6130351545c</anchor>
      <arglist>(sc_thread_handle thread_h, std::size_t size)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend sc_cor *</type>
      <name>get_cor_pointer</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>af9b51131f3756f824f53e5b203c5edb2</anchor>
      <arglist>(sc_process_b *process_p)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>wait</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a25ff3fc4b28740a7ea01ba84cb573dc3</anchor>
      <arglist>(int, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>wait</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ad22c5364bb6ef6b0c1c7c0ac449609cb</anchor>
      <arglist>(sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>wait</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a8a56fbc221604af10de0d0aa5b85164d</anchor>
      <arglist>(const sc_event &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>wait</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a6c67f50b00fb88c884b6822cd7fdd993</anchor>
      <arglist>(const sc_event_or_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>wait</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>aea3ab9639a68d3fc1e64bf981fdd58e2</anchor>
      <arglist>(const sc_event_and_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>wait</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a417fa7d67e1a5a8256634d414b243720</anchor>
      <arglist>(const sc_time &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>wait</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>accf5a67e320adaaf03c20645e60d8a25</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>wait</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a0c926c60bbc779595b54da0c602e035a</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>wait</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a5d4e293bd7571d194096fe632fadf149</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_throw_it</name>
    <filename>a02153.html</filename>
    <templarg>typename EXCEPT</templarg>
    <base>sc_core::sc_throw_it_helper</base>
    <member kind="function">
      <type></type>
      <name>sc_throw_it</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a16de4786758777139130bab8f7d86fbf</anchor>
      <arglist>(const EXCEPT &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_throw_it</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>ae45daeebf005e7a55e17f2fe852ab6fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual this_type *</type>
      <name>clone</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>af75bb31dc6d58e04175ec6b34c6cc139</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>throw_it</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a6381e0b5453fb96e5c9a785973e71d06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EXCEPT</type>
      <name>m_value</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a878ba990cb918f778c71b50c020e137c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_throw_it_helper</name>
    <filename>a02149.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual sc_throw_it_helper *</type>
      <name>clone</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a09c7b73be8a8b6c13223a13835343d9a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>throw_it</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>ab8cdbe3d525d7f42f122319245233161</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_throw_it_helper</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a252439c245847f0f98f71dcf229ee214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_throw_it_helper</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>ae44db7071822f211c112c868ac0ec234</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_time</name>
    <filename>a02245.html</filename>
    <member kind="typedef">
      <type>SC_TIME_DT</type>
      <name>value_type</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a65cf3e03e73a623e8d262112852c9fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_time</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a68bbb9b18599e7ca69a0581200427116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_time</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a9f1923dd4cd8d922ca95840f818f5af4</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_time</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a66e444acded7682e8463b6e470ed3819</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_time</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>aabc00e9d4d48c1d334f01148366a2c9a</anchor>
      <arglist>(std::string_view strv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_time</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a333a3bdf908a41b1caeb2ad6460a67af</anchor>
      <arglist>(double, bool scale)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_time</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>abb5262095239bbc208b2893e26feccb0</anchor>
      <arglist>(value_type, bool scale)</arglist>
    </member>
    <member kind="function">
      <type>sc_time &amp;</type>
      <name>operator=</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>aa7903a06728a74504cdb1eaa1e38ec27</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>ab6a309c4d5e9413879dc1c070e2e362d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a705a38c02e4706da390a640dedd719a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_seconds</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a9f73e0937bcf6e9f345e1a0764f7763d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_default_time_units</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>aa89b8193648b0b792cfdcf828b18e6bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>aa31a79b1e42102172f230ab38dd1ee4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a23f988957962a39be0c109035e5fd2d5</anchor>
      <arglist>(const sc_time &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a039cca3266e40326896450c945d681f8</anchor>
      <arglist>(const sc_time &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>acf3d06b2d81bad927ecbfe768f03d820</anchor>
      <arglist>(const sc_time &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>ae8eb15da18541797b3278f8b94c99523</anchor>
      <arglist>(const sc_time &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a2d95b5898b8bd83ccf2977a8ea448416</anchor>
      <arglist>(const sc_time &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a210c4c8ebc865e7769465bd06ab8cde3</anchor>
      <arglist>(const sc_time &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>sc_time &amp;</type>
      <name>operator+=</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a9cb1dc2657f5ee525c6b23b95b1109b7</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_time &amp;</type>
      <name>operator-=</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a1ffeb64e6c96b71fb588563ee7ed3855</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_time &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>af684b4513fc23c6bf78ea1f6ce64c27c</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>sc_time &amp;</type>
      <name>operator/=</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>ac09dfc9634d317cdc60f848bd1b1be9b</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>sc_time &amp;</type>
      <name>operator%=</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a8aa8b67ffd1db7582f955251f32e4950</anchor>
      <arglist>(const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a15b0245d0739b2a6ee0eb0dd6ee999b8</anchor>
      <arglist>(::std::ostream &amp;os=std::cout) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_time</type>
      <name>from_string</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a50075ee995b939bcb7cd20fbdd26d4c6</anchor>
      <arglist>(std::string_view strv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_time</type>
      <name>from_value</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>ac8d948306c97dcbd38e8a2c36e7e750f</anchor>
      <arglist>(value_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_time</type>
      <name>from_seconds</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a10f9ab64b82ccf9731523602cd66e380</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_module</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a460de50921ea4456ecaf395eb8594974</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_prim_channel</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a82133fbb2741616deabd4533c367da1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_event</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a13f565eb1938ead239f8b6a0927057b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_clock</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a034ac2d3cac16d03fca09a19b0b947e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>aa6d2b4d2d341e7ec09c953de01fa6664</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>ab5262b313db4d7a6dc2c5bf03da33a73</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>aee1f9da7aed4a07759ac5e44ae0e0a1e</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a021fe9f42ed923503a414d68d425f96c</anchor>
      <arglist>(double v, sc_time_unit tu, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a1358366d85d935a859f5586b6c6da117</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event &amp;e, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>af1dde45ddc3c77bf837e3e3cdaf81e43</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_and_list &amp;el, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a17ece7c959ad02debe68ab50276f6792</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_or_list &amp;el, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>wait</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a417fa7d67e1a5a8256634d414b243720</anchor>
      <arglist>(const sc_time &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>wait</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>accf5a67e320adaaf03c20645e60d8a25</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>wait</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a5d4e293bd7571d194096fe632fadf149</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>wait</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a09b6b00142d614bc9e0f211fd6d54d44</anchor>
      <arglist>(double v, sc_time_unit tu, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>wait</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a13b6eeb5c87ab92324743b458034762b</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event &amp;e, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>wait</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>ab0f047cf274f6ac8d6acf69aa91f7e1b</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_and_list &amp;el, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SC_API void</type>
      <name>wait</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a0be512a4542e1f30149e18326a17baf5</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_or_list &amp;el, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_time</type>
      <name>operator+</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a2657a94f6e75f8662211c0bf0683130c</anchor>
      <arglist>(const sc_time &amp;t1, const sc_time &amp;t2)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_time</type>
      <name>operator-</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>ae9f039999d7edcf24f62809d86d78172</anchor>
      <arglist>(const sc_time &amp;t1, const sc_time &amp;t2)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_time</type>
      <name>operator*</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a5e4e2f6ffaebda8dc65e34c710376559</anchor>
      <arglist>(const sc_time &amp;t, double d)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_time</type>
      <name>operator*</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>ade8ac019174087473e5c568684eaef12</anchor>
      <arglist>(double d, const sc_time &amp;t)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_time</type>
      <name>operator/</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>af801b93ac0271a3641b761d3f53b48ea</anchor>
      <arglist>(const sc_time &amp;t, double d)</arglist>
    </member>
    <member kind="friend">
      <type>friend double</type>
      <name>operator/</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a998979b939eca35a836acfdbed9cc119</anchor>
      <arglist>(const sc_time &amp;t1, const sc_time &amp;t2)</arglist>
    </member>
    <member kind="friend">
      <type>friend const sc_time</type>
      <name>operator%</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a06e7b41515df1aba1c0d2dacec734ee0</anchor>
      <arglist>(const sc_time &amp;t1, const sc_time &amp;t2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_time_params</name>
    <filename>a02253.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_time_params</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a73b4bac482e4d2744a24be4617440d4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_time_params</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a5f109827cf99bd3eae7bdc22830c8776</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>time_resolution</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>afa8d46678e3e40ac31abcd77d4ea704e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>time_resolution_specified</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a33b857254dbaf4ba66b24b04b78e9c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>time_resolution_fixed</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a5cc315c640a0989d3794cac9fff48500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_time::value_type</type>
      <name>default_time_unit</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a9f429b6a7dd0362d1b3a381e2fe89ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>default_time_unit_specified</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a82c20398d826df1a475ce61326601d8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_time_tuple</name>
    <filename>a02249.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_time_tuple</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>a75138f52f43b52d1f818fd8cf06470ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_time_tuple</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>a2e5c69d3c85bf7cde301b8145a67c435</anchor>
      <arglist>(const sc_time &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_value</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>ad19c394c236fa47bd68a5118fbe34b2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>ab79fc282bd8adad5cefc42b0739cdaf1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_time_unit</type>
      <name>unit</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>aefd321e6437d1a85e546bf0fbbcb9a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>unit_symbol</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>a7682210eb1ce4af6457652ab00afbfa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_time</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>aaf0baa6db075c03b9c534f94030e524b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>afc4b1de7800ba7c7b4ed09685499c860</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>aa87fd4ec1709b048f04056a6b8298d45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_time</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>ad5c5666b46e30e83ba2901b492aab711</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_trace_file</name>
    <filename>a02261.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_trace_file</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>ac2e11c2f18c357603ce95368261f3220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a552d514e5894e03af615a27094f079fe</anchor>
      <arglist>(const unsigned int &amp;object, const std::string &amp;name, const char **enum_literals)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write_comment</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a5f2fef74534b7d6e92c4dc77dae77633</anchor>
      <arglist>(const std::string &amp;comment)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>space</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>aefb440b6478650929226a60cba075c7e</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>delta_cycles</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a8c297be26e2bfe653991d2cdceec2f7a</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set_time_unit</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>ae286858737132c85481a7ba666e8b21b</anchor>
      <arglist>(double v, sc_time_unit tu)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>cycle</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>aa764170956d5a956a3b34028780cbf9b</anchor>
      <arglist>(bool delta_cycle)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const sc_dt::uint64 &amp;</type>
      <name>event_trigger_stamp</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a1465dbd493c7e34be52bc78f3b3ecb17</anchor>
      <arglist>(const sc_event &amp;event) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_trace_file</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a14b6f2cc01e4d7e6e5994e9a06b0af28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_trace_file_base</name>
    <filename>a02265.html</filename>
    <base>sc_core::sc_trace_file</base>
    <base protection="private">sc_core::sc_stage_callback_if</base>
    <member kind="typedef">
      <type>sc_time::value_type</type>
      <name>unit_type</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>a273bc19218835c2619a0751bc9a0a0e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>filename</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>a02e813fbcc631eb8a4ec44c127288e78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>delta_cycles</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>a743eb3eb40455411df1830454f9931e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>delta_cycles</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>acb1e7ad96a8e09aef202ad03843dfa76</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_time_unit</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>ac9a65f967a8384a1cda985fd0f1f1b3d</anchor>
      <arglist>(double v, sc_time_unit tu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_trace_file_base</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>a8a6aef13f76425684cc08befb5a99c0e</anchor>
      <arglist>(const char *name, const char *extension)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>is_initialized</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>aa586ce4a52d911dc90d2a9398a88f78c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>a91348e323ea49aac8f7114efa917b162</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>open_fp</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>a3fdb5b97623c439fe196c726f6606ef2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>do_initialize</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>aedbd58025e31611e211007863c7d419c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>add_trace_check</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>af95ab8679ec14edc8985ecadca2ac829</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>has_low_units</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>acc570f5ccf7aab26fbfcf17d1d00dcac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>low_units_len</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>aec9aa20c2bde875961c24f0b7b926061</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>timestamp_in_trace_units</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>a8060980ce1854be89d26fd24fdd96bea</anchor>
      <arglist>(unit_type &amp;high, unit_type &amp;low) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_trace_file_base</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>ab35588b6ea329d79c69b31658fbd8778</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static sc_time::value_type</type>
      <name>unit_to_fs</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>ab6cbcc95dfb1b26e8f0b37776c2e3e81</anchor>
      <arglist>(sc_time_unit tu)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>fs_unit_to_str</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>a3062af4290662fa51e3aaabcec9b6533</anchor>
      <arglist>(sc_trace_file_base::unit_type tu)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FILE *</type>
      <name>fp</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>aabe7a92009444f039a6fde72881c9ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unit_type</type>
      <name>trace_unit_fs</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>ae1b6e8a76787d54db130bf25bcd96f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unit_type</type>
      <name>kernel_unit_fs</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>a53874043c95b084e292f8ab6616b365a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>timescale_set_by_user</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>a4b362b10f37d233af3c7098e456a2481</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_trace_params</name>
    <filename>a01445.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_trace_params</name>
      <anchorfile>a01445.html</anchorfile>
      <anchor>a3a9b0b00bc98785e0b50a345f2451b45</anchor>
      <arglist>(sc_trace_file *tf_, const std::string &amp;name_)</arglist>
    </member>
    <member kind="variable">
      <type>sc_trace_file *</type>
      <name>tf</name>
      <anchorfile>a01445.html</anchorfile>
      <anchor>a0dbb073933d03f67265d0a8b4ca91b21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a01445.html</anchorfile>
      <anchor>aeedc66c77a8f0f7865dbecf1dc50588f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_ufix</name>
    <filename>a01777.html</filename>
    <base>sc_dt::sc_fxnum</base>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>adbe58e13603b0312d1245e96da8baa35</anchor>
      <arglist>(sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>aa1a7db56586c2760576fbe42c596f3f5</anchor>
      <arglist>(int, int, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a12f7d438edb4f33487e904425c862589</anchor>
      <arglist>(sc_q_mode, sc_o_mode, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>afe90f8a67763d9f0be6a16dbb6724400</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a0c695d659c6d74329545dc2a5c12e1d6</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a4b31791df2f4c4f667a51804bc9be65d</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a16ebbf6e07e23324cb172cd69334b082</anchor>
      <arglist>(const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>ab0eba4f1a0540618a02fd2e31e55e1cc</anchor>
      <arglist>(int, int, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a7af7c54f54cb42cd5713a6b288009a61</anchor>
      <arglist>(sc_q_mode, sc_o_mode, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a01acf24dac214f0a5267ea6a29c7910d</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a929d52866d7c531d3894361e337f5ad4</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a2bbe64360e55859461c248454d018343</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>acd97041b3a78ee50a69e5d7e9c68fb70</anchor>
      <arglist>(const sc_fxtype_params &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a1a96047a9ed6534fbcaee631a3f22676</anchor>
      <arglist>(const sc_fxtype_params &amp;, const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a5487aff42a9861c6a5f1aaef567144c7</anchor>
      <arglist>(const sc_ufix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_ufix</type>
      <name>operator~</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a75e66993710439e6eaf9f69f71daf259</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_ufix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a9e47f9b52c57df02e82a17ff9b7b767b</anchor>
      <arglist>(const sc_ufix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator++</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>abad7d04a4a0d41015fc452fd48c6b156</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator--</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a79f95f5c77e9d49390dae19639ce9e63</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_ufix &amp;</type>
      <name>operator++</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>ae9cb345c584f0fb772a414d000ceb18d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_ufix &amp;</type>
      <name>operator--</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a0edfd07fc0f214993d55ded9e59174f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_not</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>aef163ffba2d506e181f6c7d47d568374</anchor>
      <arglist>(sc_ufix &amp;c, const sc_ufix &amp;a)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_ufix</type>
      <name>operator&amp;</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a6ae81624be28bfc8cf845372b4e8880c</anchor>
      <arglist>(const sc_ufix &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_ufix</type>
      <name>operator&amp;</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a889997b33ee6639ba205ef92dd36567f</anchor>
      <arglist>(const sc_ufix &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_ufix</type>
      <name>operator&amp;</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>ab31c4a8b39cc0ceabce10df908fe8b3f</anchor>
      <arglist>(const sc_ufix_fast &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_ufix</type>
      <name>operator|</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>ab1ceebe3814b162017db26d6ba8a61cd</anchor>
      <arglist>(const sc_ufix &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_ufix</type>
      <name>operator|</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>adc8bda01f43dd6b311a32d36f5cd6573</anchor>
      <arglist>(const sc_ufix &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_ufix</type>
      <name>operator|</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>adbbcbf6f8993cfffedea6932e21ee9d2</anchor>
      <arglist>(const sc_ufix_fast &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_ufix</type>
      <name>operator^</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a14ef9c36f2a1881135b796930fdacf48</anchor>
      <arglist>(const sc_ufix &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_ufix</type>
      <name>operator^</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>aca7ab8e3a38bb27e15e75ba9747dc42b</anchor>
      <arglist>(const sc_ufix &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_ufix</type>
      <name>operator^</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a9d47fa47af3cadcd72da3e676ca63e3e</anchor>
      <arglist>(const sc_ufix_fast &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_and</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a3b79ebee26bfae9745187d02325edf48</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_and</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a3ebe2deddedc814c23093820dcb8814e</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_and</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a6cca2a01f4a2818cd6b3362f31fcbd4c</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix_fast &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_or</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>aab7b70a1a20366c7e7336314edc6e09e</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_or</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>acfafcf258cefa189ecb88b0b7614c21b</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_or</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a852951c162816819f3ab2a8ca6f1dfa4</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix_fast &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_xor</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a2db6b83084cf0fcce3d9ee3a5f3b3884</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix &amp;, const sc_ufix &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_xor</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>acf9c16117749ca0c309de81101ee5307</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_xor</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a030fcbcaaa9f49ba11ec4147446750e4</anchor>
      <arglist>(sc_ufix &amp;, const sc_ufix_fast &amp;, const sc_ufix &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_ufix_fast</name>
    <filename>a01781.html</filename>
    <base>sc_dt::sc_fxnum_fast</base>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a3b3c9d73392b5349af8558895edb5e47</anchor>
      <arglist>(sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a3948678775a650af88ba22ae5832190c</anchor>
      <arglist>(int, int, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a19d2cd616b0904d697de8f616fe658b1</anchor>
      <arglist>(sc_q_mode, sc_o_mode, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a1f82488318965a5cccf76b4b5ba151ec</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a22b40e96c4b9ce155beecdd9a774fd7d</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a0330840b0ae5d27dced4613850001ba9</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>ab55869399b6359ecf104c73c484791b8</anchor>
      <arglist>(const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>adee7fc3c9c6bec7024ef3236705b7de9</anchor>
      <arglist>(int, int, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a6475a301486a3d832785c535c726e86b</anchor>
      <arglist>(sc_q_mode, sc_o_mode, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>af96f350e9eb46d3b6887f9d4b952e404</anchor>
      <arglist>(sc_q_mode, sc_o_mode, int, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>ab3df48963ed51b93ca2b6a7fce3c5bf7</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a4c5b3221c678d317d5beeacee6daa33a</anchor>
      <arglist>(int, int, sc_q_mode, sc_o_mode, int, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a53111d11372233dd817954b69348111f</anchor>
      <arglist>(const sc_fxtype_params &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>ad6a4992113d2a18a4f92613ee59dcd5f</anchor>
      <arglist>(const sc_fxtype_params &amp;, const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufix_fast</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a86a9bc289a5447e8d350c7c1b51fa7ff</anchor>
      <arglist>(const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_ufix_fast</type>
      <name>operator~</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a9674960ebb915cea80cb583ef9f183f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_ufix_fast &amp;</type>
      <name>operator=</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a7ce4712516b53f6447c1dd51c37555ea</anchor>
      <arglist>(const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator++</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a48202eaeabb412384dfb3c0624af6310</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator--</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>adb2552a6e687b92cb1eb09d5fe0a767a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_ufix_fast &amp;</type>
      <name>operator++</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>aa60e07873981e2ecf5c391e662db308f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_ufix_fast &amp;</type>
      <name>operator--</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a21117a58fb1973c6187b2c0dd7fc8659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_not</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a096367dd525d63ecb3875fe0608cdd91</anchor>
      <arglist>(sc_ufix_fast &amp;c, const sc_ufix_fast &amp;a)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_ufix_fast</type>
      <name>operator&amp;</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a5a5fa6f1f1c7bfaf58e9f341c0f970a0</anchor>
      <arglist>(const sc_ufix_fast &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_ufix_fast</type>
      <name>operator^</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a7bb97c59a276b1f4a816daf84d26de43</anchor>
      <arglist>(const sc_ufix_fast &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend sc_ufix_fast</type>
      <name>operator|</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a560b5c5b23e05938e147a105c8ccf783</anchor>
      <arglist>(const sc_ufix_fast &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_and</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a06dd1c626bba9cef813ae019a9c6a0be</anchor>
      <arglist>(sc_ufix_fast &amp;, const sc_ufix_fast &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_or</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a3e89bc7e1947d54103d2a4bc7dbd4a58</anchor>
      <arglist>(sc_ufix_fast &amp;, const sc_ufix_fast &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>b_xor</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a34a0c7dc26a317875881aa5bdd2f0501</anchor>
      <arglist>(sc_ufix_fast &amp;, const sc_ufix_fast &amp;, const sc_ufix_fast &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_ufixed</name>
    <filename>a01785.html</filename>
    <templarg>int W</templarg>
    <templarg>int I</templarg>
    <templarg>sc_q_mode Q</templarg>
    <templarg>sc_o_mode O</templarg>
    <templarg>int N</templarg>
    <base>sc_dt::sc_ufix</base>
    <member kind="function">
      <type></type>
      <name>sc_ufixed</name>
      <anchorfile>a01785.html</anchorfile>
      <anchor>a0116467e657f7ec56915d92c6f788f82</anchor>
      <arglist>(sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufixed</name>
      <anchorfile>a01785.html</anchorfile>
      <anchor>a2c14667a96f863b93b749c99fe3b3ce2</anchor>
      <arglist>(const sc_fxcast_switch &amp;, sc_fxnum_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufixed</name>
      <anchorfile>a01785.html</anchorfile>
      <anchor>a08a4062899066649f451d20a989f1608</anchor>
      <arglist>(const sc_ufixed&lt; W, I, Q, O, N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_ufixed &amp;</type>
      <name>operator=</name>
      <anchorfile>a01785.html</anchorfile>
      <anchor>ae52f5c6557b9128a657ff17a1772f325</anchor>
      <arglist>(const sc_ufixed&lt; W, I, Q, O, N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator++</name>
      <anchorfile>a01785.html</anchorfile>
      <anchor>a9740b4d3ad2bc1507422ab16ae923656</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator--</name>
      <anchorfile>a01785.html</anchorfile>
      <anchor>aa2407633ffd41ceb10550842d563bb04</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_ufixed &amp;</type>
      <name>operator++</name>
      <anchorfile>a01785.html</anchorfile>
      <anchor>a421cc9e45d0fefbbce62d71add80ef12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_ufixed &amp;</type>
      <name>operator--</name>
      <anchorfile>a01785.html</anchorfile>
      <anchor>a896d28dda1b3b36c2de0515a30ba3b40</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_ufixed_fast</name>
    <filename>a01789.html</filename>
    <templarg>int W</templarg>
    <templarg>int I</templarg>
    <templarg>sc_q_mode Q</templarg>
    <templarg>sc_o_mode O</templarg>
    <templarg>int N</templarg>
    <base>sc_dt::sc_ufix_fast</base>
    <member kind="function">
      <type></type>
      <name>sc_ufixed_fast</name>
      <anchorfile>a01789.html</anchorfile>
      <anchor>a14313e59578dc0db79f5dbcdfd1a1ba6</anchor>
      <arglist>(sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufixed_fast</name>
      <anchorfile>a01789.html</anchorfile>
      <anchor>a7bfef269dc53003e05ae2f1cfb510765</anchor>
      <arglist>(const sc_fxcast_switch &amp;, sc_fxnum_fast_observer *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_ufixed_fast</name>
      <anchorfile>a01789.html</anchorfile>
      <anchor>a7113283b24f1eea764cc243d7a8a56f2</anchor>
      <arglist>(const sc_ufixed_fast&lt; W, I, Q, O, N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_ufixed_fast &amp;</type>
      <name>operator=</name>
      <anchorfile>a01789.html</anchorfile>
      <anchor>abe1a807f427f82110127511d6aabdf8f</anchor>
      <arglist>(const sc_ufixed_fast&lt; W, I, Q, O, N &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator++</name>
      <anchorfile>a01789.html</anchorfile>
      <anchor>a0eddf853f7551fa203d71a82b7d2503d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator--</name>
      <anchorfile>a01789.html</anchorfile>
      <anchor>a2098161567bf949eeae80e7abd9470e4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_ufixed_fast &amp;</type>
      <name>operator++</name>
      <anchorfile>a01789.html</anchorfile>
      <anchor>a509a766375318dbec14198645f3e05fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_ufixed_fast &amp;</type>
      <name>operator--</name>
      <anchorfile>a01789.html</anchorfile>
      <anchor>a61c1aacfbc19b3a04175cfa5e79dad96</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_uint</name>
    <filename>a01897.html</filename>
    <templarg>int W</templarg>
    <base>sc_dt::sc_uint_base</base>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a7221ed4df5cff2151ac735a595c5c989</anchor>
      <arglist>(uint_type value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>accb5c413833a8f8baa3396035f3f0bac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a8045993f35a2734341844666b52209dd</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a52190222fbca241da4d9481833f11874</anchor>
      <arglist>(const sc_uint&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a43238627238f25fcf393817ce83ca0d4</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a0df6989f62e6a15963373b157bdd0ed6</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a37c2c342fd552c058ff9b7512570be39</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>aa3105f9a562d9a569cfe40566a8e7d70</anchor>
      <arglist>(const sc_bigint&lt; WO &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>addc662b6cd286a118c193ce94012109d</anchor>
      <arglist>(const sc_biguint&lt; WO &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a155d4b132eeb143320bf6bf6a1baac81</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>ad9780e1f5f1f4b2413a64fa31a024d17</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a4159790961c17c5234d2f70027083241</anchor>
      <arglist>(const sc_bv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>aac676ad9d23c6951f42a63284b4726d8</anchor>
      <arglist>(const sc_lv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>aa058f09b0d0056f55c36704715b35003</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a36c904c7698e1c2d0f6257a734f9c9b3</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>aedcd8c9c1721dfd9053c594c753db4d2</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a8ea04c39bab762ac32c3e6117d343c8d</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>aa6497734166dac6f22ceafdcf3fe7478</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a0ecdb94e924f5ab24448075d6e72b196</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a15efaae5ee2812bd94fe39eded35d0c2</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>ab8559a902de4c7647e4ebd40299b1221</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a218b95c829484e8c9e46d708cb67a9fb</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a2a69cd70a18df842090c053de5ae2b7d</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a9994e571e8eb3b13b050ca25fa1320ad</anchor>
      <arglist>(const sc_uint&lt; W &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a91e886e77626751c08d412f805997a91</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a519aa4a5b2fb411e127494a98dcbc6bf</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>aa96a475633f85a98d1c310045e8bd56c</anchor>
      <arglist>(const sc_bigint&lt; W1 &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>abe7769cab576c43f0dfa64ad4031a30a</anchor>
      <arglist>(const sc_biguint&lt; W1 &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>aa5210c8d68e7a32c165433e14b21b6a0</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a8ffbdf7000b3f9586775c9e60a76b643</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>aeaad9f040ea2afcb87f582538d26d6ad</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a712b444ee1d17d12d35eb9e11e6ec0d9</anchor>
      <arglist>(const sc_bv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a95c5a7ebea453515c93a946e4f27da0e</anchor>
      <arglist>(const sc_lv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a3007c4e73cbee31278b010daddd13bd4</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a7efa25060b474788b63e154a21ca35bb</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a755def82d166ddfb4e6c4199d570d087</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>aa41a56df9fad6158c3e84ad2151bcdf8</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>abb152be537556016f4adeb51b84296ab</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a744802c59669c3cabf854b73d416bee5</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>ae51ac285963838a645a1d267c48e7a48</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a92fe7fb9c076ba4daee37944eea9f6c7</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a4bc6f00133b7ac39a01f83e5580f6622</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a188ce5f31a4e38a8ff9ba8a67d6a8544</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a021776fde14e5abb787dbc531f7db08c</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a147203877aceee1b7ae2a55bf567f820</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a0643ccc60d492e579dfba0ba54c1464a</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a44a70f2664c7edc78c377d865f80e63c</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a48e6e9554b08effd9db339c3c4195da1</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>afa75fdfdc12d4cd45af2e75c2a962e90</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a9ee33a0f200ef08da25f2b44ce7ce2d5</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>afe27f7819479f8c15b0071c5c6e5ee81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt;</type>
      <name>operator++</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>aa5df63edb010080f716b13afe223e243</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a16fc4a0c5392376b22a7fe72021d8335</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_uint&lt; W &gt;</type>
      <name>operator--</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>af3a734f9eba8f4c6141c977811768260</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_uint_base</name>
    <filename>a01917.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a4526f1063ebb6c4f1e3f7000f7463717</anchor>
      <arglist>(int w=sc_length_param().len())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a1e41c9e5e5bc6a60ee0cfa735aef0890</anchor>
      <arglist>(uint_type v, int w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>afea739280c0cd1cc981593ca6795a11f</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a149ea915ec38a3e3b35b82b4b66e6637</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a2517451edbb1c8fab98f0f086a932e61</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a5a7652d279fbb9351a8feee438e675bc</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a86a2c88dbfc18325f65e44c4092dd82c</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a7dad7441c7ede97a4b9b9f3711820d8c</anchor>
      <arglist>(const sc_int_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>aef493b779069356bb10a9758fc451067</anchor>
      <arglist>(const sc_signed_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a5d422c6b4c0af3ef6aaaa73b29e1d9b2</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a75cbb02300a8c75a8051b6ee84764509</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_uint_base</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>aa5239651f200c24944c84f8c093a5c9a</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_uint_base</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>abaf003d73d1ae93fb7c52c2717582e3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a47497d9d35bb17dd7701e1595f585d5a</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a29799343761ff193d06c78d15fe50c6a</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a1e21f25cbf7a6a9ebee9bdeac38ae36c</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>af3366be059bde20e7db3ae9e6c439611</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a6e68ca12f4028e2d3770720f0942a1a3</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a30e7448ea6925e4e386da77297e64f5d</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>adb5a69ad61a797f5eceb722e9f45e8f0</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>abffda13a771b7b8383c00741c0142b36</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a588181112ff93885b7ae7d8a2306615a</anchor>
      <arglist>(const sc_bv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>ac496bf07b8ce20397bfbf20f96c94500</anchor>
      <arglist>(const sc_lv_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a71321b89b91d0ab8df84d9157b698f10</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>aa58c86372b44a04b225cc99834e70749</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a22d4e43173315f92f00055b5eec007b7</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a86f800bdb94f1e79bd4e540285c894c9</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>ac1289765cd517cc091cbee9bcd1920f3</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a834b167dbcc4c626fe78438f16bb38e7</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a4df8f35a8ecbd571c02d6cdcc6083f17</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a9a9a1cb8249631ce5c808033fc5b1e45</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>ae647b65c1c17fb20fe2ce0acb19bfd05</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>abc6e93455c2fd602ede5752459477d27</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a3629303219b5d0922f1be917568e797c</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a592d16d054c0427b024ae9bee60f5edd</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>af5a37af37c90ca9916dc24b3f0bd0547</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>ae2cb9b7693209d75ae496adc37a44c41</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a6b0fbf5ff87eb863fce60afc675b96d5</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a625b94a5b3e1403ac2f8b673392608ea</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a0c0b6c8dd7c30de8aedc19ac5c7b97f7</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator++</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a0a4e5ae5727d4c515ec21191a842f3e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base</type>
      <name>operator++</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>af4730a936294e13b157e6adc61ede37a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base &amp;</type>
      <name>operator--</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>ad923c113c527dd05392580333716f1f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_base</type>
      <name>operator--</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a2f0549b6f181467ef676ac2b305ecc61</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a32445edd50c003cfd19c300652df5641</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_uint_bitref_r &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>abcdbc01626eda45cd63149862b2cbbe4</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref &amp;</type>
      <name>bit</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>ab51c65b19fc1820bb3423c804df3d14f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_uint_bitref_r &amp;</type>
      <name>bit</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a6934b80cf00a7164df0f9349a3520c18</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref *</type>
      <name>temporary_bitref</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a719f58cca857fc26d4a8b6c16a849c7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator()</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a9e2a318d63f1dda23e82a5016ea14997</anchor>
      <arglist>(int left, int right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_uint_subref_r &amp;</type>
      <name>operator()</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>aff3dfa4f1aa038953984d081e4cac0f5</anchor>
      <arglist>(int left, int right) const</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>range</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a4249bf60abea42877826554ea6f67384</anchor>
      <arglist>(int left, int right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_uint_subref_r &amp;</type>
      <name>range</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a7246a866a4a55d040f5205b38f83b53d</anchor>
      <arglist>(int left, int right) const</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref *</type>
      <name>temporary_subref</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a643948f2a60fac06b4a9482f630e032d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>ac79db1d12f15d7a41386d56d3d4976cc</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>aecabfc41e27f6e906860eb4a0aa141f1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a06734edd375869b5d2fea8c6e96686cc</anchor>
      <arglist>(int i, bool v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a8fa64b8ee6ffda810b89f1ea30539106</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a7ccb52d42101e9d7adf3f27f81bc21bd</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a8f106a5114e5531e3ed1d15425895699</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>af7176d5b7b5b37ccb37daf558e238d52</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>afc05d254c59d8ecbede51f98e9bed5eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a0b890b794648f727636b486cf07a5a52</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>abfd4898e73cce86a0900e254f596fed8</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a5e2f88ad7cc96758a555e97e1f9e66c0</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>aae294490f1f45fc769485ed59497941a</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a4b0f953a5aa8505ff9e16faeceb6cad0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a4fdec50c0bce67fed0b1d9e627be126e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a875509778e4ec8b16921a1290ecbad2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a4783b49ce5a7bdcfb21d8186f61f6838</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a9805a495b81c0b3a1154cade7afc25cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a4459ca217ca293596b13706753807d78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint_type</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a5633f14f193fd9890b7ed1184c1162dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint_type</type>
      <name>value</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a12b39db2525bb4e67850ec1af957dcce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a3b202b173073ff84363fec427c7cb38d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>aae96764a31459ba2c1e8f25e8744fb80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a87bc7ce210cd522b8df04339bb1838da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a425ea0975c019c28fa2d708e2e91501d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>abbc3d6548290f245a3f87ea3c7bfefa1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>adaf6dadf4d12586aadb5aa794b77350a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>abc956fc9ab19bd766f3afae0f0210fed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>long_low</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a8f3f27ea9e03f68721c4c6559726d6d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>long_high</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>ada3d47171191729e6d035ee01b382507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>ae095fda8bac8e19a83fb3245a4afb295</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a7cf62e82f7672d13ce122ad26835d32b</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a5f3b241cddf60ea2bc195e72c7a5f8f3</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a53af00ddacf132effafbd5d8acdc3ad5</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint_type</type>
      <name>m_val</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a8a998a822b49318dd7210288405ab6fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_len</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>af64821c9c9355ee88dba670f83c424df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_ulen</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a513cfd3757ebd562f8bb244f50d7fd16</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_bitref_r</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>acf14483b27605502030674f346f5c44e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_bitref</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>abfb283e830e57559627617bcf277b86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_subref_r</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a56ae3535236bdf202d3094bf43712d72</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_subref</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>afe4a60578b3eb9511d353f4c9eaceff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a96f74b0d54ca5fe1ab8a0e96100cbe76</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>ac1c022d9f3df3abf65c4be3cb750bb42</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>ab652593b60d4ec29dd4ecaa899dd33ac</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a18a2f89c78e193037ab0865a144cf323</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>aa9beac199736442012aa4131b7bd93b9</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a6e1d881e3134f220bd357da8ad4351e6</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_uint_bitref</name>
    <filename>a01905.html</filename>
    <base>sc_dt::sc_uint_bitref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_uint_bitref</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>a316c929988f6f607d89d5b051a3449ba</anchor>
      <arglist>(const sc_uint_bitref &amp;init)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>a3f19bfbe20eb2a2d5e31105d8f4afa27</anchor>
      <arglist>(const sc_uint_bitref_r &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>aba576abeaaa1ddea6a036dc3ce7d39c7</anchor>
      <arglist>(const sc_uint_bitref &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>afd17215d165f51abdac195d3cde7ce3e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>a00e3cbb5d9701c443e29f74d264c42b1</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>a8909587bd09a52d03d497ce5f52a1a29</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_bitref &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>af62ec3e9f147c7f2cf54704c0388f458</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>a724c720c0ab0a1d0328d9bdf17dee410</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>af9f813ea8b55a4b58b64809b6558f500</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>a2af0793c7c8682963e65f312e78fc139</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>a8c2a7237ca6e18145ad2fe251f4cda39</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>a8f2de2c6368e6c6face3d051581b076d</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_uint_bitref</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>acef7c93f93e26871963aa484f6db131b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_base</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>a452fa30c8164ea24676bb959bd9b063f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_uint_bitref &gt;</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>a48db0e37a0c85cfc9f3d52e0062c0a3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_uint_bitref_r</name>
    <filename>a01901.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function">
      <type></type>
      <name>sc_uint_bitref_r</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a9b38261805dfea998d5a84c44e91a96b</anchor>
      <arglist>(const sc_uint_bitref_r &amp;init)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_uint_bitref_r</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>afb23d476c296ed032f74595bc7993b99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a616746123c61447a233a7bd71403dc1e</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a93287c4f70f3413ddcd2da75971a7a51</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a975d1ad4def608fa1886da4aacfd21de</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a48b486821683036ef4c112e03bcb8d08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>af26fd7adae21bafeb4f14e2c4b9d8edc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint64</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a127f4a475f04c98ecc7f05d50895433b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>ad4e19b9b8494b944d35ef21ae198f297</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator~</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>acd24c806d697548bda3a4cd228d29fbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>value</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a6a73420f766d1382d503967a423c89c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_bool</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a9d684902a462baafbcda05e95b2e95ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a15b122bd31ed5358bc677505051d2b69</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_uint_bitref_r</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a11ea77839b27ced5347dbabf74dedb4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a70ddee368b39602c1c03bf825ae2450b</anchor>
      <arglist>(const sc_uint_base *obj_p, int index_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_index</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a2576b55cfbba8bb201e0f19d05ec0d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_uint_base *</type>
      <name>m_obj_p</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>ad12b7aa1c1b94eed9704125f6ff69f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_base</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a452fa30c8164ea24676bb959bd9b063f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_signal</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a9f6e5d1466167b345a71b469e6750ab8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_uint_subref</name>
    <filename>a01913.html</filename>
    <base>sc_dt::sc_uint_subref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_uint_subref</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a8eb4c87ea46fb82f939443a10340ad4d</anchor>
      <arglist>(const sc_uint_subref &amp;init)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a22dfab885a1a994a19efc49e037c26ca</anchor>
      <arglist>(uint_type v)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a2266357b89945971d68548a165503c30</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a3ac3f4b8ed32f9323d4a98ceb94296af</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a25c08a461471511e5dedf8ec4376ecd6</anchor>
      <arglist>(const sc_uint_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a6faed0a8612072a9154f422c5f98b9e0</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a1cad8768e125e17d74482f9cf4a9f313</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a252533f84fefe316badf4a9f17539af8</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>ab3fede1ff5567181e25c6871e0e2d195</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>af2460300367f728114705b1d341f8c52</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>ac0df09328e2a361a6d0bc5cc519b98ef</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a69ed7bce7b2ade6102cebc82ff88541c</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a451024a80c596a0b6169553841321bf8</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a52b4565b1e59b2db8737fe8300f55005</anchor>
      <arglist>(const sc_signed &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a0f1c8cda5d1c09ca5cf477814df0e9a9</anchor>
      <arglist>(const sc_unsigned &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a842bf6ef635bee956c7a5269d9bea926</anchor>
      <arglist>(const sc_bv_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_uint_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a0a8ad49e1c4aecf34a7e18855f5dc274</anchor>
      <arglist>(const sc_lv_base &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a8b46462ca5e925977a2089a51af2ef75</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a8a02190b6f5c4060a18b7369a13985fa</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a306808c1dfd32f1b422456ce1313f871</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a84d6da4a28cd96fe944df7e0343bcad4</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a3d013e723800181ad24d5770a9aeec35</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_uint_subref</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a077f74673cb2bb6e4f4fed6afde904ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_base</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a452fa30c8164ea24676bb959bd9b063f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_uint_subref &gt;</name>
      <anchorfile>a01913.html</anchorfile>
      <anchor>a7d2c5d276f2f199003f0dc6dc576cec8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_uint_subref_r</name>
    <filename>a01909.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function">
      <type></type>
      <name>sc_uint_subref_r</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a8779413c9623ff604a571aa8227d316c</anchor>
      <arglist>(const sc_uint_subref_r &amp;init)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_uint_subref_r</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>aeece41800209549c2947324c589deb7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a18f6ee0d55b807a8b22f7a3c2425fab7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a27b36f781ec1260f04d3da054e493449</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a24ed4f85500add4b92e6c0f02d3fbdc0</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a487d6cc4725b0439d18e901cb02b3413</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>abb20c46ed127ca0ddf0298313ff0fe54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a00d32c1a51a12ec2ca2897f48da18499</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a2b9de1fd49979202d99780d9a6a52a2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a966817065375bdf491c709b3d2480eb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>ab36b109e4b275ce52d3722cd92d59d75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a64ccea0386bb1ae278454b52f23e42fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>accef096c281929632ce5625eb080c608</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint_type</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>acc17cb5edb1c341f42522183502f4c9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint_type</type>
      <name>value</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a94bb0853f6bb21e8ba49036658eef115</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>ae0e8c8f650a1832bdf93ba0789ebd9ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>acbd41118bccc155c5569130145a232bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a84188929d103e9a944d39f258e886b8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>ac4e29a530a297e6b242a479b6eb76a9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a5e90668d5ec15b04d7ae0d07b320277e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a0a78ce793ad0d1444270304bdc1d1e22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a45a0b4e7a89d46a6de90a4a3f95b4875</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a943ba7d970beba223ad79a066b504024</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>af3511857f11ddd8feee173aa28968cef</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>ad6314ae2d5154b3c51e8105c70e02588</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_uint_subref_r</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>abac39866619fbaed88e14a091a728de8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a28058c79e46992cdb64dbf47e3ab7e83</anchor>
      <arglist>(const sc_uint_base *obj_p, int left_i, int right_i)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_left</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a753a5915315eaae62683a112d0ac4c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_uint_base *</type>
      <name>m_obj_p</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a7664891586e7a169be1d0fca2b418f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_right</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a3ca0b3bde1bf887f25dcee80884cfed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_base</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>a452fa30c8164ea24676bb959bd9b063f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint_subref</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>afe4a60578b3eb9511d353f4c9eaceff6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_unbound_impl</name>
    <filename>a01521.html</filename>
    <member kind="function">
      <type></type>
      <name>operator sc_core::sc_signal_inout_if&lt; T &gt; &amp;</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>a0d715fac0e55d34a6a823a0842eb875d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_unsigned</name>
    <filename>a01937.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a6667a2c9d20153b7c5f86435ec6eaff4a823add88ba1561861a01803d1a9178f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a6667a2c9d20153b7c5f86435ec6eaff4a823add88ba1561861a01803d1a9178f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac1dc9bb8e74e87e02f59f117790f0faa</anchor>
      <arglist>(int nb=sc_length_param().len())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab3ca5fd9f767636b3d99310cf52f6438</anchor>
      <arglist>(int nb, sc_digit *digits_p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a134f28bbd07d7391fb56d7a59e6839bb</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a8c55f24a06ee618a56b8adef28b30731</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aada37373212204fcafe4a7eef07de29b</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ae732ff8dc49e0deb1735470738f44a08</anchor>
      <arglist>(const sc_bv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>afadec2ea7c4dc233de8d2f91538d99d3</anchor>
      <arglist>(const sc_lv_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a63baf7e1dcc3f93d0f29c21d66653cde</anchor>
      <arglist>(const sc_int_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a98e969d4b7649fdea7efd54ab54a226f</anchor>
      <arglist>(const sc_uint_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac55bcd9344457d89d8f586e8c40f1106</anchor>
      <arglist>(const sc_signed_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a5f58046070dc426a92fc2b6c1a68d7fb</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a94bfd4caf0b7cb9175d405ff70e90d18</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa979801eae23c7eebcd9f59e00d5867a</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a1185de0ec6f9662bb70896f881abf198</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a2d0ce4e39a92857ac4ae714330ae5652</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa2e00212ccd24be965a8d12d15be3819</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aab03240f147d9968c0de14b10c180c6a</anchor>
      <arglist>(const char *v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a837243f7ea8db1a389dc0bc316d3893c</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a23ff5bbda6ce47ab0f3a558a948c9be2</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a3ca766e7ce7892a587e3143e11902a11</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a46c27e56d4aed4c3956b303e5ca47e7f</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a3bdde163fe5250e57a9903431c35ebd0</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aac0398081fd91e20d6632ddd5e6263d2</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a1f24404eeb8ec08917697bcbcd7e9697</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4a58a37a959adea6e15cded53c4b714d</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ad6c299a0289b69edff7d854c1066d75b</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a611a69727a69900954e2a8152e34dcd4</anchor>
      <arglist>(const sc_bv_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a744ca90f44d3126befcc73f420a0dfdd</anchor>
      <arglist>(const sc_lv_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_unsigned</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a3ab84ee3a1128586628bd0710245dcf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_raw</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a06ca51de510a2c1a37901d55f1d66c10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a608b5d68c95c8c1ad4f6bb820d66e6d6</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a3485a4898983701b1cf74fcefcb8018a</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab4ccf486d5d3e8464f271e75232b9927</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4ffdcee9a02795924cbce8daae08a475</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a39a58d038c824019d75af5e62df0e854</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ad8c40aba6db0ed7ce4c5f864ce1eb4cf</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a89aa999969ff2478d91d30edd9f548a3</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a3b1c7c2b575e5f44f3fe6ee1bf0b705b</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator++</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a576655dec5d90d946fc078e7502f263c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator++</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a303b5679acf7919410dbcd0bee0e08d7</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator--</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>af1153a07b125ca54fd14f6e7072f02da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator--</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>af54e2a87579db18e9102bb3d143bacb3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalid_init</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a40c8c60e9b9209d0a597a678cc1550c0</anchor>
      <arglist>(const char *type_name, int nb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_index</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a8245f1ad3c79cb08b81f15a4b6ebb726</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalid_index</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a70bceec7d3d0cfab365a088f6db60c96</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned_bitref *</type>
      <name>temporary_bitref</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a1816c7162e678618f102f6a301ee1e74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned_bitref &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aab3e2d2cd73bef15572e99afd67d53e8</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref_r &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a69258777ffd4e05bf9c85a06f581f68b</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned_bitref &amp;</type>
      <name>bit</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab376df7f00bf827d09cac8844d50c7b0</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref_r &amp;</type>
      <name>bit</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aafba58f9838b4e5182f5cce12ebf604a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_range</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a04e88dfd9b353c3a5a26a9527105f80c</anchor>
      <arglist>(int l, int r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalid_range</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4f01685676acb8c49f8034d5c735c2d0</anchor>
      <arglist>(int l, int r) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned_subref *</type>
      <name>temporary_subref</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a68ba5f46b2c2abb652d9bd6372d48fdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned_subref &amp;</type>
      <name>range</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab2a630bb68235954a822105f77aa9f2b</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref_r &amp;</type>
      <name>range</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a252c9448a82cc5c0cfa16a6a4c32613b</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned_subref &amp;</type>
      <name>operator()</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aeab2b3048d776dc2721bc9c7a9f25917</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref_r &amp;</type>
      <name>operator()</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a6219f99d16bfa224240d069c06f329ab</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab984d1b8c7c4ed88873f4672bde84a37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a30ca5c93db993d90fd2d06c810d76978</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ad6f016a59bb9a89b69b39a8418f2a5d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a29a4bf91274294657e7da23d88f8b557</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a5b589880510d89c5624d5a5c2b26b7c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac90138d3be2cb8bb76dc2f58e4dc88d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a1254b0f78c83545a88412a425b8923bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9f24d3acac8168e47ebf4ceac8dffb59</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a03947386d1a9e8c0dcd0b740cef91873</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac795219fd33ffedc88c0261c30b71620</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa7a7cecfd849a64820344a65051b74c5</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9f30e64b4f19939504eab2ff387ccc9b</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aeb2208287569dd008092f227d58f3cd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iszero</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0fee0d22392a8f859fb394c132e5eb80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sign</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa0bcdd36e908183d072b05b4a2bd11ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa65a0336878bf7dd497fd5dab75288df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>af515865c7c31088e3d2b521107b3755a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab98652850dfa6df2a7a60985af14a360</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a19ac9a03e07480d94debd70ec8746e01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a6d3ba77266a871f45a1f3a5ed25b045f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a29343f7aa5d27225939fe712a8b50d96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aea69ce9ff4bbeba5b50792764f501033</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7d17a83a59b372442c27d4ca5221861b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a120aa0e9f1ab6c9eb26a5dd8daf5e2b8</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7d41559ce6f199d3f9db4ef24e64df9b</anchor>
      <arglist>(int i, bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a2d7ddb6a75d136fc009acba5e4e5a6c5</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a2239d61c1a116f25d0c1419eb81d5c1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_packed_rep</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa145df2ec2cb0d4846c272f9b2d9980a</anchor>
      <arglist>(sc_digit *buf) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_packed_rep</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>adb3afc1c343bce04261de7901090e8cc</anchor>
      <arglist>(sc_digit *buf)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa962f0094f93a7213247161228421b63</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab6671396fba2c760ac1feff67468edc2</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a965d9fc3cc06284742be3deb9b96e742</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a38a8342c9229458167cf7aa65b0c01d2</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>af244e17ced3fb6368421a29453cda3aa</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a491e8cfa8641f71b386dbca6f8767eeb</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa241eabda67391ab3dd7c8c88205c499</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>afad7116471e28759e8689a7c5af59a73</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a07fd4bdfb015fb623e4e367501d3e072</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a2e4cfc8a09612f7b962e9840b9b0bb80</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a26ae9466c6c741dbc8db83666c26a675</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a3962fc1fce3e57e53cb435df1774f6b2</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ae0be9ca2678b6ce04ab89129c27217cf</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>afd9c60a4d69933259ba80366535b22e1</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>abc6383435b6ab1de9d08cde5947b3be2</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a74139a0cd12a73cfb5a33176a28ec929</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a073451680d698a5094244168751f1d95</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a19c620baf1f84aa5827ef8c7e557e68f</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac95b3fddff89ecef5dbf0faf1d185808</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a79b6631e15a6d1dddd4282238baa099c</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a011ef6e79ad56cafb253466b989eaabe</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a529fda4b08b0082cdca38a3f22ae53c6</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0a6738472deb181d84319e52200c8bd3</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a3e421955e65a55a6fd640ec4e7f6ce66</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>acfbbbe835b48eb1732da390d73c4e3fa</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aee552326723277c248fdce9327b43680</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a66bff4d63ea54c1418ce74a1182c9f3e</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a97cbe608f00952f27f66c10d557b2c8c</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7a884d4837a730f138105c532745f155</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>afb679ad7e21eaccdba6374d86a3f7547</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a328d8851b012bf179c6416d1ff543b7c</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a2ce4d6eb797c4f1b6c4a2d070837de83</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a127b8cc5ec136394a10cc08c1aeefb92</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ad22b8aa452dba251f05912324f5a18d4</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a64214ad44381b0f0b533badaeb61a209</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a94115476f1e2a5371bbd1394d0f3b9af</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4b6d9ee7e4fccde3161e01dd7f41166b</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a1612222dd7dce2939fe5a21cdc51a93a</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a50fcfd3dee8c73c065e3c25726158623</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7bf3ed8e491d023a6ec700a10c200048</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a69b210f7308be4948c2296f253267c31</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac21ba8b622f7b7fe87e11fd692d54052</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9257ebdec333359d0135d3638371bc22</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a071f622f48b53afb9f0abc62455318ec</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab1a971f5751cd353905e889de92e592d</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>abdd7eeace09dbbe305c165462ddd8c4c</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>affd62890bb95b79caee4a424f01261cf</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a1eb7c4ee48599c0288596516b94ed279</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a2d502b18f860e266901a7920d87996d3</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a1873fd6e7553d94f9e760a9cb9bb87ad</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a14e38d97e337ae4f8fe724e3c1e99942</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a5feab50a509909589f6f06b4fe5a7243</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9779a9474f95acbfc215dad8b8e37e69</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7d371024500cee53bebe071c2022efd2</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a2f66c657babb56ee2b2377e73695fda3</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa6dec8dbd6034d25a896aaa2b70afe9b</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a49e394135bf7017bae8300ffbf141b93</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a2e7ee9a13c408291f3e328710fcabe34</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>afa0262c258f4b807c28596f6ecd89521</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a394da61d5d91832ee432965d11c4edb8</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ae99ba7b4299843a4e3122b3e44b42e8d</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>af75bd5f083683524de617a5d5fbceeb5</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a61db7ba03b194c6aa77ef36ea9c01dda</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7993bb482d672e1cb7791443385db792</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a6828971435f7527c0a2cb931c12c1d1c</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>af161f3457127bc8544a99e07f16c3104</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7a80e3a8c74a46f2d5948450a8d9555e</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a450ede1253a649bcee068315caea207a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a675b0d2df7f2900fea9030b1a755a302</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7e97519207420fb9f1ec262416ad0867</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a209ecd91f8432abd050003cfbc27f6ea</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a8d025c610ac53e76b519dbbbdd6cdfbf</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0f29506ed6b96fe91fc1f704b2f702c7</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>adbc4dcc74ba85043c79ed539356e64c9</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a1dfb1a7e72458106c7cc6b0c4201c8da</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a6474e698f1c96fdcb2d0f7554c60c92c</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac735afc4468cee11e6e150b2532cbd30</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0ff062f0ce510125ebea1135cde3868a</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a1352857eca901073957cab80954f1ea7</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>abc1d924d500979b5b3f3bc5153ff3c9d</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a90b1c7bb94e8b584f5cc97d34317497b</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a8d7b711bec84a8a0abf0509aa0f8e373</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a1815e25b4b7f94330b12338a78a29634</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aebc52cfad44b1769ee5efa6842f11e4e</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a2ef36cb9b392f551731ecd0fbe098cb6</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7ffb10ee1822526b203d633863c405d0</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>afc5d327b8110ee902a0eea10c20fbc58</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a79b92c90de59f923bb36817634bb5cbd</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>afde68b6ca95156218d079bae8727837c</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9373ede666869e267fdca055875bbf75</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a310dfe227fca11f5ac4d4dcafb1ecc54</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa087de95edb841de8f2c46d07e57e0d5</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>adb73d5df7ead48088b6b4caf6e3d508e</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4ecbfa0297caf144903b00601b75a9cd</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0d4476e3264dbb0ef5c754851e023129</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7a21fc484b7fac5118377206a4209099</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a69f06b97822eb36305afe783a638f4ef</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>adf582a951cca9e5534e565e24db65708</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a411b44bde0c409fd14608f44103cf787</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab197e6a8b181c837b5d65b7a39f6b95c</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9f8bec5d280dd53909664dbb7dd293de</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>af91fe93553fb9d98861c871ddb085f11</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a94124c7ee40bce9fd9b277d43847384c</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4a1925e5a2ba43e8b0e8646894e142c7</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>acc2bbe75ca5e3768902e0323461c71a6</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a98c9942d8d6c681949c05a9520aff26b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a95e924ff535f006e19a20141baf317e8</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab002768c10aca78e552902ed1a4b038d</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a508f226af539453f5c9cfe93a2ccab46</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ada6683711f0e8b6540cdf5590e985eed</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9ae43c1c1ba50025d24c6afa1b1d0752</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a02ea358d7dd17b3469b3ba94cc6961b9</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a16b6de590b3d04c34f9fdce0267f10e4</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9a6d225f802f9d0546d9b538d634bde9</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac1dfdd4f2a5ffc1df2e79902f5eb1eee</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a3f2c612e1775f6980791a4e41baf400b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>afe8edea08832b158dc61d2cf816dbaa1</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a2c55eb804dc1cb9c0c406007b95da402</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a6132be6ed55805d11705da87e12bffd0</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a036547b0721286a21462ea378f03d93a</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a79322955a34387a4fd421811c0bb3289</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a75cc7a1be2fe3641fd75fa459c6d99da</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9bc4a8ab4268aa3efe8034859baac601</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ad5e6c67147191db3b6f43e551582e606</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a335303051ceb30a3f871687e4e6b00ee</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a08f64f0f0f3395bb3bf094161b6bf5d1</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a99aa5ca02b968b49c00c1546a20c22ec</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a83e4b23644946fbd4f2b8ed7530063d1</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aeb14bef9cba8ff9996c917bc097e06d4</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a510cf2db88a1752b48db4a38327ca7ff</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a89decf936f66c8548523fdbb9ac32f01</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0522f26b9c9bad8104d247a749a473f2</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a42c162b849074bbba06ffdc97ee8e2af</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0ef816a3beb5aef364046951ca427342</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a62284abdefd729af5d1a7de9ee1b210b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>acacca0f87eb9179bb9974335b3098ded</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ae5796bee24f118b75f5b213bdca71f5f</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ace8f7bb211c49981f10b52e80db8083d</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac959179fbf0e1aaa4ebd0f5bb1b5f281</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7d77f5d11575c7a3edb16af9c87d8a7d</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aafad5be23149aec52becca040f29e7f3</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0613ee96dbb5965aa78e496aae64f843</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a96d2f4f47668948ea1c11054ed36d353</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab3fa18fdc4ff42ee4f7ff1ce01c87042</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a36e97de6d1a19b12faf9684a1b1f1e69</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a32a025117fcd1e6e40503614bc85de5e</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac299343e42ff09084ff175fff5533054</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ae9e3e42f4ef496bccf7f5c61d7486866</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0d69ca3f234b125969f0584fa27e28f6</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac65f903cabdd7d65abc85cc6c77475ca</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa40bc51d0a4fd0d27595912dc76ff448</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a1ce7468c5f442d36ab9e26dc131bed53</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a8dddba4d6f6883bd7eb4e60952bfef37</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a5442351eb1428c10f7932f4e5c6c4c15</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a27cfb81a1ce3f9b10d336f8193002f60</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a723258e3edd3fead7aebf293f13387b0</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>adc3e221d187b1078f5b6bfb53434debd</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a6d838ab3005220faccbe30c137ea07da</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a291894bcad28133ff6b07bedd38980db</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab086698a88163e9ce56249aed0d78809</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a2720643da6055c8c5573fa6a8ca85724</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>af42eee293e66581b10f03dddb84ce319</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ae9a1d38ae9c25743456bd6994b9ab014</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a06c72cdbb0a93751066296ebf30fb15d</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aad9ec7ab94f1128d807d288d3e8b6b33</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac60695e796e7f495ff072c0e4cf1e20a</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>add03fd7131e6cde9100412778b348b14</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a16d18db809245b75f8ecc69b1d5da1ee</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a24dd04bb60222edf160958c918a73c11</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a5e67fc0826c0f489742af6ac1ae4ce1c</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab69fa6a9bf17f619f608a582687ebead</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a6d84cfd2b0a519509db8039b6e921744</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a8562b3a847f62c59fc8beba1b3b12a7f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>af0078a86425189a80581ca609c0a980e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4f1e1986f80f8e8ae14ec0ea0a6b6a53</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a6bbac235734046f420599b67e19e2c45</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a5e72c255b2634dcd6125ab06adadce5c</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a57fbee75aa429d664960d1b019dfe277</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab7c2d12615de7a20e9af694e0e1ea3b5</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac9529118566844c8c7ac654095580833</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a6948b6807c66b12848601d1fcffb85fa</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a16ce5c271e67bd33248d6b12865197c9</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>af8ef349b326bc17f0bef281d2658078f</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aefa1f2864aaec01a4f56bf76b82f664e</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a41b0540c8ac73ec9afd715b3eb893add</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7e32de4ebdcc6a8db42240149ddaa556</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a60861a3fa9332ad6f8d189881452be70</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a8940b880860a922ffbbc962c1116d3e0</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ad46fdb0736f37750575c975f12924a41</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa291a9bf9e39b89cb6e5c55accb7eeb8</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa1d7ad7e80c8f3a4bacdc3ce563af0cf</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>afa5a29fe1abdb6b2c9e1190e0a16aca9</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4adbf9f1b13b627a9403569d20fb88b2</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a200c3802d29c068c69e0b3783b2c1bf0</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a3f3f7c606cf2bff44253ed745bf88899</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ae6d9f6150eafda0cb60eac9a6c86ac53</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a927894159755a371cd01592653a3c8b5</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a8dfff2678aac06f00bb303078e49c652</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a2b68be2d0607dc15c1145efb5fc17b56</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a48debaa2f991517788008fe558d50b66</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a3f6f1bb676c33e2a70b811c5d2f48fe2</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aec102e07efb804fb0dd07c1be863b447</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ae528f44bdf85840ab7a474fc1b2d948d</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aef070ecd19bfbbe6dd126868cc8c93f4</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aeb8b2b0070daac2e49c88eb0b8a4a8e7</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7447066c92ad5fb89b05c74734e021aa</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aef5a15b1a6a3b05aa9e40553888de510</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a259ee9545837d61f2ad629c8556382e8</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ad08aebd346413016db76958a5f5ab645</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac30982c0660d5e7604de4d5e04334ae7</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a234f15ad6995a90aeac855f9552e5ea0</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac3584326e004b5a40a382a6c52f538cf</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ae26836bd787c12b8d0f484a7edc56efe</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0c657a40237d82a828a77bdde346c2f2</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9c2d4b58a34b0b3efcbf9833cfd430ea</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>adddea274297a2965674231739b0bbf22</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a1ff1c8447a1b9dc31eb069e26e7aa46c</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a246db574b48fa9bf1326ed5ef63f1614</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a484f1a2167c614f50ca5ff90eb01e2e4</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ad76a631e8c71eb4b9174c9507985a189</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>adfc0ef018c379f318bf882df7586a2fd</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7652cd911c300d27a8547bab647b6917</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a666598fddb2b49fe9ae2ca40780ff95e</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9ad97e66f731537df4b6ffa3112cd710</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a40a72676a0e7c52b211d7ce54179ec5e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4098b1c645041ccfcaa0569a002da7ca</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aeab7d8474ee2e7c8758a73223158dd7d</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa3a8c4c7cfb8b1648620c946cdcc962b</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a85ee91bf530f33d837e6e4229d333aae</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a8f44046d87ccd9e74ded37d89164c98f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a29834600f31e7e3142615c952aa781c4</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab7c38ac4fc0019b08481b72cc144cbf5</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ae6c9d7012db20d46b721babcdf87ddb0</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a8f2b1505d4bc31418fbfa8b59d1fd7be</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa85b086a7bd1e08009876c960684ce88</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a56cb3f1bb5cdcbc675caadf74ff8d978</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab3418ad9f66e186d9d9e86545bd67172</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a85ea0181a084ec49177fc7b7689be8db</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a2069847204c0346af7b298e2fbb5c149</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aaefa59c36ff11e6ff34db26d1f90ce15</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0b4efde0ab4a89d3f0f10ab273be9600</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab078c3ab608c70ff94036df0abcb3904</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a59e4270471c68f78a8777117dcf1ec0a</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a29775fd074c32a34b2d6f852cf9c99bf</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a02996d40d08f63ba6327195e0ed24358</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa5f278ca8effa3ca281e41d15c3dff3f</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a05f2b2b8b1add858ddd6fc645fb0407a</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4ac0afdfba7275b6c7d8b82646db0419</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4164cd6ae78834cd6653a74205fad894</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab64928b3348aa43792c65b40faaf13b8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a754af9f8f23f6858c090c68f262f7808</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a37ddb9905452598b2b33c50c7ceb0379</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aec1dcd3d97841d4553d6e2ec9f6c90ae</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aff3baef15ea3a90d7348706f8d794ef8</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a13113e548e04405a2ed0d57fd0c389ea</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4e0cb67d1fdf5fb5886894d16386aef6</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a28bdfc970bd59dc5e6133f32e5cb9535</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a40bd2bc00605aad93fe3e593dfdcb0d7</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7da048fff2e1b64c655c96ffa56e26a8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a499866d890dadbe56b289507f2dc40e1</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a5f0c02bce9f68d8469c08f136d8340c7</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>af5cbc2da4a57afb593d19b0a5ee7dc9c</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a5ea4ee8b95ebc3a11db8816a1626c04e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9cb94a883895f9cacca713a197f3fa46</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a8bf68e032d54450100e1d1c2fd662004</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a75bf2e14989f71ce4180f8892b985a02</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a39696e892d07831a5f4a417695bee3b8</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>afd83325bf5394ef046119822e692a08a</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab6ea066fee18640fce0c5eee2aa281f7</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a5007150b91242acb07f98a3a0289c8ad</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a872ac055daf6a5beb4a17766773c21f5</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>af816f75e71212611410f50105567dfb0</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9938bb0fdbacf5c33959ed28b698be28</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a1f502fac88f4530a1ed3541a3789e236</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aeb1d95eb34235cbb455b75d46c41a858</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ad281f09a5409beee8d82046949fa5d96</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>afe29fb28efe0c519e4cf0c285c1c4a60</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>add0adff47746de500582c6e3363e838b</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a29d3b78807508cd82a32a59dbf7e00e7</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ad811b701cd99c6e1618dea32ee73b95d</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>adbbb5890c42c912bc9a166057abb22e6</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a3d0977d2fecd6d16a0eeb7bd87a51e1e</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ae738069664d246e274e77e616536f6a1</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a8924cbb3ce790e2eb80ca963f9db0f5c</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a40139f5c3c05d4ab539a777d5f22b6e1</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a18f38d9fddb0b423ac486c40835f071a</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ad20ce15b2a407899abb1cfbb804a7cc9</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>acd119b0825b20bcfbc0b4be29363c2b0</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a39eb8c9152ea3898eb25c7e06c87f360</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a8af1b04287c49ca2d789d5f85a0b1f37</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a1eb12229116c10d62ec7cdc062ee286b</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>af1bc9d8b3f1d83781afed6de8fe765b1</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9db6bbdca4b511f79f8156dfe8da0822</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa566ec01362a28bfa969ce91c9364496</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a51dbd5b6b888eb8ab723ebbd5a8f2584</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab0b704a7d78faa5fa8c2590162e6f995</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0ad5ce2b5c7afe625c5cd7bf40227c80</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>abe1093bc41863a17c7f11c24f70d14fd</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a840ea9c0273f772c4d2a93be5924147a</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4b157dfb4e7693cbd3cf86f78ee8bf21</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4f2a2e57dd7c8ecb7675901c89065064</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7465e179f36f3d8ba497dd8b679c34d5</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a5a392e1f07640b8881b1b5b5ab7bb566</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aba4e37b01df772f3f58be9bb2677750c</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a22112374e851cf3b828c28f1ed39af43</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a5504b50b910556d27e122b92619a0d13</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a3f55634993974e4e9b55fac77c6b272d</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a39e8eed03cf323cdc0ec4de163e8e351</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ae8cc72823579c56c4abad14631189a4c</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ae60910738a833aed7d0777537fa79f4f</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac7e7ddff47a7f67468a8c6c010b4d361</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4637fdb59123ef96974754c381402bde</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a7a4da501cee9b88b45d90d70aef2499f</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a96d9282bedcd090fd2db77fac3ee8cf1</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aef79b7a3e1a434253baf5fd950facdb7</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator%=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa4b49473d804f9c018fc5edfc491ac43</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aac17446e7ab714562a6a873c0f4986bc</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ae1491d0d4911d39ffe53e45ae81c0aff</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aeac7c22b5493ac99352486845425d4a3</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a544aab7af33e8c784de923f5b676ee9c</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac6889317e03ffd37d7c73c896614cb47</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa04ca5e434dcaa104db5ce82d5d31175</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>afcc600a4d5efe2287307bd7a52903162</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa0aab00c641966751db98dbe919318f8</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>abf2fac07fc01cfe98174bd3b22e4f725</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a00a234e4d3ea69967439e6ee8ce2cb10</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a265ce85664c827b34afd29296a0930ae</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>adf7cf3287ab066cd62013921beaa8798</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a5ac7b7835c7f76ed447bea3fecb317df</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aee08700d6b4b92bf1d01360d0d75e8f8</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a68f1d4ee08b824f2bdef4dfcd474d1c9</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a049c6918a7fc439d32962fee3dc7146e</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aefcd0fae2d3be5c681191c9251405175</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a28b43ed74fc8ed7ff59c1f4f925d7cb0</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a6805a46ca3bfdddddfb13e3f8a0618f1</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4fe972547a011f46de14d572b6904189</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa5f1432c18d6aadd2715fc98ab836cd2</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a8b4391010600856dd9d63c66bb116d89</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a352d8ed30c4b9a58fb19ad8819cf9cae</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a038110dec4e444e8cf60144e2c953724</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a5f98260cc312266440d927d575d3da90</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>af8696a835f6d5068de43ee0c1952dea9</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab1be2f16cdb66d1862cbe80b28c8ed0c</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa5196fa48ee3a6da5299c3f1fd073bf1</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a43dc8ffe15f0ae67577ea46f452d7cdc</anchor>
      <arglist>(const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>afeb5aa3c6cc9874d249f9b0e1621eeec</anchor>
      <arglist>(const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9df8174ca05455e27b79b17dfb470d88</anchor>
      <arglist>(int v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9f42e58559d4b2f3b61e7aa0b1f5d9d0</anchor>
      <arglist>(const sc_signed &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a2c6ffa503790e1e58c52e30717749028</anchor>
      <arglist>(const sc_unsigned &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a01d33aa4644ea27e56722c2b0cef819c</anchor>
      <arglist>(int64 v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0baba2957f76a5f55f8ce53a52b02d9a</anchor>
      <arglist>(uint64 v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a714fc740d4584b4ae8bc4366f42c4c33</anchor>
      <arglist>(long v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a3ed18541551418f06a453d8e4330febe</anchor>
      <arglist>(unsigned long v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>abaa80e8cb87e914f4af6226583f99d6a</anchor>
      <arglist>(unsigned int v) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aaf0420d1248217447255408968c5ebdd</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a319f4742e5c55f4dfc70682cb0ed5cb5</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a4cbb46b3d49c5d51ba31af8a42be1a17</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa154990b6e8b1d203677e41c93a6fe73</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a6c71a1f3efb5450092c6d5d3f9ef1894</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9fa7865c85f7e5420444b1e0225356be</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>af93bd8896314487ea2a4279d31588bed</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a782d0b7b938a1ed49650b1bad929fb2b</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>af924cfaff2957fe0a4656b7ecf62cec8</anchor>
      <arglist>(int v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ad74700b8e2db4e874001149b0c5e02d1</anchor>
      <arglist>(const sc_signed &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a8b94cc3af64d8fa4c4485e6e53507be1</anchor>
      <arglist>(const sc_unsigned &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0b2c6b8b064dc7f857c2a3857ba38c5f</anchor>
      <arglist>(int64 v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9657f247f8375b21f905d56ce1905dbd</anchor>
      <arglist>(uint64 v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa7a5fdcdcdfe3334a61762acd684ac33</anchor>
      <arglist>(long v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a400cb5b6e939c08f7d813b73da29b05e</anchor>
      <arglist>(unsigned long v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a02dfd7e3121c4271ed8d748bdd349f2b</anchor>
      <arglist>(unsigned int v) const</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aac9f7312e3cca901562af13a9da89857</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a18de1a825ceb6bf4ac687d0bb59ee5a7</anchor>
      <arglist>(const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>acead47ca9ffa5394a6ab1c49328f71bd</anchor>
      <arglist>(const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a33b441ea38b3fff9301fc80044fc3e8e</anchor>
      <arglist>(int64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa3db061b8cfbc4f7aa954411386563b8</anchor>
      <arglist>(uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a2c828aab5ccc92db8472d27d961ac4c1</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ad50d1480c3f4033a6d9427390e98c29c</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0eef42b615c45fc87e4a651700007140</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>digit_is_allocated</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a637c4b845be998305540b1b7ad5755e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjust_hod</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a466b8f22fa20d34de83204963d2fe15b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_actual_length</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a24c82da1a96c96123d909c621b738ef0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a486c744c24e6d2d55c764e23cfb2e7ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>acbd13e9fa0c7a68f48dcbae63af15f72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_digits_n</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa948f1947bc04dd3d17c070274f13b5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_hod</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a948ccafd32d04cfcd5ed13e0e28b907d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_raw</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a25c9b9d683d5633cf13dc6a7789148b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_raw_nbits</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a6afbbde16666673b0c1b3a0eaf32b745</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_unsigned *</type>
      <name>temporary</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a3c5f0191a22d3be7d6e3fb0c604c3f7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nbits</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a366c0cc63ea66f2470c3b5de317e9e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ndigits</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aea6a64cfb90af8a09b11c9e42ba5fbc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit *</type>
      <name>digit</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>adbae200781b72dac48a580b3800ae65b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit</type>
      <name>base_vec</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a40803dcb330055701f110d2814232a4d</anchor>
      <arglist>[SC_BASE_VEC_DIGITS &gt;0?SC_BASE_VEC_DIGITS:1]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_free</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab364641604e96abcfa5ef903833032f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_concatref</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a58586acadea2fc68be0fd227f1708d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned_bitref_r</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a6a0eea4881a0c62de292c4b4799d7e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned_bitref</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ac427bdd6476c9c3ee7b5b2d2726626aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned_subref_r</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a9e74c1b726f98535a147186bf84bd5d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned_subref</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a89c21a388a8a2e533390deee582c458e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a56d4b9d8627ee59f62be4002d3154edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed_subref</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ae83c9b2d4f5ed89484c4d7d7ff810aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed_subref_r</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ae49cdaa43aed9299ff33a85831d0321a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_bigint</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aa0ce2b050c01cde3d2a144d5b5834b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_biguint</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aead48fbb3f99e15b3c0264e6cb36ecf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_int</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a68c02819c8a7d7bf9ed8830f18a6a2ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_uint</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a5fca710fa913341ccaace9aa5cbaa9ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a25ed0c4341fe794e0a584eec0033bc5d</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API sc_signed</type>
      <name>operator-</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0c613bc9c3843a80148d737732bba527</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API sc_signed</type>
      <name>operator~</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aebb50e6a5f7411634df229146e9b7678</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_unsigned_bitref</name>
    <filename>a01925.html</filename>
    <base>sc_dt::sc_unsigned_bitref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_unsigned_bitref</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>a73ecce7a269973db1b7dfd3a2b663b44</anchor>
      <arglist>(const sc_unsigned_bitref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>a576f7c1d6cf774e2f1699ff29a52dda4</anchor>
      <arglist>(const sc_unsigned_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>aa7ceda66da5d1281fb747b014774b5dc</anchor>
      <arglist>(const sc_unsigned_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>a79b5db7f6484c971eff0962ddea369de</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>a13b0d95325fd90a98af462c02c49d311</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>a0e4f3584a54f836f7d7a873b61bfb182</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_bitref &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>a023125d156a55631ccc307ad37afc457</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>aa6c9166523c87f09b991918ddc2f81a4</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>a965166b87c8568f47dc99da415a40f78</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>a0eaa84bf2b3fcd6557655b92d5781bba</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>af17519fb4f9c2508a927a1a031d6be0a</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>ae00d312672c2db8b2deb2be993607bfd</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_unsigned_bitref</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>ac923c36aeaf6b996dea84fc336296e9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>a837324da08b9164ba6f506d2892bb614</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_unsigned_bitref &gt;</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>a2be4c31a1664772e9516ce27db0af6cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_unsigned_bitref_r</name>
    <filename>a01921.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_unsigned_bitref_r</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>ad104a0be4a0f1224362982a419ce67a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned_bitref_r</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>aaea6196f0e114546c50a7b4be48dbb2a</anchor>
      <arglist>(const sc_unsigned_bitref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>ae13ae3870af2aba5968d849879d2d554</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator uint64</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a94112722df467083da07ee23faee8bf9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>ad1355c3bba699e961501abb2703e859c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator~</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>ae1a6bbd9220aff19186d21a9eaaa73d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>value</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a2da4748aa106280e865e3b7acf4c0274</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_bool</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a7c13b098ead4d429045af6f3a3c9f99b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a757ca0197f6d24714e52e707ffd555ff</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>afcd0df2c6107563f98de35dda8aa3a17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>ab1e943c9855a2e4c9570e39c8a506400</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a49a4556b28e6b0387e959268f7f425ea</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>ab21cd0f1cd1bac449a3f1bedb44f6a12</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_unsigned_bitref_r</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>ad840a1ba7e51352362dbc66564a5360a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a7479b222cb2bc480b6b5b112133418e1</anchor>
      <arglist>(const sc_unsigned *obj_p, int index_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_index</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a60fdf8304f9137dbd2936cadfa320d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_unsigned *</type>
      <name>m_obj_p</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a946e26d1485173428c95a007193a5aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a837324da08b9164ba6f506d2892bb614</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_unsigned_subref</name>
    <filename>a01933.html</filename>
    <base>sc_dt::sc_unsigned_subref_r</base>
    <member kind="function">
      <type></type>
      <name>sc_unsigned_subref</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a620112ae83cf053219ef387bbabdf196</anchor>
      <arglist>(const sc_unsigned_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a436b6df8db4314df8a5037f0b1254202</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a816f5e66f4e2a2aff3e288d8b33bf1cc</anchor>
      <arglist>(const sc_unsigned_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>acaede0324131434c918c91f8870e377c</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>adfcfd473f67123ded9903711d139ba9c</anchor>
      <arglist>(const sc_generic_base&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>ab01d4559bab2f7f571e2246819edbad2</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a8dbe4e4d20e6bfed576894c34abe140d</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a248e18ae2b3021797093909ab18c5d29</anchor>
      <arglist>(const char *a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a55fdfc4232de72e0cdd15789ec1c28b2</anchor>
      <arglist>(unsigned long a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a12fe8dd54c5ef9a6ef357cf128361db7</anchor>
      <arglist>(long a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>aa091782bbaa471461dde4ffab8a81886</anchor>
      <arglist>(unsigned int a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a16b5e89126fd4bcf2e60a178b7853b2a</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a820f421daa7c2638550dcf2b470340ab</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>ad637a05943f13fe42b4aff62cd7d705a</anchor>
      <arglist>(int64 a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a4b477d86c699fb6e2eb5bd74e2ab1472</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>aa5eababaa1e58583953d968e736b3fca</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a3cd97691304f8e397291a75c6135c800</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a55ab968edd22d341af70f0ce5f58fc46</anchor>
      <arglist>(const sc_bv_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned_subref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>aecdc90deb18a9981f50b296305af5bc5</anchor>
      <arglist>(const sc_lv_base &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>ad2e0555021c89b42b3ca49f230de9aa0</anchor>
      <arglist>(int64 src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a8e4c5e58b7cc14560231aa7af4cabf53</anchor>
      <arglist>(const sc_signed &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>ae795c8124d4707db0aa1f1156c793ceb</anchor>
      <arglist>(const sc_unsigned &amp;src, int low_i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>concat_set</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a3843124b3e7960101fdf89b1011104b8</anchor>
      <arglist>(uint64 src, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scan</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>ab17d5577e6b3a8adf7c94b97e0442c64</anchor>
      <arglist>(::std::istream &amp;is=::std::cin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_unsigned_subref</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a09fa22ba518ee61876d84d0013fdff23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a837324da08b9164ba6f506d2892bb614</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>sc_core::sc_vpool&lt; sc_unsigned_subref &gt;</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>af1dfc620cb2ec1783b837afb62c1623f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_unsigned_subref_r</name>
    <filename>a01929.html</filename>
    <base>sc_dt::sc_value_base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_unsigned_subref_r</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a9d34e25e0757b18de383c86cb717d0da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unsigned_subref_r</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>aab9883fc300d5500675a53b4e3301a1e</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>afa4586ae7c60c14c98991cd5adcafcae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator sc_unsigned</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>ae832b4ae136591351a78f151ac3a49ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>af8ed0fb19f5927aa999c76a9aac7cac7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>to_int</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a1a200975754c6aeb2c149a662295ce17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>to_uint</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>aea2dc80946c4a30474a876ec211c7baa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>to_long</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a96875f7743fcf3d50f33de548fa1b214</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>to_ulong</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a2d0c6ddfe563e630d4aa570e083e8473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>to_int64</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a1c590deca732b8610d553ab5c3f3c045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>ae732c3166c3701c5cc85de85c68acf43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a37ba5587739a2c0658bb2d229567d789</anchor>
      <arglist>(sc_numrep numrep=SC_DEC) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a392246e2bb0930e88e1278b36f4c9f33</anchor>
      <arglist>(sc_numrep numrep, bool w_prefix) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>aa167298e74d50674e59d0f9ec81aae06</anchor>
      <arglist>(int v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a591bf4dd6f85901191884134f37dc263</anchor>
      <arglist>(const sc_signed &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>ad110b0c49fa5165dae18dbdce1680038</anchor>
      <arglist>(const sc_unsigned &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a5857ac55c1f44858fb71de09d1faf0f9</anchor>
      <arglist>(int v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a7743672b8dec6e24d3c179667de454ef</anchor>
      <arglist>(const sc_signed &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a71b0bb6a494f9409123032adfd93c59f</anchor>
      <arglist>(const sc_unsigned &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>concat_length</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a72b2a875c93bf484bd905bdc50b5d0f2</anchor>
      <arglist>(bool *xz_present_p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64</type>
      <name>concat_get_uint64</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>ad2ea36e497658d966d519589926306a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_ctrl</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a7a4140d00df8931bc87786652dafd7d1</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>concat_get_data</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>afffdba924d6d8e3daafb385a158730ae</anchor>
      <arglist>(sc_digit *dst_p, int low_i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a651585d8b20601b863a209abc529c3ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a7e56e4af87a6d4094dcc6ed9e8f9e34e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a8813570aad4f41a3331c70a1edfac7c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a0acd1650d04735fd130f45011d1605f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a4fed03d59e301b7f405b0dd859432791</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>aad8892b814606a218d20861c42dd59c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>afb33e5c82fda0f3d519c5394b99a22cd</anchor>
      <arglist>(::std::ostream &amp;os=::std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_unsigned_subref_r</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a8e99060ac1c9ff66ed191609718bc68b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>aed900b3c54988639c053a11e339a0bd5</anchor>
      <arglist>(const sc_unsigned *obj_p, int left_, int right_)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint64</type>
      <name>to_uint64_reversed</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>abb4b78fe298aa93a02f26b0ae5366dcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_left</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a287c31e86add14420306b8df51297045</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_unsigned *</type>
      <name>m_obj_p</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a822fb63370b2babab0c8cbc04eaff803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_right</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>ab755baf740db0afbff7964467c5292fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_signed</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a56d4b9d8627ee59f62be4002d3154edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a837324da08b9164ba6f506d2892bb614</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_unsigned_signal</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a4b0efbf1717a2056ecf075726c62032b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_unwind_exception</name>
    <filename>a02077.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_reset</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>a9cae9cfea0743b241bd783ecee9316ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>a4d1d32a562e763f98738bf48f1e89871</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_unwind_exception</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>a895057e79db1f04093e7481d8551bcfe</anchor>
      <arglist>(const sc_unwind_exception &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_unwind_exception</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>a23327f2f8ad71d65c508e2e8500e4c1b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_unwind_exception</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>a67b7c9d25b6a3f8bcc3ef510181a1b1e</anchor>
      <arglist>(sc_process_b *target_p, bool is_reset=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>a57ecbeaecf44aa3b9152834686b1a228</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>af9a425d8aa23a4beaed3974043e0ada3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_simcontext</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>a8a833de7b9d6933c5c9b296583c4c835</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_process_b</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>aecefb96dee3037749836e9d81eba9f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_method_process</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>acc919bce635598675ac34601d8fefbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_thread_process</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>ac96f23e2e92c5f037cba0971b62ebcff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a02077.html</anchorfile>
      <anchor>a285a9415d730026b6e9477982147ba11</anchor>
      <arglist>(void *arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_user</name>
    <filename>a02065.html</filename>
    <member kind="function">
      <type></type>
      <name>sc_user</name>
      <anchorfile>a02065.html</anchorfile>
      <anchor>a09322334de4dd920aa0f9915a1d085c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_user</name>
      <anchorfile>a02065.html</anchorfile>
      <anchor>ad6ca67bbfeea977570361a4376683f73</anchor>
      <arglist>(const sc_user &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_value_base</name>
    <filename>a01997.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_value_base</name>
      <anchorfile>a01997.html</anchorfile>
      <anchor>ae52adc2622a181df5e50f30006f8cc60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_concatref</name>
      <anchorfile>a01997.html</anchorfile>
      <anchor>a58586acadea2fc68be0fd227f1708d77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_vector</name>
    <filename>a02385.html</filename>
    <templarg>typename T</templarg>
    <base>sc_core::sc_vector_base</base>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a2bd4dea637387ec1440461f1c6b353b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_vector_iter&lt; element_type &gt;</type>
      <name>iterator</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a3f6afce2e7e40cbaee079403b63df25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_vector_iter&lt; const element_type &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a6082d8524899a810123dc40218a611b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_vector</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a7545a7e9494c6a010ebabeec359a0172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_vector</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a7f247716baf4d82a82f28a1b94354cc6</anchor>
      <arglist>(const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_vector</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>aff7d81563b88750420aa4a2da5958a6b</anchor>
      <arglist>(const char *prefix, size_type n, sc_vector_init_policy init_pol=SC_VECTOR_LOCK_AFTER_INIT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_vector</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a5dd36ea73ccdf7efdcec86346bd16455</anchor>
      <arglist>(const char *prefix, size_type n, Creator creator, sc_vector_init_policy init_pol=SC_VECTOR_LOCK_AFTER_INIT)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sc_vector</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>aad58f97be57128328e8387f2448c7b8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>element_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>af21aeb471a04ddef7445ea5da16ebdf8</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>element_type &amp;</type>
      <name>at</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a38686ac473de3758ee3825d48fb0a73a</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const element_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>ab457bed06c3dafb7fd786c659c1791df</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>const element_type &amp;</type>
      <name>at</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a000baf653182074178720530d72883a8</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a04e178b7946ddd5d6e578812ebb13730</anchor>
      <arglist>(size_type n, sc_vector_init_policy init_pol=SC_VECTOR_LOCK_AFTER_INIT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a657db48ebed7cd451eb9a68269583e49</anchor>
      <arglist>(size_type n, Creator c, sc_vector_init_policy init_pol=SC_VECTOR_LOCK_AFTER_INIT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace_back</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a0835b98c7e9620e4463e2f9f823308cd</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace_back_with_name</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>ab78dcfc0e324825b082a7466a5f55a04</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a9753c6809f208a5f7453bfe910220c43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a9d450df405ca005fc474d99b44422c64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>ade850dd38e83600aa7f6b7a891e9da3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>ad32efc2c6de98ea7c40c62d90b231584</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a53bba4315d077191687302fcca971b74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>ae1c2507b1525ef17f408c293d460dd21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a37af86f158df00c8b823b37b54a60739</anchor>
      <arglist>(sc_vector_assembly&lt; ContainerType, ArgumentType &gt; c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a8ca5d54e821be3005fc0bd722c2e764b</anchor>
      <arglist>(BindableContainer &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>ac4af4c09bb5c0c827a331424448418c1</anchor>
      <arglist>(BindableIterator first, BindableIterator last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a30b7414e2c044a2dee25d2888914aa22</anchor>
      <arglist>(BindableIterator first, BindableIterator last, iterator from)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>af081e8784ab8dd89d454fc1205f7ca23</anchor>
      <arglist>(sc_vector_assembly&lt; ContainerType, ArgumentType &gt; c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a5fedeca555e235be3da312de3e330271</anchor>
      <arglist>(ArgumentContainer &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a3925416cc3563d31f07af801193d5df7</anchor>
      <arglist>(ArgumentIterator first, ArgumentIterator last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a8f22637c36161f1e3838cb25432df295</anchor>
      <arglist>(ArgumentIterator first, ArgumentIterator last, iterator from)</arglist>
    </member>
    <member kind="function">
      <type>sc_vector_assembly&lt; T, MT &gt;</type>
      <name>assemble</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a9e6cc6dfae191e3b9ab7efc3bfd37694</anchor>
      <arglist>(MT(T::*member_ptr))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static element_type *</type>
      <name>create_element</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>aa687080a5e72c06ed1cf6c0a045a2533</anchor>
      <arglist>(const char *prefix, size_type index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>ad73f125084bd1071df96255f9437eef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual sc_object *</type>
      <name>object_cast</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>abdb53bc46c32c9e3764db7bce6196179</anchor>
      <arglist>(void *p) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_vector_assembly</name>
    <filename>a02389.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename MT</templarg>
    <member kind="typedef">
      <type>sc_vector&lt; T &gt;</type>
      <name>base_type</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a8ea11a26cf7b6d138cb34ae6a34cd7b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_vector_iter&lt; T, sc_member_access&lt; T, MT &gt; &gt;</type>
      <name>iterator</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a781f0a407f2be48714406f812ab1176a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_vector_iter&lt; const T, sc_member_access&lt; const T, const MT &gt; &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>acfc121bb71165ab1bc10ed37c78f33a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a9c4ca33705f29163ad18b595913cfc61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MT</type>
      <name>access_type</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>abf1a37885df1e57f359b38cca6c78ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::size_type</type>
      <name>size_type</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a8df719a50045a761551b5c3e21a5b141</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::difference_type</type>
      <name>difference_type</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a1def8595c38d35884d6153f0b096b30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator::reference</type>
      <name>reference</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a3076c926428a6d91c04ff02a9ac21c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator::pointer</type>
      <name>pointer</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a1427a625323b4e60d65183f459935509</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_iterator::reference</type>
      <name>const_reference</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a3927da62d21b1d0f2710e8d5ef9f2c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_iterator::pointer</type>
      <name>const_pointer</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a7aa9719c43457952a486f2a29c213327</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>access_typeT::*</type>
      <name>member_type</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a1659444726c4fb64e95836be8ad09771</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>aadf424f90c52ef7395e73ec8906109c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>kind</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a84305427173bdf8354ac1dc9a5207511</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a6e65df52a338f9d6918ae5af6a3aeac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>add08eafdc8629b1fe0975446d83e86c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a172b08546efaf8a26c324dd34a8e569a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a254745eee901612f484575651194aed2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>acdeb907150e24a9300f6bdf990fb182a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a55808ea4aeddc12992c15412818866be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a891d10041ca1d040f85150013de51af0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sc_object * &gt; &amp;</type>
      <name>get_elements</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a107bc78a3201c112035d606a08a21d6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a21fbab0516154a58954b053669354215</anchor>
      <arglist>(size_type idx)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a3d6e962e696af0375b1784b77806e431</anchor>
      <arglist>(size_type idx)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a8108c5d45b831468a7895bf5d2224b61</anchor>
      <arglist>(size_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a149b74a2950436eb6a3bffef7c56a11d</anchor>
      <arglist>(size_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a02eb039cbce09e65b7a6356b70852e4a</anchor>
      <arglist>(sc_vector_assembly&lt; ContainerType, ArgumentType &gt; c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a1761acdbba74c571b54a0072937b2817</anchor>
      <arglist>(BindableContainer &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>ab5c4ff16f89a7804a0bc6b7e57bc5cbb</anchor>
      <arglist>(BindableIterator first, BindableIterator last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a1f0d1ae4677dec78d5792bf3b0a8f845</anchor>
      <arglist>(BindableIterator first, BindableIterator last, iterator from)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>bind</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>ae6eda3d12a08ada3b0a35553ab18a3ac</anchor>
      <arglist>(BindableIterator first, BindableIterator last, typename base_type::iterator from)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a1dacdb9ddea1d532ad0a3e6f97974297</anchor>
      <arglist>(sc_vector_assembly&lt; ContainerType, ArgumentType &gt; c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a1504903b383391d2e481e7b668dc6798</anchor>
      <arglist>(ArgumentContainer &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a753c776a848777b276fc7d9e05fc05c4</anchor>
      <arglist>(ArgumentIterator first, ArgumentIterator last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a55a42c2d0a2ec6400de969642e5fa959</anchor>
      <arglist>(ArgumentIterator first, ArgumentIterator last, iterator from)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>operator()</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a289fa1d20835b60439280d415ac5f392</anchor>
      <arglist>(ArgumentIterator first, ArgumentIterator last, typename base_type::iterator from)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_vector_assembly</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>ae33ea84494c92064f83f17155b6c6846</anchor>
      <arglist>(const sc_vector_assembly &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sc_vector_assembly &amp;</type>
      <name>operator=</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a5106be0eb0d4fbd67df04b74a9cf9914</anchor>
      <arglist>(sc_vector_assembly other_copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a14cf85bca954dbea5000447f0d102fd6</anchor>
      <arglist>(sc_vector_assembly &amp;that)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report_empty_bind</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a8b93ff7d4a16759327515d1d6cb45db1</anchor>
      <arglist>(const char *kind_, bool dst_empty_) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_vector_assembly</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a93754228df22e3bf05f58f6a905f80f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_vector</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a362c26642a0fb20f77af7d7147cda97a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_vector_base</name>
    <filename>a02397.html</filename>
    <base>sc_core::sc_object</base>
    <base>sc_core::sc_stage_callback_if</base>
    <member kind="typedef">
      <type>sc_vector_element *</type>
      <name>handle_type</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a5c3b531068b2c6795f5dbb373006e5d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; handle_type &gt;</type>
      <name>storage_type</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>ae1056748aad7d9ff913021420a84745c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::size_type</type>
      <name>size_type</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a36a218e05acce5d078f29b8913251a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>storage_type::difference_type</type>
      <name>difference_type</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>aa303a96d966332f477677df4d4291008</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>kind</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>aec1a9cefdb20562361eeae8916afcd38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sc_object * &gt; const &amp;</type>
      <name>get_elements</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a3981a38e4f0030c21b934652ad91c896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a6f7fcdabdbc97346bb92416dd4450473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a6e6ebf8333abf643982853ec7bc30326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_locked</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a29dfd82b55dcd77b73fcf4d4d2fb1027</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report_empty_bind</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>aefa9bf3c0ba1f855d635b014c34e1e7f</anchor>
      <arglist>(const char *kind_, bool dst_range_) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>storage_type::iterator</type>
      <name>iterator</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a42a1f9b76e31df24684859fe59173ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>storage_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>af79350cf252ef65c64422fcbe994279d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_vector_base</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>ac355296129f899a00b88a3d4d2fc028d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_vector_base</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a92ec88874c6c6f3cedc2e51acd9476d9</anchor>
      <arglist>(const char *prefix)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~sc_vector_base</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a29e4935652ef50e89a1c37998af3801c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void *</type>
      <name>at</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a5f63b7e03b09f892f8fef2a05f34e38b</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void const *</type>
      <name>at</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>af1025121e6aea457c95f129aba7dbe08</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a05042e2f2417062b1d38556bfc569cdf</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>af3154fbe07d853b69614962182f7af97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a845243c41cf3c07ac67b8926acfadde3</anchor>
      <arglist>(void *item)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check_locked</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>ae45d04922559d7ae4ca8b4157a367461</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>check_index</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a5d12b332177a791de097530523b4b10f</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check_init</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>aa0780b97e7e89ab5ca86f1cec8150235</anchor>
      <arglist>(size_type n) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>af04157655f0f4684f1b00df3ca96708c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a60abafc74adea01fafa97f60d714f51e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a33148bbb9db6ca94263e2f1764502496</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>ac24b993db9dd56523294f505233c0704</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual sc_object *</type>
      <name>object_cast</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a28195c10afc415026103670ac81b6d95</anchor>
      <arglist>(void *) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_object *</type>
      <name>implicit_cast</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a972513f9104be953edb7a172d05a47ad</anchor>
      <arglist>(sc_object *p) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sc_object *</type>
      <name>implicit_cast</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>ae45c41d9102b65e328a68e682911b3aa</anchor>
      <arglist>(...) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_lock_cb</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>ab00b59bc58ae4278f1bb53609a2b3d6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>stage_callback</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a943f34d0c29672ec87ccecf23dce01c9</anchor>
      <arglist>(const sc_stage &amp;stage)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>make_name</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a870b6882d000990e8eb20b43325d9b6b</anchor>
      <arglist>(const char *prefix, size_type index)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_vector_assembly</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a7b4a574f4ffc4cec84a1310135c0cbfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_vector_iter</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a0d9c8be36465870b3172bd54558764d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_vector_iter</name>
    <filename>a02393.html</filename>
    <templarg>typename ElementType</templarg>
    <templarg>typename AccessPolicy</templarg>
    <base protection="private">sc_core::sc_direct_access&lt; ElementType &gt;</base>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a6eb5a63f3da8098cca0e2c0992df3939</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ad31b410fb73ebf110c8d54e9e5b83239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>access_policy::type</type>
      <name>value_type</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>af3e9445a1ae5f023515ff3d348c9eecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a1c456997f048dcebcaceee34b49d17cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>aa4c07afb2908819cbe457f840b12fefe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_vector_iter</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a089a9d007d60e5184c93da4549694b32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_vector_iter</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a413f370c5d5eff270cceb793e6543d3c</anchor>
      <arglist>(const It &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator++</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>abc47e116eab1bfe196f9459bba33082f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator--</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ab1f49449b57ea31e7a542c501fe01cf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>this_type</type>
      <name>operator++</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>af6b80a116baa18f43a6e3b3c983fe447</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>this_type</type>
      <name>operator--</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a8275a2a79e3d4e7a8b3a870d55e2a6b3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>this_type</type>
      <name>operator+</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a6ed3fcbb05f7abd39f7df78bc707d6f2</anchor>
      <arglist>(difference_type n) const</arglist>
    </member>
    <member kind="function">
      <type>this_type</type>
      <name>operator-</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a045f791fa5f1893491cb42862be5441e</anchor>
      <arglist>(difference_type n) const</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>afd9ccd7b699c31b14d8d5f107e53628b</anchor>
      <arglist>(difference_type n)</arglist>
    </member>
    <member kind="function">
      <type>this_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a96262d427e4bae9d26cfe8cfc3b94964</anchor>
      <arglist>(difference_type n)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ad834224894110c21090cc400b2749b87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ae49cd8b5d31ccf9ae1f1a00568d48813</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ac331d6f4b547a5bffc869f456094e9cb</anchor>
      <arglist>(difference_type n) const</arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>operator-</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ad0a94a4c850e7d8691b6942f31bb06c4</anchor>
      <arglist>(const_direct_iterator const &amp;that) const</arglist>
    </member>
    <member kind="function">
      <type>raw_iterator</type>
      <name>raw</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>ab9bf6a7e8e30ca0ca637bddccaeb2f0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_vector&lt; plain_type &gt;</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a0c209cfd9595daeddda67aab9da150bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_vector_assembly</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a7b4a574f4ffc4cec84a1310135c0cbfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>sc_vector_iter</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a0d9c8be36465870b3172bd54558764d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_vpool</name>
    <filename>a02381.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type></type>
      <name>sc_vpool</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>ab5b01e7b12d2de407ae96b91814c12a4</anchor>
      <arglist>(int log2, T *pool_p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sc_vpool</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>aa486fedc6c53b748dfdc26e155c6bb9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>allocate</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>ada12261afe8aa7bf0051594e77442ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>ab569f89ce8f7f8395ad8451b844e8533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a7605175ea69c4e71edf85467f42b7a71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_pool_i</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>aff7eb7691b1e8db15af19b9459123617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>m_pool_p</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a11d0b4c4b790137c9d1df6848f9dfb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>m_wrap</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a430f408c8db8337106d2aeed41196812</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::sc_without_context</name>
    <filename>a01685.html</filename>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_check</name>
    <filename>a01525.html</filename>
    <templarg>sc_writer_policy</templarg>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_check&lt; SC_MANY_WRITERS &gt;</name>
    <filename>a01553.html</filename>
    <base>sc_core::sc_writer_policy_nocheck_port</base>
    <base>sc_core::sc_writer_policy_check_delta</base>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_check&lt; SC_ONE_WRITER &gt;</name>
    <filename>a01549.html</filename>
    <base>sc_core::sc_writer_policy_check_port</base>
    <base>sc_core::sc_writer_policy_check_write</base>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_check&lt; SC_UNCHECKED_WRITERS &gt;</name>
    <filename>a01557.html</filename>
    <base>sc_core::sc_writer_policy_nocheck_port</base>
    <base>sc_core::sc_writer_policy_nocheck_write</base>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_check_delta</name>
    <filename>a01537.html</filename>
    <base>sc_core::sc_writer_policy_check_write</base>
    <member kind="function">
      <type>bool</type>
      <name>needs_update</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a08689db9a9a1b854cad8e323afe0baf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a80bf656d80983600030831a4ab98a64b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_writer_policy_check_delta</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a1f6804cc64c547f6c3fc2556541cab55</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_check_port</name>
    <filename>a01545.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>check_port</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>adf685dceeef16b4453bd5d7bfe2e075b</anchor>
      <arglist>(sc_object *target, sc_port_base *port, bool is_output)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_writer_policy_check_port</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>aadd7ce93eae842bedce17b7db700e255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_port_base *</type>
      <name>m_output</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>a70c873db9370ce44bd0adacae43c88ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_check_write</name>
    <filename>a01533.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>check_write</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a270e4162081657be3f632cd7d6418717</anchor>
      <arglist>(sc_object *target, bool value_changed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needs_update</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>ab4e83d0cd3f6feb0b98b1b9aab1adff8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a99d3a149aacf17e453905616a7693d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>sc_writer_policy_check_write</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a7062d0aa17c582c199e6da3dcded4fa0</anchor>
      <arglist>(bool delta_only=only_delta())</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>m_delta_only</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>ad7c8ef9ee370eb9383ddbb72697f0606</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_process_handle</type>
      <name>m_writer_p</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a24ce9357bbf246b559ca1d8c2c4a117d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_nocheck_port</name>
    <filename>a01541.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>check_port</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>a98b439f58119befec7159ab20ffd1150</anchor>
      <arglist>(sc_object *, sc_port_base *, bool)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_writer_policy_nocheck_write</name>
    <filename>a01529.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>check_write</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>ad24d654acb3a926b761ad2ddd8f4e9d1</anchor>
      <arglist>(sc_object *, bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needs_update</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>a8e9f00b4fbd499a4671fcfd2954a0605</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>a7e11d84a41e9b54d41e71d198e916f98</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::sc_zstring_view</name>
    <filename>a02377.html</filename>
    <base>sc_core::sc_string_view</base>
    <member kind="function">
      <type></type>
      <name>sc_zstring_view</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>a3ba077ad5eae272d272f99b1327cf583</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_zstring_view</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>a07a6a506626a403cd5a3d14f4167d930</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sc_zstring_view</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>acad8522315c5f1502143fd14d9c663b7</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>a08dff0b1ad0af000bc04e1c0016f37b1</anchor>
      <arglist>(sc_zstring_view &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>c_str</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>aad21166113970c4005bf94321b59f731</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_ieee_double</name>
    <filename>a01801.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_ieee_double</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a5a7d68abdd56c51ef7e2b05a2eac8378</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_ieee_double</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a534df86488fb95122ddeea49a43f5d42</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_ieee_double</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a02df9fc60364529ab713eb73ad5d8920</anchor>
      <arglist>(const scfx_ieee_double &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scfx_ieee_double &amp;</type>
      <name>operator=</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a9ae29b1eeb58677843e6aac2974a23f5</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>scfx_ieee_double &amp;</type>
      <name>operator=</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>abd2254c8ecc21503fee6f41fa988eb12</anchor>
      <arglist>(const scfx_ieee_double &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a57f00addebd0d50b3491166f306d13a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>negative</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ac9c3a68ae4e29cd86ad84de1ae4010fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negative</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a81c699d6d228518e5035309cd319cdc0</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exponent</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>aeb377d63b97097ef0e4bf3642e3daad8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exponent</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>aab8608b977c52cf02c58de9f0b145e77</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>mantissa0</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a944b8c7a64358daf88479550de0c0eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mantissa0</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>abf26b070fa8ab564393f1e1d854cc16a</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>mantissa1</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a3948455ea71d4de49de8ef802fcdb1b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mantissa1</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a9ff95f8631ac8116afabcddc6ddb71cd</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_zero</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>af1d4bd164da352a6ede40f083eade976</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_subnormal</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ac78da65f48eaecb101d89f205f9935d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_normal</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ad657814227cdb7140c88e5028c5ac116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inf</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a0b0b791c39145f25c9108fbdd22f3344</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nan</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>abda7158a1627add049f232e1c00b2da2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_inf</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a32e2b16fd19bca1427d817a813cb54b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_nan</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a883335df4d7d21d319e0a520ac73290a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>msb</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a46557bb2d99183811a80f336b1358db6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lsb</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>ac4e098d9b3f732f47fbf66da27f6f5d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static scfx_ieee_double</type>
      <name>nan</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a62c5c71f5a168fc9aa9ddf4528a57bbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static scfx_ieee_double</type>
      <name>inf</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a7a7322ff7203ed3f87e84019150671d8</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_ieee_float</name>
    <filename>a01813.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_ieee_float</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a1bd0d5ca12b24fe247ad55321960981a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_ieee_float</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a4b71e3923eefe8e229c1bef42e6fd9d9</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_ieee_float</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac8a3d1338a0a9c639080ec7670e7dd3b</anchor>
      <arglist>(const scfx_ieee_float &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scfx_ieee_float &amp;</type>
      <name>operator=</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a5624f6cf655955a59542f1bcb5a69461</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function">
      <type>scfx_ieee_float &amp;</type>
      <name>operator=</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac77d92f0943b5611b3008be07474b946</anchor>
      <arglist>(const scfx_ieee_float &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator float</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a3bbd9a0fe532ff3ffa2f60469fbe7885</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>negative</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a833c5584f6200951cf6c152994387b07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negative</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>af40880b852a1f625bde070ecf53b378e</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>exponent</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a93d4e8bfccedc22c440b2fcd2e425fcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exponent</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a3583668263f747a40fff548888046983</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>mantissa</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a2f9418246ab08637cb1164d41b524407</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mantissa</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a02065ce8f3e1304fd362049b48a144ac</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_zero</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a4148317d490bc40131c1b4668b576cbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_subnormal</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>afbcb06fde1d72e5b3e896befcf5fc04a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_normal</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>af29f2ac8b3eb447d04c8aff2247c68d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inf</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>af01dd5913026c4c13b6beca3063cb69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nan</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a28098127e07bfea23cac4e26f84faee4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_inf</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a4aedea5e6ea9359fa625372aa650dcfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_nan</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a0a89b46b8706ebd54f82474292687ee9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_index</name>
    <filename>a01833.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_index</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a280eec8639362c73a73d7c93463ddd4b</anchor>
      <arglist>(int wi_, int bi_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wi</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>acc2d660305cced99a1d5ccd5fd211051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bi</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a08543a389f7883520232e59facb6c7b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wi</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>ae68390ca9c091f5e24fe6949c4d48adc</anchor>
      <arglist>(int wi_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_mant</name>
    <filename>a01817.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_mant</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>afbb2bf2111c085ed7baff36757b5f842</anchor>
      <arglist>(std::size_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_mant</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a1155a06bcaa0b94fb136c42c4f221383</anchor>
      <arglist>(const scfx_mant &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scfx_mant &amp;</type>
      <name>operator=</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a3f76754d3384f5438ae83f24bfe0ec90</anchor>
      <arglist>(const scfx_mant &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~scfx_mant</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a37e287488b84dca54ef9ff496b75fcb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a5b10230d6497049cedc28fc9c5a0975a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize_to</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>afb89294cb62e8a7ff930e36b9558aa41</anchor>
      <arglist>(int, int=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>ac6d08fe602ed02cf3bbb1ed221861619</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>operator[]</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a456393698e26cbe194601ae301d07524</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>word &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a71da6ce7c5f47d193d4d264b012bf26b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>half_word</type>
      <name>half_at</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a83980eb5bb33540c6d2994a555a1629a</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>half_word &amp;</type>
      <name>half_at</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a528b7ac290b72bd758ee66778501bafe</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>half_word *</type>
      <name>half_addr</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>aa7162f591c470abdc023e15e7b6f4a20</anchor>
      <arglist>(int=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_mant_ref</name>
    <filename>a01821.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_mant_ref</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>aec2b8849105137b7c050d267b9379e5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_mant_ref</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a5cc97ba70a0c96c4001bee358a66422b</anchor>
      <arglist>(const scfx_mant &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_mant_ref</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a34daf97711cd44175f94b83f9c31ede8</anchor>
      <arglist>(scfx_mant *)</arglist>
    </member>
    <member kind="function">
      <type>scfx_mant_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a439cca0c19d4cfde9a01e35ab95a846e</anchor>
      <arglist>(const scfx_mant &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scfx_mant_ref &amp;</type>
      <name>operator=</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>ad8d2d2f335d56f7d4e03f8607070c110</anchor>
      <arglist>(scfx_mant *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~scfx_mant_ref</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a04a53a47b1813ffd0a3a26eb7c3efb4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator scfx_mant &amp;</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>ab3c2bf707da1c04382c7f5837dae002c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>operator[]</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a07f54b1c1b7fa3d43732e94df05146dc</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_params</name>
    <filename>a01825.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_params</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>aebb5d21454bf7be9aab663eb16eaf1aa</anchor>
      <arglist>(const sc_fxtype_params &amp;, sc_enc, const sc_fxcast_switch &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxtype_params &amp;</type>
      <name>type_params</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>ac1e0dbca16494fa7988df33064ab5661</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_enc</type>
      <name>enc</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a1fda3cb5b36a6e4fd558c30cf05bcb7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_fxcast_switch &amp;</type>
      <name>cast_switch</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a1d418a0dd0e09848d7716303c18f084d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>wl</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>afc0454ec68f6abcfbe5d81284598f033</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iwl</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a0dc02f29b7303460bb6087bdb1927d05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fwl</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a311e478bb9a13191a4c034aebedd106b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_q_mode</type>
      <name>q_mode</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a51087baa4449e9cef14915c41f9aa6d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_o_mode</type>
      <name>o_mode</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a4e53f2a1beb806d7d8f450da4ee52fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>n_bits</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>ad58284df6f3d7326e3d98b87e51e6d89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a5d2903b750e05d43de7289ef8ef7816d</anchor>
      <arglist>(::std::ostream &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_pow10</name>
    <filename>a01829.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_pow10</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>a98d88623d050c675bae0553f18708524</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~scfx_pow10</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>adff6b28835c93c93e8e50a64c50204c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep</type>
      <name>operator()</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>a72933acc552dedce2dd6eb4ca9f9c687</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_rep</name>
    <filename>a01837.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a9609ae2e0f0afb34de7a559d3197b194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a7b8bbfffa98ba148e1765055e4024adf</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a89c913e8c803b278bad8af74fe035c61</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>ae487e7aaa601ddb82d8fd2289717c545</anchor>
      <arglist>(long)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a1e3ed5526eda0b1fcf607688fab29678</anchor>
      <arglist>(unsigned long)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a8385d01d4b7d19c2b2aada135e204ca8</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a0ba3552dd124a05554b225798195027a</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a4ea4feffe156635d4d325444df6a856b</anchor>
      <arglist>(int64)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a1141482cc6758bb32ed479ae1d8b5e7b</anchor>
      <arglist>(uint64)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>ab4b3a2137d47c98b812f3300767f3b34</anchor>
      <arglist>(const sc_signed &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a3063e8d89f4f1a94a0a196cb45531a1e</anchor>
      <arglist>(const sc_unsigned &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a8083be117bcc89653716d0e918751ff6</anchor>
      <arglist>(const scfx_rep &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a65a2e8fdf493f238d8a07a3e501a45ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>ac05f5fb575ca3baa0a8a16b189baf169</anchor>
      <arglist>(std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a878825b3e1d4540719ac463f86be143c</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>from_string</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a5cec9de6c2c128c015bc90e926e1b84e</anchor>
      <arglist>(const char *, int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>to_double</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>ad9560b91773c784721fe9f9d28c50484</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>to_uint64</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a70e3abe40ea120a1fbfd426198e1f289</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>to_string</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>ad4f27d3eb211823c2b7c6be102e90ba1</anchor>
      <arglist>(sc_numrep, int, sc_fmt, const scfx_params *=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a49d3fd2dd0a8c068d3d0645ed901c5c0</anchor>
      <arglist>(const scfx_rep &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a745c87c9ae37f207d39af6a0d5cb6b3e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>aa9113ebe1c1c5080c15d370b8e2f86e3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cast</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a1247dc3f5ac13185316006116a4518a9</anchor>
      <arglist>(const scfx_params &amp;, bool &amp;, bool &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_neg</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>ae48a73261173b08a2124bbe68c6b2264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_zero</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>af85ea614c87809e7f29ff8db0f3dcf30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nan</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>ac9455cec3d3976d186df038e299f7596</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inf</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a6b31bf9e673a0603641ed093990a21fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_normal</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>adfeae2a78eb147615357758853d3e28e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_zero</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>ac94774fef4bdd5a320ea96441427db7d</anchor>
      <arglist>(int=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_nan</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>aaf9d6903892a1d53cd5f8b725713982d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_inf</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a3d19a84ce0686980ab9b5dc5a274ce50</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_bit</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a90b1dbb74fe1e5899d09c86b29b821e7</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>aa3861bce90ab92abc6dd4b571655c9d7</anchor>
      <arglist>(int, const scfx_params &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clear</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>aecb4b5587f75371f35c0501d908b7002</anchor>
      <arglist>(int, const scfx_params &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_slice</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>aec08f791643692f041e955f18366e7c4</anchor>
      <arglist>(int, int, const scfx_params &amp;, sc_bv_base &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_slice</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>ab7edb27aa57dd1806666400fb6e44736</anchor>
      <arglist>(int, int, const scfx_params &amp;, const sc_bv_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a0d55b278005c08509689bf1b3219860f</anchor>
      <arglist>(::std::ostream &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a0e2f127e6a5f600c5faf81349a604815</anchor>
      <arglist>(::std::ostream &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_type</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a9931e2927a12605183739e068444d024</anchor>
      <arglist>(int &amp;, int &amp;, sc_enc &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rounding_flag</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a6d1c62c49184156bc70f7acef3c2dfd7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API void</type>
      <name>multiply</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a8a1c18fbc86946852dc5331e885a44bb</anchor>
      <arglist>(scfx_rep &amp;, const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_MAX_WL_)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API scfx_rep *</type>
      <name>neg_scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a399a785bf57db1bd5eb457603a544102</anchor>
      <arglist>(const scfx_rep &amp;a)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API scfx_rep *</type>
      <name>mult_scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a05a76a14d23b21a458a02235935fd41e</anchor>
      <arglist>(const scfx_rep &amp;a, const scfx_rep &amp;b, int max_wl=SC_DEFAULT_MAX_WL_)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API scfx_rep *</type>
      <name>div_scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>acfa50a6847c3ca606502bc2158daf299</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_DIV_WL_)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API scfx_rep *</type>
      <name>add_scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a423ef46253183a15e9d3103be38d7e2d</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_MAX_WL_)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API scfx_rep *</type>
      <name>sub_scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a1a3441590a3431602df453f45ad70901</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_MAX_WL_)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API scfx_rep *</type>
      <name>lsh_scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a982cf3ea1934f7e49d706a28c1689b82</anchor>
      <arglist>(const scfx_rep &amp;a, int b)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API scfx_rep *</type>
      <name>rsh_scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>ae07bc4fed60b8295ded23c9cc137a857</anchor>
      <arglist>(const scfx_rep &amp;a, int b)</arglist>
    </member>
    <member kind="friend">
      <type>friend SC_API int</type>
      <name>cmp_scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a1a090077ef85ba6ab7e946f87fc16b12</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend scfx_rep *</type>
      <name>quantization_scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a46ad1d7279c69641b5b46878f8cf3537</anchor>
      <arglist>(const scfx_rep &amp;a, const scfx_params &amp;params, bool &amp;q_flag)</arglist>
    </member>
    <member kind="friend">
      <type>friend scfx_rep *</type>
      <name>overflow_scfx_rep</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a3c4ddaab2860dd8ebe3f2e0e309b5323</anchor>
      <arglist>(const scfx_rep &amp;a, const scfx_params &amp;params, bool &amp;o_flag)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>align</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>ad40520c333d37d5f608210c4b648d6ad</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int &amp;, int &amp;, scfx_mant_ref &amp;, scfx_mant_ref &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend int</type>
      <name>compare_msw</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a96edd534e8a8b2b49a81c970f7e69d1a</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend int</type>
      <name>compare_msw_ff</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a359c2f8560aae9367f34e3678a9ced4b</anchor>
      <arglist>(const scfx_rep &amp;lhs, const scfx_rep &amp;rhs)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>print_dec</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a5cb8fdfa027314639a8251c346ca057a</anchor>
      <arglist>(scfx_string &amp;, const scfx_rep &amp;, int, sc_fmt)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>print_other</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>ae1b88d3e51d87776db78712c0f444f48</anchor>
      <arglist>(scfx_string &amp;, const scfx_rep &amp;, sc_numrep, int, sc_fmt, const scfx_params *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend int</type>
      <name>compare_abs</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>a30b9f2062a3feeb99fa1f3ab629bad48</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::scfx_string</name>
    <filename>a01841.html</filename>
    <member kind="function">
      <type></type>
      <name>scfx_string</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a3509e61d5fe9589aff6daa9933dfac71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~scfx_string</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>ad15213866673062361d35990e420f655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>ab6887d4f42d198be6ce12ad79a29818b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a32719a54dea61e6df45803a42dfb72f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a3675700ff35ae09f99677f3492844aa2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a6afd83d36add16f0b9f54efeee2bba80</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>discard</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a72e01a6369e5a37881583e8777b056e5</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>ab91ac065163423f62b17a01d385ae59e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a3bcb49f3604242d6827d981fea185fea</anchor>
      <arglist>(char)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>a8e94ef54d3151f5a1334a264a9b9a22d</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>aaf14f031bc7ec1c95b93797e08576bab</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::ScNativeDigits</name>
    <filename>a01957.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="class">
    <name>sc_dt::ScNativeDigits&lt; int &gt;</name>
    <filename>a01977.html</filename>
    <member kind="enumvalue">
      <name>ACTUAL_WIDTH</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>acd3043898ac8f2f671c370666d55bfb1aaac3b327f7cfe037bb9f59a733aa837f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITS_N</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>acd3043898ac8f2f671c370666d55bfb1a081486c958304a41f659b752ca5cd3ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOD</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>acd3043898ac8f2f671c370666d55bfb1a2c8a42c466c05feeafcb17bd706412ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIDTH</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>acd3043898ac8f2f671c370666d55bfb1a52715308fbce54e1226946eda225a0eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>acd3043898ac8f2f671c370666d55bfb1af07323f1196ab0826465a76c5445f4b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACTUAL_WIDTH</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>acd3043898ac8f2f671c370666d55bfb1aaac3b327f7cfe037bb9f59a733aa837f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITS_N</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>acd3043898ac8f2f671c370666d55bfb1a081486c958304a41f659b752ca5cd3ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOD</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>acd3043898ac8f2f671c370666d55bfb1a2c8a42c466c05feeafcb17bd706412ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIDTH</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>acd3043898ac8f2f671c370666d55bfb1a52715308fbce54e1226946eda225a0eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>acd3043898ac8f2f671c370666d55bfb1af07323f1196ab0826465a76c5445f4b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScNativeDigits</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>acef6420757aefb52f43f9d9c88529382</anchor>
      <arglist>(int init)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_actual_length</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>af674f3c14c8dae629ab4079a56a3ee2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>a50ed172a7d778ef17d3f64fa34abf124</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>a5eaf0d9159aa35ee58867bb3db549fa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_digits_n</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>a217eab57a7b73e97c4835d35a2cbc083</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_hod</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>a370c061bbf434f87a9dcd9996df86256</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>af950712cd50edb9ded3ad25f2568672e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_signed</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>a72c81f6a8c769decdb50c784859a3484</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit</type>
      <name>m_digits</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>aea234f8f2dee56065882f3f729f98b28</anchor>
      <arglist>[DIGITS_N]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::ScNativeDigits&lt; int64 &gt;</name>
    <filename>a01961.html</filename>
    <member kind="enumvalue">
      <name>ACTUAL_WIDTH</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>af4c8a447399b29e3a6015e287b67d1f5a9c074b34046b2600182c4d4fefd0e1a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITS_N</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>af4c8a447399b29e3a6015e287b67d1f5a1c18c23982c0bb4b18149c1af7cbb052</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOD</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>af4c8a447399b29e3a6015e287b67d1f5ab467524219152b33b7e2b17ddf4da049</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIDTH</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>af4c8a447399b29e3a6015e287b67d1f5a19e96d43f3b0d0c60fce33cc9016758e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>af4c8a447399b29e3a6015e287b67d1f5a8edab20a51eb21fe8b640da83c125f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACTUAL_WIDTH</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>af4c8a447399b29e3a6015e287b67d1f5a9c074b34046b2600182c4d4fefd0e1a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITS_N</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>af4c8a447399b29e3a6015e287b67d1f5a1c18c23982c0bb4b18149c1af7cbb052</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOD</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>af4c8a447399b29e3a6015e287b67d1f5ab467524219152b33b7e2b17ddf4da049</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIDTH</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>af4c8a447399b29e3a6015e287b67d1f5a19e96d43f3b0d0c60fce33cc9016758e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>af4c8a447399b29e3a6015e287b67d1f5a8edab20a51eb21fe8b640da83c125f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScNativeDigits</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a8b56292d909d24bdcd2634c43b276c08</anchor>
      <arglist>(int64 init)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_actual_length</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a8f5d692bb3fc6e4a6fb7850e2f61d09f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a417d60bad51e994f0e606d80cfc37f92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a69af6d4c59868c5abb9678a8136818c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_digits_n</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a6a2274617770598b4bf9f2eccce41334</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_hod</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a38507b6969c2aee1951fcfb5eccbe392</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_signed</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>ab932c2ac39627a8b45aa3ff2d35763f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a45cbc31d7c92bdf436dad91b8f0cd325</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit</type>
      <name>m_digits</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>aa376956a2dd8a428cece7c79398ed718</anchor>
      <arglist>[DIGITS_N]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::ScNativeDigits&lt; long &gt;</name>
    <filename>a01969.html</filename>
    <member kind="enumvalue">
      <name>ACTUAL_WIDTH</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>abf39263a0c463d8a2b086267eb302c27ac9f5f7360b27b22e25beaa193f8218d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITS_N</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>abf39263a0c463d8a2b086267eb302c27a8bfa2e73d419606514b80e685d81234c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOD</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>abf39263a0c463d8a2b086267eb302c27ac445813c21f41fa5dd394747a7e112e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIDTH</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>abf39263a0c463d8a2b086267eb302c27a09cbc4e9d7de2f600e1bdd01c6943d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>abf39263a0c463d8a2b086267eb302c27a6cb032eca8f01e18592554433360334e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACTUAL_WIDTH</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>abf39263a0c463d8a2b086267eb302c27ac9f5f7360b27b22e25beaa193f8218d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITS_N</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>abf39263a0c463d8a2b086267eb302c27a8bfa2e73d419606514b80e685d81234c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOD</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>abf39263a0c463d8a2b086267eb302c27ac445813c21f41fa5dd394747a7e112e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIDTH</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>abf39263a0c463d8a2b086267eb302c27a09cbc4e9d7de2f600e1bdd01c6943d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>abf39263a0c463d8a2b086267eb302c27a6cb032eca8f01e18592554433360334e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScNativeDigits</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>a006b09f1838fd7c2f6ec62098aa4aafc</anchor>
      <arglist>(long init)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_actual_length</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>a1bbaf05ef72674ea9fb4f00a4790a091</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>a8bb4568b32d0da19875c023f881cb870</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>a7312a06f6356b71f37e5e38fb2d2c5b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_digits_n</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>a540d13e6d895abe8afb4e4fece05549f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_hod</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>aa7a3aa2865d0c66b7d9e872959ce62d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_signed</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>a4e1246323bcefa9ecb92f08c2a0cf2ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>a718e3b433965f32fe41dd9144f4d77e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit</type>
      <name>m_digits</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>a68e6657371c0311fcf744dd4862277f7</anchor>
      <arglist>[DIGITS_N]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::ScNativeDigits&lt; uint64 &gt;</name>
    <filename>a01965.html</filename>
    <member kind="enumvalue">
      <name>ACTUAL_WIDTH</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a35cd775d9af336f62ed393aaac7eeca2a2e37b3fc797ecec4e33ac5d862a8d4b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITS_N</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a35cd775d9af336f62ed393aaac7eeca2ad8ac601b235a974d37e10e891eb81065</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOD</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a35cd775d9af336f62ed393aaac7eeca2a085d9bd9ee089b33f5abd66ed1badbee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIDTH</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a35cd775d9af336f62ed393aaac7eeca2a8eda37c8c49e0e20d8aacf19b9cd8e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a35cd775d9af336f62ed393aaac7eeca2a9dd61f351aee384070cceced1a9f25e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACTUAL_WIDTH</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a35cd775d9af336f62ed393aaac7eeca2a2e37b3fc797ecec4e33ac5d862a8d4b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITS_N</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a35cd775d9af336f62ed393aaac7eeca2ad8ac601b235a974d37e10e891eb81065</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOD</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a35cd775d9af336f62ed393aaac7eeca2a085d9bd9ee089b33f5abd66ed1badbee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIDTH</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a35cd775d9af336f62ed393aaac7eeca2a8eda37c8c49e0e20d8aacf19b9cd8e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a35cd775d9af336f62ed393aaac7eeca2a9dd61f351aee384070cceced1a9f25e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScNativeDigits</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>ab623c53d7806842ccd6e774130c8bcb4</anchor>
      <arglist>(uint64 init)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_actual_length</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a02f94f4a0d3509190152a793668fd6a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a24d436af23e96b95292f91b72d625fd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>afcc28de3af047848eb173f0c8235478f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_digits_n</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a45445f50b1c1aab35fd5d48c42e88a6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_hod</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>aecea28c93161850a20a661ce0c73b3cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_signed</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a8168c8fed82e78cc3c085a032f86f020</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>aea3572b4bffa9c2916cc1e43cff0e07d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit</type>
      <name>m_digits</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a43a3f6038ae3f5118646775be943eaf1</anchor>
      <arglist>[DIGITS_N]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::ScNativeDigits&lt; unsigned int &gt;</name>
    <filename>a01981.html</filename>
    <member kind="enumvalue">
      <name>ACTUAL_WIDTH</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a80cf7ceb3beaa98d3725d0543ddddb5cabec135d63123e2ffc1faed46d6093d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITS_N</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a80cf7ceb3beaa98d3725d0543ddddb5ca1060aa85088e70e9d27d324d5949e5e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOD</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a80cf7ceb3beaa98d3725d0543ddddb5ca6df2cf469ca90b5dd7fec40cf0d7fc47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIDTH</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a80cf7ceb3beaa98d3725d0543ddddb5cad6c0016fec1f533eb2b7b83e5d48c528</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a80cf7ceb3beaa98d3725d0543ddddb5ca2269033ebeee1fe0cbc7a955a185407e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACTUAL_WIDTH</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a80cf7ceb3beaa98d3725d0543ddddb5cabec135d63123e2ffc1faed46d6093d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITS_N</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a80cf7ceb3beaa98d3725d0543ddddb5ca1060aa85088e70e9d27d324d5949e5e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOD</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a80cf7ceb3beaa98d3725d0543ddddb5ca6df2cf469ca90b5dd7fec40cf0d7fc47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIDTH</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a80cf7ceb3beaa98d3725d0543ddddb5cad6c0016fec1f533eb2b7b83e5d48c528</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a80cf7ceb3beaa98d3725d0543ddddb5ca2269033ebeee1fe0cbc7a955a185407e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScNativeDigits</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>aaabdcfa4e177db135c442b4031d8ca13</anchor>
      <arglist>(unsigned long init)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_actual_length</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>af8c6568f926d7a5a9ed732a594419730</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a0b8b9975823548a6a252127f61a078e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>ac26f894d75ebbea6c514d7a0c1259262</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_digits_n</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a08f387b0c8abf99380f392033f46ba22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_hod</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a7f98967ee1e12cb52a9643be64fef018</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_signed</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>aecdae5d9e476867f72981f24c6d6bd8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>ad7f8310a34908da7c1b57c1aa63a973f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit</type>
      <name>m_digits</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>a7eb610c681ed69ce328922e1dd854246</anchor>
      <arglist>[DIGITS_N]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::ScNativeDigits&lt; unsigned long &gt;</name>
    <filename>a01973.html</filename>
    <member kind="enumvalue">
      <name>ACTUAL_WIDTH</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a430c7d1b9a70a93d512f6bd59cbd715cafff8366e529ce4229d75ca036f80f60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITS_N</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a430c7d1b9a70a93d512f6bd59cbd715ca5ddde9cd6cd6f62f85d1ff271625b1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOD</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a430c7d1b9a70a93d512f6bd59cbd715cad9651b16ad4159bc172bf6ca84aeffaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIDTH</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a430c7d1b9a70a93d512f6bd59cbd715ca385aad400d83bd62727b874140554d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a430c7d1b9a70a93d512f6bd59cbd715caa2ffe18dd5ceb4f1477b5ed995e522a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACTUAL_WIDTH</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a430c7d1b9a70a93d512f6bd59cbd715cafff8366e529ce4229d75ca036f80f60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGITS_N</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a430c7d1b9a70a93d512f6bd59cbd715ca5ddde9cd6cd6f62f85d1ff271625b1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOD</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a430c7d1b9a70a93d512f6bd59cbd715cad9651b16ad4159bc172bf6ca84aeffaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIDTH</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a430c7d1b9a70a93d512f6bd59cbd715ca385aad400d83bd62727b874140554d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a430c7d1b9a70a93d512f6bd59cbd715caa2ffe18dd5ceb4f1477b5ed995e522a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScNativeDigits</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a39391da987c2a87335b86d1565b2641d</anchor>
      <arglist>(unsigned long init)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_actual_length</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a40a667003dc262a6e24ae77016565db6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>aa256f6813313873738fd73b0bcba10ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sc_digit *</type>
      <name>get_digits</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a60150dc1a0116182d4c387f872cb854f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_digits_n</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>af601c86232bea15fd6083fbb0d67dce0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_hod</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>ae806621057e74bc0ff2c354ba6fe4d2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>is_signed</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a71b0f5d468f00d456e090e2d474168b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>aa517c191aca990df7862d9bc740049ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sc_digit</type>
      <name>m_digits</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a08e15bee92eb5aecabaa536dd708c6d4</anchor>
      <arglist>[DIGITS_N]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::scoped_flag</name>
    <filename>a02161.html</filename>
    <member kind="function">
      <type></type>
      <name>scoped_flag</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a59abbd7bb29081aa55635e5489b0209b</anchor>
      <arglist>(bool &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~scoped_flag</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a119776df26a46a3a139b5adc47ab86c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool &amp;</type>
      <name>ref</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ab43829487cd20678b771d37968d49181</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sc_core::sc_object_manager::table_entry</name>
    <filename>a02137.html</filename>
    <member kind="function">
      <type></type>
      <name>table_entry</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a36777caa86b3cf8f156884a7ce1791fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>m_element_p</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a529be0c2808b88c2b8c115a09d9541b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sc_name_origin</type>
      <name>m_name_origin</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>ad65268d76ba077f4b1c4f6038dec9542</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::vcd_T_trace</name>
    <filename>a02269.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="class">
    <name>sc_core::vcd_trace_file</name>
    <filename>a02273.html</filename>
    <base>sc_core::sc_trace_file_base</base>
    <member kind="enumeration">
      <type></type>
      <name>vcd_enum</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCD_WIRE</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322a0aed8d877bed34ad18d35753ab68e025</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCD_REAL</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322a9c05f840276a693859fd2fc82cdb46c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCD_EVENT</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322a7411cd50af65926d5891de31d6de926d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCD_TIME</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322a61c9029d8fa50fb7acde231468d463e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCD_LAST</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322aef7b4a199c0e1dec68ca017f91920864</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCD_WIRE</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322a0aed8d877bed34ad18d35753ab68e025</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCD_REAL</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322a9c05f840276a693859fd2fc82cdb46c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCD_EVENT</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322a7411cd50af65926d5891de31d6de926d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCD_TIME</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322a61c9029d8fa50fb7acde231468d463e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCD_LAST</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>abc49b8c4ce1d79a605e4301ea7cba322aef7b4a199c0e1dec68ca017f91920864</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vcd_trace_file</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>ae50cb419d087da5a276308fd4ee6baf6</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~vcd_trace_file</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a265d91be64ddd1c3d152d9ae13931d88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>obtain_name</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a98b2e62237c1a7fe84a3aab92603cf60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; vcd_trace * &gt;</type>
      <name>traces</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>ab05d6f51bed475ade04956f9dd971a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a3e49898354cb4e525798ba13258457fb</anchor>
      <arglist>(const sc_time &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a1e1b9a048ce8f346f5d5820abc95d8b2</anchor>
      <arglist>(const sc_event &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>afdc34ede8ab6c4b1b2c5563cd9f5ee19</anchor>
      <arglist>(const bool &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a49dafdfc6273c5f8de969228331e0e7a</anchor>
      <arglist>(const sc_dt::sc_bit &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>ad31b199b9b5cf391be38f477e0dd4e9f</anchor>
      <arglist>(const sc_dt::sc_logic &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a4fa0c74689c7240b59cbb1b5a0d78aa3</anchor>
      <arglist>(const unsigned char &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a4d616c80d3813fa1173dde6fa952539c</anchor>
      <arglist>(const unsigned short &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>ab6a9aba159fb149558b8ee04a86850ce</anchor>
      <arglist>(const unsigned int &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a2bb432c371cc80e5df6ee374af2ddeaf</anchor>
      <arglist>(const unsigned long &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>ad03fc1865da88d7a18307a4f378b7dd4</anchor>
      <arglist>(const char &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>ad417c20f3c08fb44fac5d2d9bc081c8e</anchor>
      <arglist>(const short &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a0df55089461404b11d0e35f4cf0fb331</anchor>
      <arglist>(const int &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>ae5a7297793fceb52f8bfc5d2a8f7171b</anchor>
      <arglist>(const long &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>ad714ab4a2aeffda4aeb5336b8cf58619</anchor>
      <arglist>(const sc_dt::int64 &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a60a0ada9ccb855ff25beaf14e80061af</anchor>
      <arglist>(const sc_dt::uint64 &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a1e6b94cbc29c0f84d1b2903ff099aac2</anchor>
      <arglist>(const float &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a0f0525aedb6590f803e95404026718b2</anchor>
      <arglist>(const double &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>af748fe55d45d3a277001f3ca9f76c886</anchor>
      <arglist>(const sc_dt::sc_uint_base &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>abc02948408ea08265d071efca02b964d</anchor>
      <arglist>(const sc_dt::sc_int_base &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>aee42cf99deb964d2c6e6ee9933b049d2</anchor>
      <arglist>(const sc_dt::sc_unsigned &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a515ea33ff9a3479912ac6366a6ae2f6d</anchor>
      <arglist>(const sc_dt::sc_signed &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a5def276667c0a29664f5b7f03611f5fd</anchor>
      <arglist>(const sc_dt::sc_fxval &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a9cb2205c1e2bba211c50ab1bfbf37cfc</anchor>
      <arglist>(const sc_dt::sc_fxval_fast &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a7ed980ad4bc8570e9c3b411c90734384</anchor>
      <arglist>(const sc_dt::sc_fxnum &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a3fe770905f01ecb5cf8d59560161aa30</anchor>
      <arglist>(const sc_dt::sc_fxnum_fast &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>traceT</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>af8d9b1755eb07a76d66a4a5149d142f9</anchor>
      <arglist>(const T &amp;object, const std::string &amp;name, vcd_enum type=VCD_WIRE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a86a1e5243a32acc70ac81c14e6e91d4e</anchor>
      <arglist>(const sc_dt::sc_bv_base &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>ac9fda2b2aa77987d9f1bc70a016a2425</anchor>
      <arglist>(const sc_dt::sc_lv_base &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a715785076600d7b70c06a93dca04bf4a</anchor>
      <arglist>(const unsigned &amp;object, const std::string &amp;name, const char **enum_literals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_comment</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>ac426232e89fbb1bb3b93431ad0f6483b</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cycle</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a6208d54a4a576c6e74c25cb0c01a885e</anchor>
      <arglist>(bool delta_cycle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_dt::vector_mac</name>
    <filename>a01985.html</filename>
    <member kind="function">
      <type></type>
      <name>vector_mac</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a29cb3d8510ff343684d9d219f2d213fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_product</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>ad5c65d1a26350be30220d334e2560a67</anchor>
      <arglist>(int left, int right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_product</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a1df68f01d0cd9e844bd4d50a90149d42</anchor>
      <arglist>(unsigned int left, int right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_product</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a314ef74ce043256b19cff1a020a21825</anchor>
      <arglist>(int left, unsigned int right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_product</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a1e66a272cf070dbbcfa9433278706350</anchor>
      <arglist>(unsigned int left, unsigned int right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a179dc45bb005a6aa4843227e941a9377</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>low_bits</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a54dcb45c56ddbc83e55fad077c60d224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>shift_down</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a9d6b2f263dea6226c8bceced46801a1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64</type>
      <name>m_high_bits</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a38c740c924b1fccd0d7b76dac1f82258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64</type>
      <name>m_low_bits</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a569fe53a26afc25216b4d7d419ca8596</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sc_core::wif_T_trace</name>
    <filename>a02277.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="class">
    <name>sc_core::wif_trace_file</name>
    <filename>a02281.html</filename>
    <base>sc_core::sc_trace_file_base</base>
    <member kind="enumeration">
      <type></type>
      <name>wif_enum</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIF_BIT</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8a7aa6f1e1483d2d65ab98190ff7bfdff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIF_MVL</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8a526b64e25e7aece844de5e77a1ea609c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIF_REAL</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8a824a6bbaa6acd4669448fc40860a38ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIF_LAST</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8a60297c00265f9d3c5d3f6d8afa932fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIF_BIT</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8a7aa6f1e1483d2d65ab98190ff7bfdff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIF_MVL</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8a526b64e25e7aece844de5e77a1ea609c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIF_REAL</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8a824a6bbaa6acd4669448fc40860a38ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WIF_LAST</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>aff15cc6890b0c53990a35e195ba1e5d8a60297c00265f9d3c5d3f6d8afa932fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>wif_trace_file</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a22d86c28b0ee08b871af70bb88152af5</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~wif_trace_file</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a800560b0ce5a245b511a4b3bcdc147ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>obtain_name</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a34de4a1e54e73d1f8ce1a4b9dfa27aa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; wif_trace * &gt;</type>
      <name>traces</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a480d0708db6dada1e574a67abf88e9a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a57cb8e213fe820a704962ebc7ef4af1e</anchor>
      <arglist>(const sc_time &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a0ae7afd2a4fd34f3f04109e1369f8224</anchor>
      <arglist>(const sc_event &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a591ccbaff2e7af84fcfb78e40943e5f9</anchor>
      <arglist>(const bool &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>aee9a799b9d31eb2711eb2192b0633733</anchor>
      <arglist>(const sc_dt::sc_bit &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>ac9f78f28babfb88b33a099fa9017ab25</anchor>
      <arglist>(const sc_dt::sc_logic &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>aac42ec0b2dc8019d4f690306df85ef92</anchor>
      <arglist>(const unsigned char &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>aeeaa3da29759b908ddd13babad4a685a</anchor>
      <arglist>(const unsigned short &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a1d523690a6e486c588aaa19eb1274791</anchor>
      <arglist>(const unsigned int &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a9cf1191ab2f1db0902e902ccc3548183</anchor>
      <arglist>(const unsigned long &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>aa9b8c7806f668d0d20bd47e3cad62456</anchor>
      <arglist>(const char &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>ac3deca780cbcadbe27291127163ff0e0</anchor>
      <arglist>(const short &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a9de394f97c579a021b2e6c24ff42cf55</anchor>
      <arglist>(const int &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a42d23b76a427ccb89eee87104d59c8be</anchor>
      <arglist>(const long &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a2d91d136de8dcf9a721646fec5072a88</anchor>
      <arglist>(const sc_dt::int64 &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a268e669356052197fd1f9d8a543eb14e</anchor>
      <arglist>(const sc_dt::uint64 &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a58607ed29af19935eecbb9838784c69e</anchor>
      <arglist>(const float &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a32100f972cc7ef7ab8eb19f44f6470a7</anchor>
      <arglist>(const double &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>abb76a43eb38aeb2ce5070f6ad75dffcf</anchor>
      <arglist>(const sc_dt::sc_unsigned &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a84dc83b5680a0b1372fb6de23f1ce389</anchor>
      <arglist>(const sc_dt::sc_signed &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a673a6e98f241ca5ecc4e1c3ddc3c3145</anchor>
      <arglist>(const sc_dt::sc_uint_base &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>afea34a2920d8a13d82e978eb5a29c02b</anchor>
      <arglist>(const sc_dt::sc_int_base &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a60f60de67370e4fd71eeb2099ae3e12b</anchor>
      <arglist>(const sc_dt::sc_fxval &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a745a3bdb468de8a1850d65dd30840e4b</anchor>
      <arglist>(const sc_dt::sc_fxval_fast &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a1173fa03c6c0bcd69209f6f49e393701</anchor>
      <arglist>(const sc_dt::sc_fxnum &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a3d32d0d55a22917b628c26161b085722</anchor>
      <arglist>(const sc_dt::sc_fxnum_fast &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>traceT</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a5a709a62dab461d45e66fcf3bfbebc8d</anchor>
      <arglist>(const T &amp;object, const std::string &amp;name, wif_enum type)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a98a29bb8720330d1affc2c139c225d61</anchor>
      <arglist>(const sc_dt::sc_bv_base &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>ade648c5a3a7b6aa3dce9d0f2a563001a</anchor>
      <arglist>(const sc_dt::sc_lv_base &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>aef48292fd62d2e5a7e1ed87d2d13a006</anchor>
      <arglist>(const unsigned &amp;object, const std::string &amp;name, const char **enum_literals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_comment</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a21ff21603f65146e080f7bbb7e34616a</anchor>
      <arglist>(const std::string &amp;comment)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cycle</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>ab65d8ae745dc1ed3a5865636d4a87a49</anchor>
      <arglist>(bool delta_cycle)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>sc_core</name>
    <filename>a00453.html</filename>
    <namespace>sc_core::sc_tie</namespace>
    <class kind="struct">sc_core::SC_API_VERSION_STRING</class>
    <class kind="class">sc_core::sc_attr_base</class>
    <class kind="class">sc_core::sc_attr_cltn</class>
    <class kind="class">sc_core::sc_attribute</class>
    <class kind="struct">sc_core::sc_bind_proxy</class>
    <class kind="class">sc_core::sc_buffer</class>
    <class kind="class">sc_core::sc_clock</class>
    <class kind="class">sc_core::sc_cor</class>
    <class kind="class">sc_core::sc_cor_pkg</class>
    <class kind="class">sc_core::sc_cor_pkg_qt</class>
    <class kind="class">sc_core::sc_cor_qt</class>
    <class kind="class">sc_core::sc_cthread_process</class>
    <class kind="struct">sc_core::sc_curr_proc_info</class>
    <class kind="struct">sc_core::sc_direct_access</class>
    <class kind="class">sc_core::sc_event</class>
    <class kind="class">sc_core::sc_event_and_list</class>
    <class kind="class">sc_core::sc_event_expr</class>
    <class kind="class">sc_core::sc_event_finder</class>
    <class kind="class">sc_core::sc_event_finder_t</class>
    <class kind="class">sc_core::sc_event_list</class>
    <class kind="class">sc_core::sc_event_or_list</class>
    <class kind="class">sc_core::sc_event_queue</class>
    <class kind="class">sc_core::sc_event_queue_if</class>
    <class kind="class">sc_core::sc_event_timed</class>
    <class kind="class">sc_core::sc_export</class>
    <class kind="class">sc_core::sc_export_base</class>
    <class kind="class">sc_core::sc_export_registry</class>
    <class kind="class">sc_core::sc_fifo</class>
    <class kind="class">sc_core::sc_fifo_blocking_in_if</class>
    <class kind="class">sc_core::sc_fifo_blocking_out_if</class>
    <class kind="class">sc_core::sc_fifo_in</class>
    <class kind="class">sc_core::sc_fifo_in_if</class>
    <class kind="class">sc_core::sc_fifo_nonblocking_in_if</class>
    <class kind="class">sc_core::sc_fifo_nonblocking_out_if</class>
    <class kind="class">sc_core::sc_fifo_out</class>
    <class kind="class">sc_core::sc_fifo_out_if</class>
    <class kind="class">sc_core::sc_halt</class>
    <class kind="class">sc_core::sc_hierarchy_scope</class>
    <class kind="class">sc_core::sc_host_mutex</class>
    <class kind="class">sc_core::sc_host_semaphore</class>
    <class kind="class">sc_core::sc_in</class>
    <class kind="class">sc_core::sc_in&lt; bool &gt;</class>
    <class kind="class">sc_core::sc_in&lt; sc_dt::sc_logic &gt;</class>
    <class kind="class">sc_core::sc_in_resolved</class>
    <class kind="class">sc_core::sc_in_rv</class>
    <class kind="class">sc_core::sc_initializer_function</class>
    <class kind="class">sc_core::sc_inout</class>
    <class kind="class">sc_core::sc_inout&lt; bool &gt;</class>
    <class kind="class">sc_core::sc_inout&lt; sc_dt::sc_logic &gt;</class>
    <class kind="class">sc_core::sc_inout_resolved</class>
    <class kind="class">sc_core::sc_inout_rv</class>
    <class kind="class">sc_core::sc_interface</class>
    <class kind="class">sc_core::sc_join</class>
    <class kind="class">sc_core::sc_kill</class>
    <class kind="class">sc_core::sc_lv_resolve</class>
    <class kind="class">sc_core::sc_member_access</class>
    <class kind="class">sc_core::sc_mempool</class>
    <class kind="class">sc_core::sc_method_process</class>
    <class kind="class">sc_core::sc_module</class>
    <class kind="class">sc_core::sc_module_name</class>
    <class kind="class">sc_core::sc_module_registry</class>
    <class kind="class">sc_core::sc_mpobject</class>
    <class kind="struct">sc_core::sc_msg_def</class>
    <class kind="class">sc_core::sc_mutex</class>
    <class kind="class">sc_core::sc_mutex_if</class>
    <class kind="class">sc_core::sc_name_gen</class>
    <class kind="class">sc_core::sc_object</class>
    <class kind="class">sc_core::sc_object_host</class>
    <class kind="class">sc_core::sc_object_manager</class>
    <class kind="class">sc_core::sc_out</class>
    <class kind="class">sc_core::sc_out_resolved</class>
    <class kind="class">sc_core::sc_out_rv</class>
    <class kind="class">sc_core::sc_pdhash</class>
    <class kind="class">sc_core::sc_pdhash_iter</class>
    <class kind="class">sc_core::sc_phash</class>
    <class kind="class">sc_core::sc_phash_base</class>
    <class kind="class">sc_core::sc_phash_base_iter</class>
    <class kind="class">sc_core::sc_phash_iter</class>
    <class kind="class">sc_core::sc_plist</class>
    <class kind="class">sc_core::sc_plist_base</class>
    <class kind="class">sc_core::sc_plist_base_iter</class>
    <class kind="class">sc_core::sc_plist_iter</class>
    <class kind="class">sc_core::sc_port</class>
    <class kind="class">sc_core::sc_port_b</class>
    <class kind="class">sc_core::sc_port_base</class>
    <class kind="class">sc_core::sc_port_registry</class>
    <class kind="class">sc_core::sc_ppq</class>
    <class kind="class">sc_core::sc_ppq_base</class>
    <class kind="class">sc_core::sc_prim_channel</class>
    <class kind="class">sc_core::sc_prim_channel_registry</class>
    <class kind="class">sc_core::sc_process_b</class>
    <class kind="class">sc_core::sc_process_handle</class>
    <class kind="class">sc_core::sc_process_host</class>
    <class kind="class">sc_core::sc_process_monitor</class>
    <class kind="class">sc_core::sc_ptr_flag</class>
    <class kind="class">sc_core::sc_pvector</class>
    <class kind="class">sc_core::sc_report</class>
    <class kind="class">sc_core::sc_report_handler</class>
    <class kind="class">sc_core::sc_reset</class>
    <class kind="class">sc_core::sc_reset_finder</class>
    <class kind="class">sc_core::sc_reset_target</class>
    <class kind="class">sc_core::sc_runnable</class>
    <class kind="class">sc_core::sc_scoped_lock</class>
    <class kind="class">sc_core::sc_semaphore</class>
    <class kind="class">sc_core::sc_semaphore_if</class>
    <class kind="class">sc_core::sc_sensitive</class>
    <class kind="class">sc_core::sc_sensitive_neg</class>
    <class kind="class">sc_core::sc_sensitive_pos</class>
    <class kind="class">sc_core::sc_signal</class>
    <class kind="class">sc_core::sc_signal&lt; bool, POL &gt;</class>
    <class kind="class">sc_core::sc_signal&lt; sc_dt::sc_logic, POL &gt;</class>
    <class kind="class">sc_core::sc_signal_channel</class>
    <class kind="class">sc_core::sc_signal_in_if</class>
    <class kind="class">sc_core::sc_signal_in_if&lt; bool &gt;</class>
    <class kind="class">sc_core::sc_signal_in_if&lt; sc_dt::sc_logic &gt;</class>
    <class kind="class">sc_core::sc_signal_inout_if</class>
    <class kind="class">sc_core::sc_signal_resolved</class>
    <class kind="class">sc_core::sc_signal_rv</class>
    <class kind="class">sc_core::sc_signal_t</class>
    <class kind="class">sc_core::sc_signal_write_if</class>
    <class kind="class">sc_core::sc_simcontext</class>
    <class kind="class">sc_core::sc_spawn_object</class>
    <class kind="class">sc_core::sc_spawn_object_v</class>
    <class kind="class">sc_core::sc_spawn_options</class>
    <class kind="class">sc_core::sc_spawn_reset</class>
    <class kind="class">sc_core::sc_stage_callback_if</class>
    <class kind="class">sc_core::sc_stage_callback_registry</class>
    <class kind="class">sc_core::sc_strhash</class>
    <class kind="class">sc_core::sc_strhash_iter</class>
    <class kind="class">sc_core::sc_string_view</class>
    <class kind="class">sc_core::sc_stub</class>
    <class kind="class">sc_core::sc_stub_registry</class>
    <class kind="class">sc_core::sc_thread_process</class>
    <class kind="class">sc_core::sc_throw_it</class>
    <class kind="class">sc_core::sc_throw_it_helper</class>
    <class kind="class">sc_core::sc_time</class>
    <class kind="struct">sc_core::sc_time_params</class>
    <class kind="class">sc_core::sc_time_tuple</class>
    <class kind="class">sc_core::sc_trace_file</class>
    <class kind="class">sc_core::sc_trace_file_base</class>
    <class kind="struct">sc_core::sc_trace_params</class>
    <class kind="struct">sc_core::sc_unbound_impl</class>
    <class kind="class">sc_core::sc_unwind_exception</class>
    <class kind="class">sc_core::sc_user</class>
    <class kind="class">sc_core::sc_vector</class>
    <class kind="class">sc_core::sc_vector_assembly</class>
    <class kind="class">sc_core::sc_vector_base</class>
    <class kind="class">sc_core::sc_vector_iter</class>
    <class kind="class">sc_core::sc_vpool</class>
    <class kind="struct">sc_core::sc_writer_policy_check</class>
    <class kind="struct">sc_core::sc_writer_policy_check&lt; SC_MANY_WRITERS &gt;</class>
    <class kind="struct">sc_core::sc_writer_policy_check&lt; SC_ONE_WRITER &gt;</class>
    <class kind="struct">sc_core::sc_writer_policy_check&lt; SC_UNCHECKED_WRITERS &gt;</class>
    <class kind="struct">sc_core::sc_writer_policy_check_delta</class>
    <class kind="struct">sc_core::sc_writer_policy_check_port</class>
    <class kind="struct">sc_core::sc_writer_policy_check_write</class>
    <class kind="struct">sc_core::sc_writer_policy_nocheck_port</class>
    <class kind="struct">sc_core::sc_writer_policy_nocheck_write</class>
    <class kind="class">sc_core::sc_zstring_view</class>
    <class kind="struct">sc_core::scoped_flag</class>
    <class kind="class">sc_core::vcd_T_trace</class>
    <class kind="class">sc_core::vcd_trace_file</class>
    <class kind="class">sc_core::wif_T_trace</class>
    <class kind="class">sc_core::wif_trace_file</class>
    <member kind="typedef">
      <type>sc_in&lt; bool &gt;</type>
      <name>sc_in_clk</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af5208f532b3924703b4e2dd0bd2a42c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_inout&lt; bool &gt;</type>
      <name>sc_inout_clk</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a54aa71ddcb9b5c69dc49805ffd16f432</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_out&lt; bool &gt;</type>
      <name>sc_out_clk</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5c45cffaf8b2cf0d5bbb2c0f7def6991</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_port&lt; sc_event_queue_if, 1, SC_ONE_OR_MORE_BOUND &gt;</type>
      <name>sc_event_queue_port</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ace3b678568fd0551232ea189d8bad734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_signal_inout_if&lt; T &gt;</type>
      <name>sc_signal_out_if</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a9226607c1f8696015a3bbfecb8814d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; sc_trace_params * &gt;</type>
      <name>sc_trace_params_vec</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a067812813796ef57cedc7d4639837f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>sc_cor_fn</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a9030af66bee257f67a0f5331b8682e97</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>sc_cor_pkg_qt</type>
      <name>sc_cor_pkg_t</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a57ab3d3104d7157c2c6f43e6ffa53e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_event_expr&lt; sc_event_and_list &gt;</type>
      <name>sc_event_and_expr</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>adf9ec2914d09ed71a42fe16b0ef2bc07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_event_expr&lt; sc_event_or_list &gt;</type>
      <name>sc_event_or_expr</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>adec71d2c2ad4f26ae5492d164fb6c04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_module</type>
      <name>sc_channel</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af303b578693eec7ce3af9499416f6857</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_module</type>
      <name>sc_behavior</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a21a2932d7b876e0312e0616bc16455cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>class sc_cthread_process *</type>
      <name>sc_cthread_handle</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a12cf2d7e3f6fa06b86b6a787eecdeb67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>class sc_method_process *</type>
      <name>sc_method_handle</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a241f0ad0f913c222aa11123bdc0ec330</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>class sc_thread_process *</type>
      <name>sc_thread_handle</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a624b4003393c71616779c6342b40c076</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(sc_process_host::*</type>
      <name>sc_entry_func</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aaeeea07fda14175120013942cd60a4fe</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="typedef">
      <type>sc_plist&lt; sc_process_b * &gt;</type>
      <name>sc_process_list</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae81cf49b79d92ac54244c55cf6f89716</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const sc_curr_proc_info *</type>
      <name>sc_curr_proc_handle</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7c1a29da0f39e50b4a5921b92584de49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>sc_plist_map_fn</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af9c90b2747ac7f87ccb924c19644ed21</anchor>
      <arglist>)(void *data, void *arg)</arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>CFT</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aafa116a3fc5bfb5e04997dc15762b3a1</anchor>
      <arglist>)(const void *, const void *)</arglist>
    </member>
    <member kind="typedef">
      <type>unsigned</type>
      <name>sc_actions</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7ddb1a732ada16a5c04854b19a8e3442</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::exception</type>
      <name>sc_exception</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7f25767d6c84206b61ee6c80477e3b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>sc_report_handler_proc</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>afc68c50ae1d1aef7d12afb6dc9c64bc9</anchor>
      <arglist>)(const sc_report &amp;, const sc_actions &amp;)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_port_policy</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad08dd04b5b8f4cacc78c81516672e9eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ONE_OR_MORE_BOUND</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad08dd04b5b8f4cacc78c81516672e9ebae5eac58d624fbaafa84db6b644cdea0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ZERO_OR_MORE_BOUND</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad08dd04b5b8f4cacc78c81516672e9ebaa88a02b59f165cc6c7526bd7322a68fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ALL_BOUND</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad08dd04b5b8f4cacc78c81516672e9eba50b2c6de5b4b9d719beb54cf213ff205</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_writer_policy</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae291a92ac88dd846d36d6a9cd9835607</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ONE_WRITER</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae291a92ac88dd846d36d6a9cd9835607a3e4e04e6ed61133348c6f4a8d0131d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_MANY_WRITERS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae291a92ac88dd846d36d6a9cd9835607abfdd1eba847a6183ab527d3f51c543f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_UNCHECKED_WRITERS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae291a92ac88dd846d36d6a9cd9835607a9bd426068dd960793db998491616aa6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_curr_proc_kind</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a55cfb0f6c35416b69482b689d24ed045</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NO_PROC_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a55cfb0f6c35416b69482b689d24ed045a3da47e1b40676e185c64e09ca47f2b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_METHOD_PROC_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a55cfb0f6c35416b69482b689d24ed045ac8e76cc55a0ad8061121cd1e78f947c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_THREAD_PROC_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a55cfb0f6c35416b69482b689d24ed045a65c7898e756af3c6eb086fe2a2d14abf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_CTHREAD_PROC_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a55cfb0f6c35416b69482b689d24ed045a8a9b185b1d0a071b20355f9593e86ceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_descendant_inclusion_info</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af299d964d600dfca2e37224a6cb83298</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NO_DESCENDANTS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af299d964d600dfca2e37224a6cb83298aaf9243a80d08aa59c1ee5689a99747af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_INCLUDE_DESCENDANTS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af299d964d600dfca2e37224a6cb83298af29b3ba60742a626758f93eaabb1d895</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_INVALID_DESCENDANTS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af299d964d600dfca2e37224a6cb83298afc70e35380bb92b642ccb41a406d9d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_stop_mode</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aacc91b29b6056fb4b60ed0a8a63d9e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_STOP_FINISH_DELTA</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aacc91b29b6056fb4b60ed0a8a63d9e38a40acc4c550f4e877e25384256ae0be97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_STOP_IMMEDIATE</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aacc91b29b6056fb4b60ed0a8a63d9e38ad6c67dddbb72436a264adc5c77049b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_starvation_policy</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad7d23dcd6fc1d787e00b6159a18efcb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_EXIT_ON_STARVATION</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad7d23dcd6fc1d787e00b6159a18efcb0a5720eaef89e899fdd4dafc6a724bf993</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RUN_TO_TIME</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad7d23dcd6fc1d787e00b6159a18efcb0a1812ba80b3bc5df8a28e6c4f11518aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_stage</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7f614a262c52001e3fa467b0af0c9d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_POST_BEFORE_END_OF_ELABORATION</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7f614a262c52001e3fa467b0af0c9d2da604edfaf5685089d226bc47ebcce808e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_POST_END_OF_ELABORATION</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7f614a262c52001e3fa467b0af0c9d2da03a20681d911bdee454608eccfd3dba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_POST_START_OF_SIMULATION</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7f614a262c52001e3fa467b0af0c9d2da7e432e6ec85ca89f02e542d8eb46d997</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_POST_UPDATE</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7f614a262c52001e3fa467b0af0c9d2dabf98c659839e8e74fbfc5b41e13de640</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_PRE_TIMESTEP</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7f614a262c52001e3fa467b0af0c9d2da2c20e3c17fc8bbd677a98b413c128b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_PRE_PAUSE</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7f614a262c52001e3fa467b0af0c9d2da6ba50127fadadfacc89b886457236866</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_PRE_SUSPEND</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7f614a262c52001e3fa467b0af0c9d2dad758abaff90ef1bb3d68c62f9c9d88ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_POST_SUSPEND</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7f614a262c52001e3fa467b0af0c9d2da85a742b0e7737637cb5ac520782272d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_PRE_STOP</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7f614a262c52001e3fa467b0af0c9d2da22d511cda3aad9c228c908de32778980</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_POST_END_OF_SIMULATION</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7f614a262c52001e3fa467b0af0c9d2da88e81ef265fc545879983935364947b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_status</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ELABORATION</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3ab3bf1ea23134285c41c66dbfd2c1e11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_BEFORE_END_OF_ELABORATION</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3acf77174ce41f4178f3c7cb06f56aa930</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_END_OF_ELABORATION</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3a2f2a69ac781207a71385a11a2296fbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_START_OF_SIMULATION</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3afae4c033c34efff45159278010c1cb28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RUNNING</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3ac842e49e579b5219ef5e665a9b5ce0d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_PAUSED</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3ada46de21f2252ddd4c666a8d8a4b509b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_SUSPENDED</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3abc1da9ebd10e80ff92be964e6e8b4b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_STOPPED</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3ac64b65b3429b2399634aed07c855a45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_END_OF_SIMULATION</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a4a011831fb5bb25a3cfd217e8c2227f3a4e8683788dcc245aada3e65011b2991f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_time_unit</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_SEC</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4a7ad0c5cbf9ee837e939f01be229cab1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_MS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4a01245e9a28c1e547decd676b85523d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_US</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4aab388fe69d39f9f2f6a68f83077eac06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4afa9bd86f75f123e8c021a200fd6eb491</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_PS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4a28dbfded11d1736805d78b0d0601d636</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_FS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4a82936f1ffacbf4a6d0619b2287692909</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_AS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4ae457805db94992bd6a07ff3beea1951d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ZS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4af94a2c9333adbbbc0c36724d2327b569</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_YS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abecb00ba031fb67c85124f66eb70aed4a7d91384cf963e20a1d94f5f4a9f2188e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_severity</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_INFO</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0ead2bd3c618cb02608fcdbdf26e0a63675</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_WARNING</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0ead51483b845b42e87825f2c71f12c67d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ERROR</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0ea5ba5d6acf68a05a0122ca2da147d2b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_FATAL</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0eacf1a7aa6c4aa03be39ee308908ff616e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_MAX_SEVERITY</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa3a80a7746d587512323f2edc83e5b0ea1ea1bacdd4addc7ec80fc2caf747ad6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_verbosity</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NONE</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378a34c3f85e038acaba65da0eed4126cd36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_LOW</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378a46dcccc49ff8b0f4faf102a307456253</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_MEDIUM</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378a1a3fe57ec4b6e8032d7288ee33be8ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_HIGH</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378a3b051130461aff5cb676bc4021f3d859</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_FULL</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378ad1ec5d4169b769a4f3aa426cb9881206</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DEBUG</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a57f85f8696482890628428855959b378ac3d8a770ce994c79971af0e3498e5457</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_UNSPECIFIED</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7d039754de1d1d1cb3da8630161cd6b6a0a482c78cbe2d8c84d0b34021d156f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DO_NOTHING</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7d039754de1d1d1cb3da8630161cd6b6a43247b6fdd82197acb4fe74f0edd96d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_THROW</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7d039754de1d1d1cb3da8630161cd6b6a3ff96e0395a08f00834b49a2e5532658</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_LOG</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7d039754de1d1d1cb3da8630161cd6b6a105c183473970696920dd006207f7973</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DISPLAY</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7d039754de1d1d1cb3da8630161cd6b6af28c4eba216be43a0772a075e24e7878</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_CACHE_REPORT</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7d039754de1d1d1cb3da8630161cd6b6a7b2ca6fedcfd0c3506ec549d224b83c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_INTERRUPT</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7d039754de1d1d1cb3da8630161cd6b6ab3eb6c04af237fe0d7b4bf9b2e009164</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_STOP</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7d039754de1d1d1cb3da8630161cd6b6a3d8a6502175008e463fa4232e5f4cfc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ABORT</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7d039754de1d1d1cb3da8630161cd6b6a200a23eb4070364a2de403438930226a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DEFAULT_INFO_ACTIONS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7d039754de1d1d1cb3da8630161cd6b6acc9c19fe42ba9d0a4c4dc6ab87f41e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DEFAULT_WARNING_ACTIONS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7d039754de1d1d1cb3da8630161cd6b6ad7f36af06d3d7f43670444ea2c4f4e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DEFAULT_ERROR_ACTIONS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7d039754de1d1d1cb3da8630161cd6b6ac3c8e7a736e23c36954a359bf857f299</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DEFAULT_FATAL_ACTIONS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7d039754de1d1d1cb3da8630161cd6b6ae2fdff9b47d55e16bbf7b095c3a752a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DEFAULT_CATCH_ACTIONS</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7d039754de1d1d1cb3da8630161cd6b6a13bc143b3340948d3f63dc5c3426aef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_vector_init_policy</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a54205cb662899ae2de0b98a802488dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_VECTOR_LOCK_AFTER_INIT</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a54205cb662899ae2de0b98a802488dffaa38e200340b8c5f3bbd4bb0bb73ac93a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_VECTOR_LOCK_AFTER_ELABORATION</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a54205cb662899ae2de0b98a802488dffa32ec39939fe37353f9db5e43c60df642</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a34d93a50921eda641d10eda314b888da</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fifo&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_warn_port_constructor</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a40ce7cec2459ab0652a46abd8f9816cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad572f527451f97258af62e68361f7557</anchor>
      <arglist>(::std::ostream &amp;os, const sc_signal_channel &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_deprecated_add_trace</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad33256240dd3972656d92cd963833397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a541c7265e542a37ceeb204ee7867612e</anchor>
      <arglist>(::std::ostream &amp;os, const sc_in&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ac431a28dca0a1872cced88a664089e1e</anchor>
      <arglist>(::std::ostream &amp;os, const sc_inout&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a63e743f63156d59271decb26ae3d4475</anchor>
      <arglist>(sc_trace_file *tf, const sc_in&lt; T &gt; &amp;port, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae6d69fa45bef996464ff890f5ce29b78</anchor>
      <arglist>(sc_trace_file *tf, const sc_inout&lt; T &gt; &amp;port, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_signal_invalid_writer</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a1cebf5bb256f54f2b51fea03caf31f48</anchor>
      <arglist>(sc_object *target, sc_object *first_writer, sc_object *second_writer, bool check_delta)</arglist>
    </member>
    <member kind="function">
      <type>void SC_API</type>
      <name>halt</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a46658ae382c412fd771e298c99b29dba</anchor>
      <arglist>(sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sc_bind</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a49c7b0f18ecac2381f27bbf5849010a0</anchor>
      <arglist>(F &amp;&amp;f, Args &amp;&amp;... args) -&gt; decltype(std::bind(std::forward&lt; F &gt;(f), std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sc_bind</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a701503e950a034e3af6cee1c465422fd</anchor>
      <arglist>(F &amp;&amp;f, Args &amp;&amp;... args) -&gt; decltype(std::bind&lt; R &gt;(std::forward&lt; F &gt;(f), std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sc_ref</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a93aef8e2a3219a1141b237aa0d003053</anchor>
      <arglist>(T &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sc_cref</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af1a0cf428fe8fcb4bf9047987a9aaaeb</anchor>
      <arglist>(T &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SC_API int</type>
      <name>sc_notify_time_compare</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a6b0f0a799ebae617816a2921605c4dcb</anchor>
      <arglist>(const void *, const void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a762b620af35370b37c72768033149954</anchor>
      <arglist>(sc_event &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a6a0b7eb2185b932dd25cb7501e09a53a</anchor>
      <arglist>(const sc_time &amp;t, sc_event &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a91906d71afc4d3c5db0eff773a441beb</anchor>
      <arglist>(double v, sc_time_unit tu, sc_event &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_or_expr</type>
      <name>operator|</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a0a701f4df07d5830536f30d8448a37ac</anchor>
      <arglist>(sc_event_or_expr expr, sc_event const &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_or_expr</type>
      <name>operator|</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abb30e458bee873a3c34a8ad76626c2a8</anchor>
      <arglist>(sc_event_or_expr expr, sc_event_or_list const &amp;el)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_and_expr</type>
      <name>operator&amp;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aed6296df0f8a51abb71d7c8535fe4df9</anchor>
      <arglist>(sc_event_and_expr expr, sc_event const &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>sc_event_and_expr</type>
      <name>operator&amp;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a2c1dd54540f6d5978f1c93f30dced6b1</anchor>
      <arglist>(sc_event_and_expr expr, sc_event_and_list const &amp;el)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_thread_cor_fn</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aabd066bb337994094ef03529230382f5</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_report *</type>
      <name>sc_handle_exception</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a4597c803a6e82e523d1519e7f1677041</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sc_elab_and_sim</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>afb25c96e28f6b8d89eb65ffd8f78420c</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sc_argc</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a1c4aefc79b57cb5228247dce6920b929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *const *</type>
      <name>sc_argv</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ace1356d66de7d51fbf08bab6161aa45a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>sc_initializer_function_name_fwd</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a943c3f9b85bffd9dee0cd815b90aa441</anchor>
      <arglist>(const char *name, F &amp;&amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_method_cor_fn</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa27d4cc22d2deb63c6c43560dfd1b09d</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_cmethod_cor_fn</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a3eb1b48e1c3d642e474067e0a4f30ed6</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_set_stack_size</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a257dffa69682b5723df9db69db5e25a0</anchor>
      <arglist>(sc_method_handle, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a12b62fbcf208f0540fc3fad4674a92df</anchor>
      <arglist>(sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a32923bb60208111fe97f4abb2f471d05</anchor>
      <arglist>(const sc_event &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa4a3c79d21b7f1c02a3276232522c6c0</anchor>
      <arglist>(const sc_event_or_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a3ff852bb8444301db92963eba0613be8</anchor>
      <arglist>(const sc_event_and_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad029c8355341804c32b3ab13155d22df</anchor>
      <arglist>(const sc_time &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a892b614325ec6913d425fb8fa91430fe</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a111951156b23ef0ee0c95800f3c2b15a</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a3b1c251700d397823a5d9fead31ef925</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_module *</type>
      <name>sc_module_dynalloc</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5c8b7ddef07e889262a21e4aaee50da9</anchor>
      <arglist>(sc_module *)</arglist>
    </member>
    <member kind="function">
      <type>SC_API const char *</type>
      <name>sc_gen_unique_name</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab63256db611adecce88f295876fb2843</anchor>
      <arglist>(const char *basename_, bool preserve_first=false)</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>sc_get_parent</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a2f0b7d94bd9a9f8fffd10434f7b0e8e3</anchor>
      <arglist>(const sc_object *obj_p)</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_process_handle</type>
      <name>sc_get_current_process_handle</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a9ecafc84e894dcf005776dc4e4ba6cdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API bool</type>
      <name>timed_out</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ac80f941a6124111727d86fc41958381e</anchor>
      <arglist>(sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_set_stack_size</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a49dad20c8837f86467abfb46b5d99f0b</anchor>
      <arglist>(sc_thread_handle thread_h, std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a427c55e6f664fa62ad98d4bf31c190ec</anchor>
      <arglist>(const sc_process_handle &amp;left, const sc_process_handle &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a2fae36ee9e3dedac84dcedba1b46fb6a</anchor>
      <arglist>(const sc_process_handle &amp;left, const sc_process_handle &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aac3300068b2dca5cacbd758056bd2248</anchor>
      <arglist>(const sc_process_handle &amp;left, const sc_process_handle &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>sc_get_last_created_process_handle</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a39bcb1ae848a339870b1836c57cbcad3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a52f434f1d8903ae9d5e109576dbb1dc6</anchor>
      <arglist>(std::ostream &amp;os, const sc_reset_target &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>sc_simcontext *</type>
      <name>sc_get_curr_simcontext</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a84d407a02a02ab5bc1ce70aacfca86c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_set_stop_mode</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a899817c2c0ce10ae76042ed8bea5039b</anchor>
      <arglist>(sc_stop_mode mode)</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_stop_mode</type>
      <name>sc_get_stop_mode</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a4ec2b434d452a46ff4bc273b28200128</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_start</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a41f3856be9ea1348458cbda87cff8230</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_start</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab87760a17a6ab7cc07c3a87ccc997d78</anchor>
      <arglist>(const sc_time &amp;duration, sc_starvation_policy p=SC_RUN_TO_TIME)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_start</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae92d723099406df12a7b68146e94bf3f</anchor>
      <arglist>(int duration, sc_time_unit unit, sc_starvation_policy p=SC_RUN_TO_TIME)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_start</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ade235733e6612dc6b2f6ebb7fc9a4b7b</anchor>
      <arglist>(double duration, sc_time_unit unit, sc_starvation_policy p=SC_RUN_TO_TIME)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_stop</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a56b6c2c479ae28c8ebf51a038659e820</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_dt::uint64</type>
      <name>sc_delta_count</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a10a9d634e05cdf1b4bce4da664791c93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_dt::uint64</type>
      <name>sc_delta_count_at_current_time</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aba7ff4d1f343e5bc49eaeb5f9001c30f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API const std::vector&lt; sc_event * &gt; &amp;</type>
      <name>sc_get_top_level_events</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a429a1982ae2e7e9cfbbfb478e3d00028</anchor>
      <arglist>(const sc_simcontext *simc_p=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API const std::vector&lt; sc_object * &gt; &amp;</type>
      <name>sc_get_top_level_objects</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aaadc2855a55b1d4748cd8a12624c7e1f</anchor>
      <arglist>(const sc_simcontext *simc_p=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API bool</type>
      <name>sc_is_running</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a11bf15085cc73ad025a22ae456cb5ab1</anchor>
      <arglist>(const sc_simcontext *simc_p=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_pause</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad0798c182606189eac02afc1ad10a133</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API bool</type>
      <name>sc_end_of_simulation_invoked</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a3967acdfb038df2b85c0691fcfe90000</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API bool</type>
      <name>sc_start_of_simulation_invoked</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a01adc2d0e5e2256882dae9cbf8c34454</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_set_time_resolution</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5f45fb0c8a6daabe5ee6d6207ad6f1f4</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_time</type>
      <name>sc_get_time_resolution</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae61562017fb35daf37e783939fe103ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_set_default_time_unit</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>acab1ec25bc7d15e590b7fe6012b54dea</anchor>
      <arglist>(double, sc_time_unit)</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_time</type>
      <name>sc_get_default_time_unit</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7ca9c77d3f6f70d241950b505de69374</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API bool</type>
      <name>sc_pending_activity_at_current_time</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5f620e6fb0052bda16f5bd21d813686c</anchor>
      <arglist>(const sc_simcontext *simc_p=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API bool</type>
      <name>sc_pending_activity_at_future_time</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab268c8bb0cb7e3634333dbf10395a36b</anchor>
      <arglist>(const sc_simcontext *simc_p=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_time</type>
      <name>sc_time_to_pending_activity</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>adea83ee5081417fbaac4f34248cefe18</anchor>
      <arglist>(const sc_simcontext *simc_p=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_register_stage_callback</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>acab0e1ddd72963b0756141018ff776c4</anchor>
      <arglist>(sc_stage_callback_if &amp;cb, unsigned int mask)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_unregister_stage_callback</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aec3b8ecf20783fb1ef97c63242705244</anchor>
      <arglist>(sc_stage_callback_if &amp;cb, unsigned int mask)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_suspend_all</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aee03b39ecaa2b0699f8f308a912c17f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_unsuspend_all</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5317dd0e8c5f43bce0618a881792e0ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_unsuspendable</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a8acf488386841a249969be1dd830ec94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_suspendable</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad722bccae4266d6dc3cb165e57b9a792</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_status</type>
      <name>sc_get_status</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a2676f7bf4be873cb57ef2605d7b634a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_object *</type>
      <name>sc_get_current_object</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>adc2335b36966a80724af03d303343f75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_process_b *</type>
      <name>sc_get_current_process_b</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad3aa291207c28551259ce33cdd47db6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_process_b *</type>
      <name>sc_get_curr_process_handle</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a47225e56c5942df787358a377645d4f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_curr_proc_kind</type>
      <name>sc_get_curr_process_kind</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a8299a644726c996dc11fed98ed262e0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sc_get_simulator_status</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a036350c291eda58610eda6538430b331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_set_random_seed</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aee7a6280925294be1871a27b25df73c2</anchor>
      <arglist>(unsigned int seed_)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_initialize</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a6737ccd9ad127f1090e56353354b4274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API const sc_time &amp;</type>
      <name>sc_max_time</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a0dd982ac06a25065756c29cb7311a778</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API const sc_time &amp;</type>
      <name>sc_time_stamp</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a60634a7c4c8c70a106e518d4a03d4a86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API double</type>
      <name>sc_simulation_time</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7169a604e8a3827f997411e6e27d44cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_event *</type>
      <name>sc_find_event</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa1cff3e8fae0f3ab98880359fe334dc9</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_object *</type>
      <name>sc_find_object</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae4374440395c4684dc794ac1a8958311</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SC_API bool</type>
      <name>sc_is_unwinding</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5985929533e0a4421b83a4358fee94e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_pending_activity</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ac6db6f271e38b140921cda6313724ee1</anchor>
      <arglist>(const sc_simcontext *simc_p=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>sc_get_current_process_name</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a6819ecec5c7ad19175bf196a9d8da6d4</anchor>
      <arglist>(const char *if_empty=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_hierarchical_name_exists</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab033fdacc5758a6fdbf78e4df1d7667b</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_hierarchical_name_exists</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af500ff774fce51c1e488ab74185bcebf</anchor>
      <arglist>(const sc_object *parent, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>sc_get_hierarchical_name</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a38db368fc413741d5dbaefba4e944477</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>sc_get_hierarchical_name</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a55e4a6bcaaba88a0d49306c09a56dd71</anchor>
      <arglist>(const sc_object *parent, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_register_hierarchical_name</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad3b90895b20dbf612828a4bb9dff4cbd</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_register_hierarchical_name</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a05eb932ed70a0d94b3d2a0ba3f5ab404</anchor>
      <arglist>(const sc_object *parent, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_unregister_hierarchical_name</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a238e0ab5835d47b9304a88193d55ae3d</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_unregister_hierarchical_name</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad78213a532ccfaaf45eb9debd0f8cc3f</anchor>
      <arglist>(const sc_object *parent, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_defunct_process_function</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a9a832d187e9202eb961b71c5d93f61f8</anchor>
      <arglist>(sc_module *)</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>sc_spawn</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a897620ad689a9ccd23de333ac25e0a72</anchor>
      <arglist>(T object, const char *name_p=0, const sc_spawn_options *opt_p=0)</arglist>
    </member>
    <member kind="function">
      <type>sc_process_handle</type>
      <name>sc_spawn</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a8cfea229a76bbfb914720e2dd819e440</anchor>
      <arglist>(R *r_p, T object, const char *name_p=0, const sc_spawn_options *opt_p=0)</arglist>
    </member>
    <member kind="function">
      <type>SC_API std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af9fff35f3493334464ef3d83f4942b2a</anchor>
      <arglist>(std::ostream &amp;os, sc_stage s)</arglist>
    </member>
    <member kind="function">
      <type>SC_API std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a9363f7d1a12c7c5f1c1857eb8111ff61</anchor>
      <arglist>(std::ostream &amp;, sc_status)</arglist>
    </member>
    <member kind="function">
      <type>sc_cor *</type>
      <name>get_cor_pointer</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a740d0cdd700fe0c837cfd607d762fc17</anchor>
      <arglist>(sc_process_b *process_p)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>wait</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab172261a5aa52e02f8f0f93528d84488</anchor>
      <arglist>(int, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>wait</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a284c0462468eb75d94a4bd82fb6d545b</anchor>
      <arglist>(sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>wait</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abb498cbef8fe108c779160feb8aafb85</anchor>
      <arglist>(const sc_event &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>wait</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7a6eb8bb7df0cfafb1e6bed1c5c80457</anchor>
      <arglist>(const sc_event_or_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>wait</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a08cac76e4cad9b2ea4926d6acb720e05</anchor>
      <arglist>(const sc_event_and_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>wait</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aeaf57388936e3d1f9b1d878fcdcf9168</anchor>
      <arglist>(const sc_time &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>wait</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad94dab0762de5b6bad77fe75884beea0</anchor>
      <arglist>(const sc_time &amp;, const sc_event &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>wait</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aab91bdd16a624838ae9d55cb57597a8c</anchor>
      <arglist>(const sc_time &amp;, const sc_event_or_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>wait</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa42d3f59fb500895ee455fa9c03b65b0</anchor>
      <arglist>(const sc_time &amp;, const sc_event_and_list &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator+</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a6173efed554223fd31bb219e26af1fd8</anchor>
      <arglist>(const sc_time &amp;t1, const sc_time &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator-</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a76104772ef1daee0b70e95ac242fd822</anchor>
      <arglist>(const sc_time &amp;t1, const sc_time &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator*</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abb9c8656a80e5ce2c1f47fb6c25c690a</anchor>
      <arglist>(const sc_time &amp;t, double d)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator*</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab2eb9eab26f84214d40455b9baa51f92</anchor>
      <arglist>(double d, const sc_time &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator/</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a05d9c8e81ed8c624810ea43c8076e202</anchor>
      <arglist>(const sc_time &amp;t, double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator/</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a4acc593f33a36e5a4c0452d5a086247a</anchor>
      <arglist>(const sc_time &amp;t1, const sc_time &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a228f8b9dd22460b63a570d67b00ad4b2</anchor>
      <arglist>(::std::ostream &amp;, const sc_time &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_time</type>
      <name>operator%</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a46f6240650d61529db6c80c69bd5c4d1</anchor>
      <arglist>(const sc_time &amp;t1, const sc_time &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>SC_API const char *</type>
      <name>sc_copyright</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af1b495e39396d661407ff07a437720d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API const char *</type>
      <name>sc_release</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a07694e14fffcf8df28f3545954864740</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API const char *</type>
      <name>sc_version</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5e7a1073230709f65c47f76498c11f95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SC_API_VERSION_STRING</type>
      <name>api_version_check</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad8441246d20cde49da0473a60ffda952</anchor>
      <arglist>(SC_DEFAULT_WRITER_POLICY, SC_HAS_COVARIANT_VIRTUAL_BASE_)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>wait</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7867930073ee64f0885ca1043437c9fb</anchor>
      <arglist>(double v, sc_time_unit tu, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>wait</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abd20265b5577e88139f8a29bff95ca9d</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event &amp;e, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>wait</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>afcc22747265ad0765bc22ab69ea6467b</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_or_list &amp;el, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>wait</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7815dd09b7c3f1edf0492574e3a68633</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_and_list &amp;el, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af14a0dc371d08c64fc82727e99c92d75</anchor>
      <arglist>(double v, sc_time_unit tu, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad1ab1fdf7a9df44c5cea1e5ce51568c3</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event &amp;e, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>next_trigger</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a56a36177f1fa30efa9573f028430c201</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_or_list &amp;el, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_trigger</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a2c716b39c2938d18f794381d90e4e321</anchor>
      <arglist>(double v, sc_time_unit tu, const sc_event_and_list &amp;el, sc_simcontext *simc=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_set_location</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a436852e08b3a3659a6f0d8005850d3b5</anchor>
      <arglist>(const char *, int, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>at_posedge</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a8eb2eab2fbd53ff7629dda17ad21d6a3</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>at_posedge</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a420a157c85c53e70074276159eb2ad8c</anchor>
      <arglist>(const sc_signal_in_if&lt; sc_dt::sc_logic &gt; &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>at_negedge</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aea926b0a2179ad40a69f40554adfd9c3</anchor>
      <arglist>(const sc_signal_in_if&lt; bool &gt; &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>at_negedge</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a2120409e9ee4dfa88052f3fda02540af</anchor>
      <arglist>(const sc_signal_in_if&lt; sc_dt::sc_logic &gt; &amp;, sc_simcontext *=sc_get_curr_simcontext())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a6513c96214f62eb568bff8ace2433ab2</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; T &gt; &amp;object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_trace</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a17607e52b3489cd247bd9920b829f0d4</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; T &gt; &amp;object, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_trace</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a272a62d02cb8f3e796d4ffa8dc422f4b</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; char &gt; &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_trace</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a0a08db0bf2e1a3ed7814f9b978383939</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; short &gt; &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_trace</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a747c985476b2ccb2ef9e1db38821edd5</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; int &gt; &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_trace</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af8917c6e22954e81c90705067e9ca59d</anchor>
      <arglist>(sc_trace_file *tf, const sc_signal_in_if&lt; long &gt; &amp;object, const std::string &amp;name, int width)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_trace</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a79a5665df84e676083dc144649632677</anchor>
      <arglist>(sc_trace_file *tf, const unsigned int &amp;object, const std::string &amp;name, const char **enum_literals)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_trace</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a72c0408f991b61df00c3c37562c4a0ad</anchor>
      <arglist>(sc_trace_file *tf, const void *object, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_trace_delta_cycles</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad1a9d40b34676bbfa953ec419ab01f0f</anchor>
      <arglist>(sc_trace_file *tf, bool on=true)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_write_comment</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a3a009ca4ad0b8bf2d665e184957cc276</anchor>
      <arglist>(sc_trace_file *tf, const std::string &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>tprintf</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a891443a040c17c1317bfedea8f2dd072</anchor>
      <arglist>(sc_trace_file *tf, const char *format,...)</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_trace_file *</type>
      <name>sc_create_vcd_trace_file</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5f53a4d2cf26bf071f02ee1b3ac5c427</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_close_vcd_trace_file</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a27eb611e0def14799f617af455b33a11</anchor>
      <arglist>(sc_trace_file *tf)</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_trace_file *</type>
      <name>sc_create_wif_trace_file</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab95ed25b7cbc11fd0b711c16a093f8e6</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_close_wif_trace_file</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab24f1bea0df03ff049cf6fdbc02ffbbf</anchor>
      <arglist>(sc_trace_file *tf)</arglist>
    </member>
    <member kind="function">
      <type>SC_API std::string</type>
      <name>localtime_string</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a58773dbb41cf17f690c7086e5594e3f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API unsigned</type>
      <name>default_int_hash_fn</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a49682f4c2d32947f265282ca789eb796</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="function">
      <type>SC_API unsigned</type>
      <name>default_ptr_hash_fn</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5b4f1ed5e0136f8b3d3e66544370784a</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="function">
      <type>SC_API unsigned</type>
      <name>default_str_hash_fn</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a69b2a72ef0a2e74c49fac75352029ad9</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="function">
      <type>SC_API int</type>
      <name>sc_strhash_cmp</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ac2fc140bc67d79c4dd9b0d3321a9dfea</anchor>
      <arglist>(const void *, const void *)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_strhash_kfree</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ac80ce2d184d7ece1f14232172ceb8856</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void *</type>
      <name>sc_strhash_kdup</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a66dfd503856fc58c7dd9b424dc0dc939</anchor>
      <arglist>(const void *)</arglist>
    </member>
    <member kind="function">
      <type>SC_API const std::string</type>
      <name>sc_report_compose_message</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a33ce8dcf4156a109d4990f27a7d58463</anchor>
      <arglist>(const sc_report &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_abort</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a45b22ede2f4693c1f2f7955275f9dc3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_assertion_failed</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>add04f490ead0b09374c0440f9698ab4b</anchor>
      <arglist>(const char *msg, const char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>SC_API bool</type>
      <name>sc_report_close_default_log</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a9cd2fea4c1ed619ce4a4902366d283d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_interrupt_here</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad0e39cf1351f50b1a3ab31bfee6b7bae</anchor>
      <arglist>(const char *id, sc_severity severity)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_stop_here</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ac5dcd0844969c2442f6fd36a258f52dc</anchor>
      <arglist>(const char *id, sc_severity severity)</arglist>
    </member>
    <member kind="function">
      <type>Container::iterator</type>
      <name>sc_vector_do_bind</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a1c4ee3c22957c64e76ce3349ee28d300</anchor>
      <arglist>(Container &amp;cont, ArgumentIterator first, ArgumentIterator last, typename Container::iterator from)</arglist>
    </member>
    <member kind="function">
      <type>Container::iterator</type>
      <name>sc_vector_do_operator_paren</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5ed596c989c1ed678c36ebdb978f8c5d</anchor>
      <arglist>(Container &amp;cont, ArgumentIterator first, ArgumentIterator last, typename Container::iterator from)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab59f8da9c45fc00e956b90ded41a78cd</anchor>
      <arglist>(const sc_vector_iter&lt; T1, Pol1 &gt; &amp;a, const sc_vector_iter&lt; T2, Pol2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator!=</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a13dad4c2ca6dcaabbfb3efe6bf35cf63</anchor>
      <arglist>(const sc_vector_iter&lt; T1, Pol1 &gt; &amp;a, const sc_vector_iter&lt; T2, Pol2 &gt; &amp;b) -&gt; decltype(!(a==b))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a98c417b861f801a996a4a99a131aad2a</anchor>
      <arglist>(const sc_vector_iter&lt; T1, Pol1 &gt; &amp;a, const sc_vector_iter&lt; T2, Pol2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&gt;=</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abf47d2f9936640b8868ff8e62a8e3601</anchor>
      <arglist>(const sc_vector_iter&lt; T1, Pol1 &gt; &amp;a, const sc_vector_iter&lt; T2, Pol2 &gt; &amp;b) -&gt; decltype(!(a&lt; b))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&gt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a0ce014d3c0a90f428ac47a5068b52ea7</anchor>
      <arglist>(const sc_vector_iter&lt; T1, Pol1 &gt; &amp;a, const sc_vector_iter&lt; T2, Pol2 &gt; &amp;b) -&gt; decltype((b&lt; a))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;=</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a327ae62b78e7380665851e08bc105b9b</anchor>
      <arglist>(const sc_vector_iter&lt; T1, Pol1 &gt; &amp;a, const sc_vector_iter&lt; T2, Pol2 &gt; &amp;b) -&gt; decltype(!(b&lt; a))</arglist>
    </member>
    <member kind="function">
      <type>sc_vector_assembly&lt; T, MT &gt;</type>
      <name>sc_assemble_vector</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aed056740f5f498576ed0848462da9d1e</anchor>
      <arglist>(sc_vector&lt; T &gt; &amp;vec, MT(T::*ptr))</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_REGISTER_ID_FAILED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab0215018be48216575f53b6593833144</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_PORT_OUTSIDE_MODULE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af54c0c1e2b74c5468b193650aa897ae5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_CLOCK_PERIOD_ZERO_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abe94dd5eda5d61da3d4ca43963802cb8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_CLOCK_HIGH_TIME_ZERO_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a8af3631238e9578542f1e03a268b5371</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_CLOCK_LOW_TIME_ZERO_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a2df8fc5b795aea27300cea38c8ef5f73</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_MORE_THAN_ONE_FIFO_READER_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a6a7425532df7bb690cd145894f8daa49</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_MORE_THAN_ONE_FIFO_WRITER_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad454df747b1ad78d06ff931f2e6df07d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INVALID_FIFO_SIZE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a9339e8de13187e7308b0e9e67cfffa8f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_BIND_IF_TO_PORT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a9afb6943a700256741a7c38117db0329</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_BIND_PORT_TO_PORT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa3060a9451863d85d99f8f026dd0fe79</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_COMPLETE_BINDING_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a9cdbbecc744d2705d991a7f3eb0bf12d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INSERT_PORT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7906fddc23203a2ec4f152bdae143f7c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_REMOVE_PORT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a2ecd32a2911c477e2de4d988a6def56b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_GET_IF_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af057dd38e7df08daec0a2edc0f2706f0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INSERT_PRIM_CHANNEL_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aba2672c1fccc8364c93ca2cec1e48056</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_REMOVE_PRIM_CHANNEL_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a97b6db60c24dd33bae01d5ae0192f56f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_MORE_THAN_ONE_SIGNAL_DRIVER_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a65727dc8f4388f272f230f487a7ce997</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_NO_DEFAULT_EVENT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ada0f5c4d3640ad13f8e7357f5ee3ad49</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_RESOLVED_PORT_NOT_BOUND_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ac3406e727c79f29c0b294ed88488ae7b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_FIND_EVENT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a3d473d5392c7d8a0ea51e380cb6ec432</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INVALID_SEMAPHORE_VALUE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a90a26417f501edf0b74931cc736ad271</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_SC_EXPORT_HAS_NO_INTERFACE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5b9149cad12f19352c450ea100dd9dbd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INSERT_EXPORT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>acc9ae3c218b6a16ae824335f65993505</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_EXPORT_OUTSIDE_MODULE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7758fc02fbb832a849ddedfca0da88f7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_SC_EXPORT_NOT_REGISTERED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a50c7252b082dfca9d0c32e36e0bb7623</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_SC_EXPORT_NOT_BOUND_AFTER_CONSTRUCTION_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7ea4fd1ae8071ebcfcf8177cf6d55a32</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_ATTEMPT_TO_WRITE_TO_CLOCK_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a90ef4a54c08c8c4d1c406a23a6e13407</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_SC_EXPORT_ALREADY_BOUND_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a0124e654ffeb3282b1b4cf1b9ac6309f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_OPERATION_ON_NON_SPECIALIZED_SIGNAL_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>adfe30866d251d977a965dd217b4987f7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_ATTEMPT_TO_BIND_CLOCK_TO_OUTPUT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a0943ea88b7d6597438b4ee22471f5985</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INSERT_STUB_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5c3947a7fd83a7829daf71a8f2f74d01</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>template class SC_API</type>
      <name>sc_ppq&lt; sc_time * &gt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>adcd3cb4164cc3229182a38bb4c0c6dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>template class SC_API</type>
      <name>sc_port&lt; sc_event_queue_if, 1, SC_ONE_OR_MORE_BOUND &gt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a2294c8712503c192f500175fb79c6bf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class SC_API</type>
      <name>sc_event</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a3340deedb93937b2bd9e26fa19e0dab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class SC_API</type>
      <name>sc_port_base</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a2c6b798f57175c4157f132331c5d407f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class SC_API</type>
      <name>sc_reset</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a2f799bb3cc6a5586c5a89cb998c4e30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>template class SC_API</type>
      <name>sc_signal_t&lt; bool, SC_ONE_WRITER &gt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a702e3a6bff0b647d3e5ffbe06533d133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>template class SC_API</type>
      <name>sc_signal_t&lt; bool, SC_MANY_WRITERS &gt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5021ecfe52a0401265e4d84b9a4f83ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>template class SC_API</type>
      <name>sc_signal_t&lt; bool, SC_UNCHECKED_WRITERS &gt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ac41db465c1fd25290cf57c845157792c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>template class SC_API</type>
      <name>sc_port&lt; sc_signal_in_if&lt; bool &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7c39000c84031ff684b3c64fca3c80ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>template class SC_API</type>
      <name>sc_port&lt; sc_signal_inout_if&lt; bool &gt;, 1, SC_ONE_OR_MORE_BOUND &gt;</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a04a5a7c754c8e9a91de1c4bb78efe17f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const sc_dt::sc_logic_value_t</type>
      <name>sc_logic_resolution_tbl</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a739aaeec3538db2d544aaf62d19e7c6a</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static sc_unbound_impl const</type>
      <name>sc_unbound</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ac154a17d04b0e95129d0274db5f04f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_LENGTH_MISMATCH_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a55be9d1be33daaaeed171c39e12e80c9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INCOMPATIBLE_TYPES_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7e40bbc4c116b0ead9942a7abd8359ab</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_CANNOT_CONVERT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab1a42423ffc01c4eeba69da0387fbaf6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INCOMPATIBLE_VECTORS_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a72ea6fb02d16e28db61324b51b03dabb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_VALUE_NOT_VALID_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a50dfc134e664be4639f924367b62a3d4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_ZERO_LENGTH_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a56a6f0b01d693a6248797d72d573bad6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_VECTOR_CONTAINS_LOGIC_VALUE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a0de4326125ef8a2f5c9c81b63c702757</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_SC_BV_CANNOT_CONTAIN_X_AND_Z_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a075ae838619b96d40c4e902681f96f4d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_VECTOR_TOO_LONG_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a2a995cb2045ce5a817025c2bd6378bee</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_VECTOR_TOO_SHORT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa10c5f6e6257d3d771d0b2dd338607de</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_WRONG_VALUE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a47a87634496ac7aa2235f599281f8149</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_LOGIC_Z_TO_BOOL_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad4930d08cb38c261e112b7023b41e8ab</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_LOGIC_X_TO_BOOL_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a2463c1e3d069d3006a84deb559580769</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INVALID_WL_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>acb45de5357ab533e69ade37d9a9d6e1b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INVALID_N_BITS_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a077d2aa6d6e9951f6d00fbe836cb70e4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INVALID_DIV_WL_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a44dd9336638d6fe458bf3e1efff8ba6f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INVALID_CTE_WL_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abf49ebbfd442ecb3637188cdbd028369</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INVALID_MAX_WL_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a2c80dc0015e4648b03f6da3d978a8b91</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INVALID_FX_VALUE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a455fdd0ee0bd68ee802ec887fd445219</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INVALID_O_MODE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad4381e0e8286b148671191bdd7ddc7d1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_OUT_OF_RANGE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa24acac3ee7e455cee30c243889259cd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_CONTEXT_BEGIN_FAILED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a310ca207f67f97c6c53e912c7e7af5e9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_CONTEXT_END_FAILED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af9b2363f401b09150d989d3b5861f3a1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_WRAP_SM_NOT_DEFINED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae6410abff131b19e1fb285b568098aca</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INIT_FAILED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae7eeba1b152b795f54d18e249f2995d6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_ASSIGNMENT_FAILED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a0460a9b278c2e068b07c1ed8f96b07bc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_OPERATION_FAILED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a071567124a826d02845aab33055870e8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_CONVERSION_FAILED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a78181b84779a9815dd1fd34d5aeaea00</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_STACK_SIZE</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a175996e4e020a8e63bde319c66da2d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_NO_BOOL_RETURNED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aff1977ad6e573cc22b5a7145e67b1ecf</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_NO_INT_RETURNED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>acdba068f66f8898577d542daf180147d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_NO_SC_LOGIC_RETURNED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a646e2dc8b856ba94ac677ad01765c608</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_OPERAND_NOT_SC_LOGIC_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a0346a2d2a8c59573f2014f86af9bc655</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_OPERAND_NOT_BOOL_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ac48da514d207714379536cc53a3c1c32</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INSTANCE_EXISTS_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a54505cf87f4da2062745bfa82eeec386</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_ILLEGAL_CHARACTERS_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a660465312e605ccbc38acdfeaf03fc3e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_VC6_PROCESS_HELPER_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a8092bc150492a6c7efb9bfbedbbbe14c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_VC6_MAX_PROCESSES_EXCEEDED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a1ba5d0cf4c3c5cc499b953086bf7ecb1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_END_MODULE_NOT_CALLED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a64df5fd2d0af5c94c0dd3b7c57c869a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_HIER_NAME_INCORRECT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a6c158a04c098d9fd27d2b3458b1175c9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_SET_STACK_SIZE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a1e7d227f5194388ae79a837fbc2a7d9f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_SC_MODULE_NAME_USE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a328263b861ef77455494d55742bcca94</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_SC_MODULE_NAME_REQUIRED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa63f1f79584672b6341541435a9e280e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_SET_TIME_RESOLUTION_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a13c7ae41282cfd1fc9f6d31ac2edb9fd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_SET_DEFAULT_TIME_UNIT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab37907a9169fbce9623beb62c6218c83</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_DEFAULT_TIME_UNIT_CHANGED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af497a36c1ec51a27428440e7f55182a6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INCONSISTENT_API_CONFIG_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a0a962762ab883ceb79ba758aeac30841</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_COROUTINE_ERROR_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aea4f65c0902d9d5dfc1c59fe9c7a2e2b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_WAIT_NOT_ALLOWED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa5a93dd56e8547abbe024af533e832a7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_NEXT_TRIGGER_NOT_ALLOWED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a03624d8b30016f4946b5391af496d767</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_IMMEDIATE_NOTIFICATION_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a6361eaef4ef21eea7ef1f02a9d865f24</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_HALT_NOT_ALLOWED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a8728282bcb670a96b1819373ddeb37be</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_WATCHING_NOT_ALLOWED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a38caa4df96499a25dff567af5815c095</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_DONT_INITIALIZE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a2ebcbce49b3a35d0f832236b96a8a622</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_WAIT_N_INVALID_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7a9187e6816e66768e89ced3923dc392</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_MAKE_SENSITIVE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>adedd395af4e2a3b6117227150cf53ad3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_MAKE_SENSITIVE_POS_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a26dbe13ced747f2af6e4a760337e2af6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_MAKE_SENSITIVE_NEG_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad414dc529f72d256041e886ee5e7eb9b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INSERT_MODULE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af12714f6171b27f4e444ea103b32c9bc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_REMOVE_MODULE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad59ec7d4134f257c0b4e2b54a6c320b5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_NOTIFY_DELAYED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a42eafc2ee59fd76e2489bb73f50143f7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_GEN_UNIQUE_NAME_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa7ff2193f876f95387d0456640fe22a1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_MODULE_NAME_STACK_EMPTY_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad44625ab0403a474fbef6f718d1eaf30</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_NAME_EXISTS_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a819c1011f6f1eabcd047c3b7a8915d62</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_WAIT_NEGATIVE_CYCLES_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aeaaa29c5f8026b88272a557d7327663a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_IMMEDIATE_SELF_NOTIFICATION_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab495d21d696270a40cf7a9509de10d21</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_WAIT_DURING_UNWINDING_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a96de7432c4475ad284650b4488b1446c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_CYCLE_MISSES_EVENTS_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a22d77129ea38914e737d7a29b690a606</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_RETHROW_UNWINDING_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a9570c4e50139e95f7d8070498eab3e35</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_PROCESS_ALREADY_UNWINDING_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7404d6cbea1118dee52e1f5f5415e826</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_MODULE_METHOD_AFTER_START_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7849ddc1e9afb688b5b661b285c48d69</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_MODULE_THREAD_AFTER_START_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa92de5c1fe34613bbe8c4abe0cbe5a1f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_MODULE_CTHREAD_AFTER_START_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a0723d717cc30f5709156e281ecc46bb4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_SIMULATION_TIME_OVERFLOW_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5cff2c9ab9ddee9cde1a255a83007b47</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_SIMULATION_STOP_CALLED_TWICE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a6c6e0189badd0716fd0213f054ccb367</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_SIMULATION_START_AFTER_STOP_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a8e8e7e285d4b051f5d42341f8de75bc8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_STOP_MODE_AFTER_START_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae20eba2a5690c274223846b5461a44e4</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_SIMULATION_START_AFTER_ERROR_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a677ce426b67d8415b1c3e7e188dbef68</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_SIMULATION_UNCAUGHT_EXCEPTION_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab99b657e529af93b5c1592d469574b0d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_STAGE_CALLBACK_REGISTER_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>afde136a1f1cc6448f055b243c5d2151d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_STAGE_CALLBACK_FORBIDDEN_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ac157398e9f40d984e600d295a1b7991c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_SIMULATION_START_UNEXPECTED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad434c7af9c5df55485b49748dff9c548</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_THROW_IT_IGNORED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a3cc5bbd700c6f8b3317b06b5b80cd5fe</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_NOT_EXPECTING_DYNAMIC_EVENT_NOTIFY_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a3040ed69d3f46cc93b13f39d4b807225</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_DISABLE_WILL_ORPHAN_PROCESS_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae15d3769f95c208941de1ce77551a278</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_PROCESS_CONTROL_CORNER_CASE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae811a7af4b4c5418381aee1726599e92</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_METHOD_TERMINATION_EVENT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af9efd5f9f17014523e912b6cd24df317</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_JOIN_ON_METHOD_HANDLE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5fb11c9f2449ed7701aa6fddc163cd3d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_NO_PROCESS_SEMANTICS_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae67742f3fa5e1c1fdf95c0e0f723c5e6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_EVENT_ON_NULL_PROCESS_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a1096bcebb228ea6e6c9697d25a3b09b6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_EVENT_LIST_FAILED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a1af85b754d4a8fc1b86bc4a8ca331a5b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_UNKNOWN_PROCESS_TYPE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a25777eb83619166e4f2065ebe7e07376</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_TIME_CONVERSION_FAILED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5498a70ac52b5b41254e79ebcc33b4dd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INSERT_INITIALIZER_FN_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a39eba433d4476255594c8f7d9ecab537</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_BAD_SC_MODULE_CONSTRUCTOR_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad1deddcb7279b51472c4c769ec43fb4a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_EMPTY_PROCESS_HANDLE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a3b019b6aa02f6e2f6982d321d387a567</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_NO_SC_START_ACTIVITY_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a192d90ba0f818810145882bb8cfc396b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_KILL_PROCESS_WHILE_UNITIALIZED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae8cdb78e2635b93e7d317b074440e5bd</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_RESET_PROCESS_WHILE_NOT_RUNNING_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7f31aba36c53b3475994d7692d51967a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_THROW_IT_WHILE_NOT_RUNNING_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a001a50b3c1f8380a2cea3b3879f88066</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_CORRUPT_HIERARCHY_SCOPE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad8983f40862a7b7b3eaffa0cfc863bbc</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_UNMATCHED_SUSPENDABLE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a71cb108720707da6197f70fbbbed55e9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_UNSUSPENDABLE_NOTHREAD_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a32fc9d39b9670fd1b82fb71bfa66ac3d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_UNBALANCED_UNSUSPENDALL_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a90e603bc8b2b0204a5b96ded9b8ffc17</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const sc_bind_proxy</type>
      <name>SC_BIND_PROXY_NIL</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a05c83ed28ddaf2be71f43e2447f2f05f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>sc_has_process_used</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aa9aa28dd22e91429d084189619ee7d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class SC_API</type>
      <name>sc_module</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae34ed8cc9edeb8d60a01fd18ea29f88c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class SC_API</type>
      <name>sc_object</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a8eb02df3abf893e699a4802f7c7e029b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class SC_API</type>
      <name>sc_object_host</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>adf8df716eb275809d2cd3ecfcf0e9aa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class SC_API</type>
      <name>sc_simcontext</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a1fe6dc8a8b7107201b40dbe0c50e7961</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class SC_API</type>
      <name>sc_trace_file</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7b0bf91dddf7d55ecd1aed4fc182ecfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class SC_API</type>
      <name>sc_trace_file_base</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>acd23defbbd4b773721cb5fa768db1197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>SC_HIERARCHY_CHAR</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab7f69e2a7adbc571158670cf88bcd11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sc_enable_name_checking</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ada1ba7c0f47b3fc2958d9b104600f861</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API bool</type>
      <name>sc_allow_process_control_corners</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a20c07dbcc7db8c8c6186e9c3d5b22b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API sc_simcontext *</type>
      <name>sc_curr_simcontext</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>afcde6d46331460eebb274ca3ed5d67e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API sc_simcontext *</type>
      <name>sc_default_global_context</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a5516319a9611a1ddcc384b0f359eb5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_SIM_OK</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a00a38e60f2d1fa6e159ca47a2fa89566</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_SIM_ERROR</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a270935f762cca1d68a62bec14131ee43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_SIM_USER_STOP</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a223357780185a4cef86c12e316537713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class SC_API</type>
      <name>sc_time_tuple</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae6a5da85c109387ae9e7ccfb390a489f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const sc_time</type>
      <name>SC_ZERO_TIME</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aba4538758f734d8796fd0e92b430c50c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const unsigned int</type>
      <name>sc_version_major</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae028c0fca02d19cb42e80b1e4288ec33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const unsigned int</type>
      <name>sc_version_minor</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a6abfb00863a6a6f1d3cf80192a18a983</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const unsigned int</type>
      <name>sc_version_patch</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af64733cd7d2678d195d3814e172d1c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const std::string</type>
      <name>sc_version_originator</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a77b1c1fd80a41a32273c0951ccda1a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const std::string</type>
      <name>sc_version_release_date</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae346454c7b1417d7afd64e4e62924b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const std::string</type>
      <name>sc_version_prerelease</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ac6d4de384b3c089481695921779ccb72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const bool</type>
      <name>sc_is_prerelease</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae7c8c897edccfd7b5a22ff90141f8648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const std::string</type>
      <name>sc_version_string</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a0393fa72f28f8734cbaade7ec3b9e0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const std::string</type>
      <name>sc_copyright_string</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a423d7f8a3b6bdf2137c050ad21d2961f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_TRACING_FOPEN_FAILED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a06eeda20217dc669d7d55b33320a47a1</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_TRACING_TIMESCALE_DEFAULT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a76508a03f68654201f7a2b2d4d4f4a88</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_TRACING_TIMESCALE_UNIT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>adaf3a9b947299b5799f6d8bcfa3d98bb</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_TRACING_VCD_DELTA_CYCLE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a2a5e096a79c8f3528990a2b944c5ed08</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_TRACING_INVALID_TIMESCALE_UNIT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a7ba23cac0b13bb2aba8606862a9f75f9</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_TRACING_OBJECT_IGNORED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab4ffb04b73f1046440fb1795e92d1a36</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_TRACING_OBJECT_NAME_FILTERED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a772953ab6e6b35d5a94b33f5d6b0be4e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_TRACING_INVALID_ENUM_VALUE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ab71291d927a77eaf7159b5203e744192</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_TRACING_VCD_TIME_RESOLUTION_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a986da14f6e6347bd175cd9cf3c6ed3be</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_TRACING_REVERSED_TIME_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a19164b2315e3f6b86bbc1a1ba4b9a2ff</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_TRACING_CLOSE_EMPTY_FILE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ad502896363d99a34811ccae54127c33e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_TRACING_ALREADY_INITIALIZED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a39859df0be9a49cdf7b205931db09092</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHASH_DEFAULT_MAX_DENSITY</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a04dc5eeb372ac5295a594d6bc09fcb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PHASH_DEFAULT_INIT_TABLE_SIZE</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a585c1cd718b9ed095cf31af650982dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const double</type>
      <name>PHASH_DEFAULT_GROW_FACTOR</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abbe6028224165297f624a5c270e3eafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>PHASH_DEFAULT_REORDER_FLAG</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae47549bba2ac4b7f9bd73c198718deee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_UNKNOWN_ERROR_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>afa641ebcfe6aed0eebe1d491cfbbad1d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_WITHOUT_MESSAGE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ac2f6a5b71c9d76d0da5d349454d0bf81</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_NOT_IMPLEMENTED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af6c37adc55916b6d993cd36b05dad7a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_INTERNAL_ERROR_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a4510a1c2f2dd573a4506c1a7b336c6d2</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_ASSERTION_FAILED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ac2ecc791509f8108b8d48dfabc7f2802</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_OUT_OF_BOUNDS_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a32a8e2146a0cc5f10fa44f318d2bcffa</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_ABORT_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a1c7b0f39e9c960fe6052cf6d7293c2d5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_STRING_TOO_LONG_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>af05c88af4f123cf5b19113458b627961</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_FRONT_ON_EMPTY_LIST_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ac7f5bef1a65693dcbe5006476d47c49e</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_BACK_ON_EMPTY_LIST_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a54c2a5a9be55790a96c4190a0a94ff0a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_IEEE_1666_DEPRECATION_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a265482b38c0104c478fd612c0da11858</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_VECTOR_INIT_CALLED_TWICE_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>abfbeb618f68393d2bb27bd39ac4ef959</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_VECTOR_BIND_EMPTY_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>aef101ed38799f8b9e5b47766f38bb967</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_VECTOR_NONOBJECT_ELEMENTS_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a4c328dc0b24d7354d702520e122cec4b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>SC_API const char</type>
      <name>SC_ID_VECTOR_EMPLACE_LOCKED_</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>a327670d1652018882e0d847fa7d508c0</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>sc_is_more_const_v</name>
      <anchorfile>a00453.html</anchorfile>
      <anchor>ae18bcb77b3ea7fb70da3db05578a9854</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>sc_core::sc_tie</name>
    <filename>a00455.html</filename>
    <member kind="function">
      <type>sc_core::sc_signal_in_if&lt; T &gt; &amp;</type>
      <name>value</name>
      <anchorfile>a00455.html</anchorfile>
      <anchor>a26460cc8d300ba4de866c49b76fc46c8</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>sc_dt</name>
    <filename>a00454.html</filename>
    <class kind="union">sc_dt::ieee_double</class>
    <class kind="union">sc_dt::ieee_float</class>
    <class kind="class">sc_dt::sc_big_op_info</class>
    <class kind="class">sc_dt::sc_big_op_type</class>
    <class kind="class">sc_dt::sc_big_op_type&lt; WIDTH, false &gt;</class>
    <class kind="class">sc_dt::sc_big_op_type&lt; WIDTH, true &gt;</class>
    <class kind="class">sc_dt::sc_bigint</class>
    <class kind="class">sc_dt::sc_biguint</class>
    <class kind="class">sc_dt::sc_bit</class>
    <class kind="class">sc_dt::sc_bitref</class>
    <class kind="class">sc_dt::sc_bitref_conv_r</class>
    <class kind="class">sc_dt::sc_bitref_conv_r&lt; T, sc_proxy_traits&lt; sc_bv_base &gt; &gt;</class>
    <class kind="class">sc_dt::sc_bitref_r</class>
    <class kind="class">sc_dt::sc_bv</class>
    <class kind="class">sc_dt::sc_bv_base</class>
    <class kind="class">sc_dt::sc_concat_bool</class>
    <class kind="class">sc_dt::sc_concatref</class>
    <class kind="class">sc_dt::sc_concref</class>
    <class kind="class">sc_dt::sc_concref_r</class>
    <class kind="class">sc_dt::sc_context</class>
    <class kind="class">sc_dt::sc_digit_heap</class>
    <class kind="class">sc_dt::sc_fix</class>
    <class kind="class">sc_dt::sc_fix_fast</class>
    <class kind="class">sc_dt::sc_fixed</class>
    <class kind="class">sc_dt::sc_fixed_fast</class>
    <class kind="class">sc_dt::sc_fxcast_switch</class>
    <class kind="class">sc_dt::sc_fxnum</class>
    <class kind="class">sc_dt::sc_fxnum_bitref</class>
    <class kind="class">sc_dt::sc_fxnum_bitref_r</class>
    <class kind="class">sc_dt::sc_fxnum_fast</class>
    <class kind="class">sc_dt::sc_fxnum_fast_bitref</class>
    <class kind="class">sc_dt::sc_fxnum_fast_bitref_r</class>
    <class kind="class">sc_dt::sc_fxnum_fast_observer</class>
    <class kind="class">sc_dt::sc_fxnum_fast_subref</class>
    <class kind="class">sc_dt::sc_fxnum_fast_subref_r</class>
    <class kind="class">sc_dt::sc_fxnum_observer</class>
    <class kind="class">sc_dt::sc_fxnum_subref</class>
    <class kind="class">sc_dt::sc_fxnum_subref_r</class>
    <class kind="class">sc_dt::sc_fxtype_params</class>
    <class kind="class">sc_dt::sc_fxval</class>
    <class kind="class">sc_dt::sc_fxval_fast</class>
    <class kind="class">sc_dt::sc_fxval_fast_observer</class>
    <class kind="class">sc_dt::sc_fxval_observer</class>
    <class kind="class">sc_dt::sc_generic_base</class>
    <class kind="class">sc_dt::sc_global</class>
    <class kind="class">sc_dt::sc_int</class>
    <class kind="class">sc_dt::sc_int_base</class>
    <class kind="class">sc_dt::sc_int_bitref</class>
    <class kind="class">sc_dt::sc_int_bitref_r</class>
    <class kind="class">sc_dt::sc_int_subref</class>
    <class kind="class">sc_dt::sc_int_subref_r</class>
    <class kind="class">sc_dt::sc_length_param</class>
    <class kind="class">sc_dt::sc_logic</class>
    <class kind="class">sc_dt::sc_lv</class>
    <class kind="class">sc_dt::sc_lv_base</class>
    <class kind="struct">sc_dt::sc_mixed_proxy_traits_helper</class>
    <class kind="struct">sc_dt::sc_mixed_proxy_traits_helper&lt; X, X &gt;</class>
    <class kind="class">sc_dt::sc_proxy</class>
    <class kind="struct">sc_dt::sc_proxy_traits</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_bitref&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_bitref_r&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_bv_base &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_concref&lt; X, Y &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_concref_r&lt; X, Y &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_lv_base &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_proxy&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_subref&lt; X &gt; &gt;</class>
    <class kind="struct">sc_dt::sc_proxy_traits&lt; sc_subref_r&lt; X &gt; &gt;</class>
    <class kind="class">sc_dt::sc_signed</class>
    <class kind="class">sc_dt::sc_signed_bitref</class>
    <class kind="class">sc_dt::sc_signed_bitref_r</class>
    <class kind="class">sc_dt::sc_signed_subref</class>
    <class kind="class">sc_dt::sc_signed_subref_r</class>
    <class kind="class">sc_dt::sc_subref</class>
    <class kind="class">sc_dt::sc_subref_r</class>
    <class kind="class">sc_dt::sc_ufix</class>
    <class kind="class">sc_dt::sc_ufix_fast</class>
    <class kind="class">sc_dt::sc_ufixed</class>
    <class kind="class">sc_dt::sc_ufixed_fast</class>
    <class kind="class">sc_dt::sc_uint</class>
    <class kind="class">sc_dt::sc_uint_base</class>
    <class kind="class">sc_dt::sc_uint_bitref</class>
    <class kind="class">sc_dt::sc_uint_bitref_r</class>
    <class kind="class">sc_dt::sc_uint_subref</class>
    <class kind="class">sc_dt::sc_uint_subref_r</class>
    <class kind="class">sc_dt::sc_unsigned</class>
    <class kind="class">sc_dt::sc_unsigned_bitref</class>
    <class kind="class">sc_dt::sc_unsigned_bitref_r</class>
    <class kind="class">sc_dt::sc_unsigned_subref</class>
    <class kind="class">sc_dt::sc_unsigned_subref_r</class>
    <class kind="class">sc_dt::sc_value_base</class>
    <class kind="class">sc_dt::sc_without_context</class>
    <class kind="class">sc_dt::scfx_ieee_double</class>
    <class kind="class">sc_dt::scfx_ieee_float</class>
    <class kind="class">sc_dt::scfx_index</class>
    <class kind="class">sc_dt::scfx_mant</class>
    <class kind="class">sc_dt::scfx_mant_ref</class>
    <class kind="class">sc_dt::scfx_params</class>
    <class kind="class">sc_dt::scfx_pow10</class>
    <class kind="class">sc_dt::scfx_rep</class>
    <class kind="class">sc_dt::scfx_string</class>
    <class kind="class">sc_dt::ScNativeDigits</class>
    <class kind="class">sc_dt::ScNativeDigits&lt; int &gt;</class>
    <class kind="class">sc_dt::ScNativeDigits&lt; int64 &gt;</class>
    <class kind="class">sc_dt::ScNativeDigits&lt; long &gt;</class>
    <class kind="class">sc_dt::ScNativeDigits&lt; uint64 &gt;</class>
    <class kind="class">sc_dt::ScNativeDigits&lt; unsigned int &gt;</class>
    <class kind="class">sc_dt::ScNativeDigits&lt; unsigned long &gt;</class>
    <class kind="class">sc_dt::vector_mac</class>
    <member kind="typedef">
      <type>sc_context&lt; sc_fxcast_switch &gt;</type>
      <name>sc_fxcast_context</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2bddc50e14b45cb480572d0b3991ab6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_context&lt; sc_fxtype_params &gt;</type>
      <name>sc_fxtype_context</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8b108248872f9934c328c5ca24729360</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>word</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adef2a0396a836853f3db5ff1bff13543</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>half_word</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0c8d5569edd76b5d46714bc543d80075</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sc_context&lt; sc_length_param &gt;</type>
      <name>sc_length_context</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6e98a92a91036ae4af6adde14ccdc33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uchar</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad7f9b4978963cba9d617a37c385b228a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>small_type</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a24b5ab9d89d2201797c64885ed4a1495</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>sc_digit</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac387c29028ace5ebdafd46a173a8146a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long</type>
      <name>int64</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a207decf97fdb4964dec544097dc0eb2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>uint64</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a846a5216edd3ebb360bc22d34c54948a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>sc_carry</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5cc29a5cf8d6cdabb754205547f7097b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::std::ios::fmtflags</type>
      <name>fmtflags</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad74c32ef3c41cadc4f70ca08be021161</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64</type>
      <name>int_type</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a91ee067e28f43380d62cc8656effe11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64</type>
      <name>uint_type</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa4830f7c702212e2450d5cda8603a21e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::std::istream</type>
      <name>systemc_istream</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa41f37c54128db73b2bd0271d9653f82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::std::ostream</type>
      <name>systemc_ostream</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a01d2d93f36664a8b8396e268cdfe0109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_logic_value_t</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a223af6739d8c2583afe1493167e80f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Log_0</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a223af6739d8c2583afe1493167e80f1facf684ee264000f979e683d589578cb76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Log_1</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a223af6739d8c2583afe1493167e80f1fa3d94e65043b731e0c9d787b50e197caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Log_Z</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a223af6739d8c2583afe1493167e80f1fa312c0fda75290bb3115f0a6838a54e58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Log_X</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a223af6739d8c2583afe1493167e80f1fa4a796d0647b5a2c459b8806f2df1c677</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_context_begin</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4945f594b517cd356c50caae3f84707b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NOW</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4945f594b517cd356c50caae3f84707ba1a2efdcd4a33cdc683c11659bb8388f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_LATER</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4945f594b517cd356c50caae3f84707ba8c6efc38edcc0bb78fff64747e4ca724</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_enc</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a035b2fe5adb9e024f3a73566a3c2021d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_TC_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a035b2fe5adb9e024f3a73566a3c2021da7d25472237e7abeee4b1dfea810a6dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_US_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a035b2fe5adb9e024f3a73566a3c2021da17061f9e684d33d50a972d1406500d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_q_mode</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RND</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721a36e005cfebfe572beead8ac908a98a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RND_ZERO</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721ab8065af719aa3b64fcb7e8b762777d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RND_MIN_INF</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721a5a6dc4fabb906810d07b4988a3556306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RND_INF</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721ae54536bffed693c870ca369ec8105232</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_RND_CONV</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721a3208a876fbd9d52d1d6831e597701fd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_TRN</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721aaceb6b9a67ca6b69bda017d5b85ad59a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_TRN_ZERO</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a231ecdcc13fcad8eb53b7020c93bb721a916ed5dda67312b52f23dc5e5b688ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_o_mode</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_SAT</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5ae2ac4621bb524bf811267c20a93cf663</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_SAT_ZERO</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5a9770e01c1e895c56da0da5ae03b223f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_SAT_SYM</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5a77ced946513ae051d4b02772a5266a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_WRAP</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5a1cb308125ec9f13dd2d00062d9821333</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_WRAP_SM</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af938546ec8f720ce20f21c3b0931c2e5a26ccb388310d8f37081295aa5c5c1273</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_switch</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac3088a9000bafb9fa9e323e2bd1fbae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_OFF</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac3088a9000bafb9fa9e323e2bd1fbae9a4c634ecb88fc0afc63cc4a614c091c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_ON</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac3088a9000bafb9fa9e323e2bd1fbae9a9134bc2b049e2b99d40c2aa3ccbac6e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_fmt</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7d611fc1a2b578e4630fa7ccf455327b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_F</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7d611fc1a2b578e4630fa7ccf455327ba279868695677057493ec01c302caf0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_E</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7d611fc1a2b578e4630fa7ccf455327baa4d9bb83f1d3f84d59edf29e5e20da30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sc_numrep</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_NOBASE</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a57b0fc7080c8e8823dd373416e61e38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_BIN</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a307c54bef660788d5be06b7db68b7942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_OCT</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9ab5bd29df600aa251432d9cf565e3969c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_DEC</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9ae9985e111b26103887bc8cb856062d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_HEX</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a3bba378d8c598eaebcbfd61a3341413b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_BIN_US</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a3f0b0a2200db8c111e7275278bac962c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_BIN_SM</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a6b148eae66cb447584899b7b0b25e23d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_OCT_US</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a27b98a3dc7d893f39c987f846cd26ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_OCT_SM</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a7422976e4f533f6c8989d33301ffbdb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_HEX_US</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9ac20afd6fc8d81e8c690b939a00319713</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_HEX_SM</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a2269b5783b048c0d2c13abc7977c2e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SC_CSD</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d7f17e93afae1c969127c6b80baa0f9a1cec3b96584130b8fce5557f58cda822</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_deprecated_sc_bit</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9a555bb14795b3f339176ec331d1fc77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a670409225d70df53b3b5e5156a061ba6</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac521149d132e9c77a5d9029aa86344db</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a999b6968ffdbf89e68bbc87a952abe0d</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>not_equal</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab15929c97a4ca6b79389507b1451956c</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bit</type>
      <name>operator~</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af43b6846fcd3818ca508802d01645c59</anchor>
      <arglist>(const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bit</type>
      <name>b_not</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab9f6327ca65f639dccc5d36db72526c6</anchor>
      <arglist>(const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b_not</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a867ee07d6d7728bc8596a45b51201f42</anchor>
      <arglist>(sc_bit &amp;r, const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_bit</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3184b685306c35d0200161da608a06cb</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bit</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af486280fb0529d2f9b8c9b07c7ed8c65</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bit</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3c88b5c1288e269beac944d21edfd3c8</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bit</type>
      <name>b_and</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a17347b4515a548144b25504deb86486c</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bit</type>
      <name>b_or</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a431163b92b2427d6bce1b5a108ab76c3</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_bit</type>
      <name>b_xor</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac40d2f5edfea2d76a05532ffa2e51a28</anchor>
      <arglist>(const sc_bit &amp;a, const sc_bit &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adbdd47fbc03fb76a8622346aafcc6b7c</anchor>
      <arglist>(::std::ostream &amp;os, const sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac8ed514669f4ab65d505e1054abeff9c</anchor>
      <arglist>(::std::istream &amp;is, sc_bit &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae9bbf1a67736d946f8a92f86ed4391dc</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a90f81444abd431062e107de121a995f1</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_logic</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab6f9f2df6215056578f25f85106b1004</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a71caac3c438813220653c56fa570c536</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac5ec8c247ab8dbd8f82be5e7bdaf6cd4</anchor>
      <arglist>(const sc_bitref_r&lt; T1 &gt; &amp;a, const sc_bitref_r&lt; T2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a81419df3a1065a1170353258b1362946</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a92d3d1f0771d4917f75f6b6d08971938</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2e1ed21a3e562a385b10e27541a4f2ff</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a41d8a0d4ca38da9c857a585a42857536</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af1d7f73744b5ed181a0cda52617a182a</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a622ac6b70d9b15affe6ec1ace4ca4d11</anchor>
      <arglist>(const char *, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a806af68b4a880703e0a1f31d0c5964cf</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad21a033bc55235fd111da0e3e7ff3089</anchor>
      <arglist>(const sc_logic &amp;, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a363690639131ca93107478afb622a505</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a47edb92531794153b9ba3444ca7b074b</anchor>
      <arglist>(bool, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7dfa6b058e6b1a337569e75474de10b3</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab237e358a7a2c8d7cf1e956da9987045</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4dfb2c146246c05c723d03c6ab55e924</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae8091cf1dbf3bcc79cecadca66cdaf50</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad944deffdcce2f496fef7dc225c2290e</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab5a33b4fc1575ad7a1d3cc626e7d2463</anchor>
      <arglist>(const char *, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a188e57d8db8c17ba6966ca2ad6448d43</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6061aa9f64645617da66705d49b8b950</anchor>
      <arglist>(const sc_logic &amp;, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5be3a33ead44582709d4fc040e611b03</anchor>
      <arglist>(sc_bitref_r&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac032aeec56c383084524166bee5f2008</anchor>
      <arglist>(bool, sc_bitref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2ce6f30cd6cdf7f4c38735acfe59bc28</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a59f461d35dff3d7da3f8648edcce73d4</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a21a209c08e0ebc711d71c56575733d81</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afa119536b99823db5fb6a1183a3ce844</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a717e2603f1dd59545fd1b7b0f1aaa8b6</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad4df1090c50ee5b904b05c09dbab6ef1</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af08909aeff30a5661212494681440693</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a586bd54dcb491a57486912417014a19e</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad6cf471335ec7d6ba7ae651baa801270</anchor>
      <arglist>(sc_bitref&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a047a3bb2af3626b076ad1c27ba2ef238</anchor>
      <arglist>(const char *, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae3af376b87d812b3f269b5ea86fcbbe9</anchor>
      <arglist>(sc_bitref&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a99cb25216742e2c864cd4fc293527b40</anchor>
      <arglist>(const sc_logic &amp;, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a161f8f88b46464d0a3c0e23a922b1548</anchor>
      <arglist>(sc_bitref&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0f813bf2aa5aa85a5a1ecd53089ae993</anchor>
      <arglist>(bool, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8d468d33c702dc2e4c10caed3d3bc979</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af757f4e100f6aa74341eba2141539c1e</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac2c496d6b7006850d61dc2f30924e65d</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6e34f9a9d83a96fed73178c440acfe40</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a02f728ecfbd50cedf37b4741baf3162d</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1abe4d79fded432cf6b57fa8698a5984</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abfd243168b956371f6885066f15c122b</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0fb49a14347e7a6ff894a0f0f1a979e9</anchor>
      <arglist>(sc_bitref_r&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afb449abe5bd21cb19f251d3c1545a642</anchor>
      <arglist>(sc_bitref&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae8ad565a3a5135f40ddf4dcac2fc8ddc</anchor>
      <arglist>(const char *, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a384793e89dac342212b8f0e615dbe89f</anchor>
      <arglist>(sc_bitref&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae68a8c9995924ab9b57a2e39330151fa</anchor>
      <arglist>(const sc_logic &amp;, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3f6f2e7b1256f4c6fdbc46181bb89a26</anchor>
      <arglist>(sc_bitref&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9d5122701847841ab40437b28235195e</anchor>
      <arglist>(bool, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5266b239d8e2c42a4c605ec903dde2f4</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_subref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a087e36a8af762e470a69bceb2c92a0f5</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8ef2fb54ca95e440ce61194b8da29e71</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a56e1e9ef573549d9f661fbbc6f83b813</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a97f4042e2bfad31fbf01b6ee07a34e94</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_subref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a89cc2621afd6301d343848c00f1238f4</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1d07b7b210a7c22123a61a597a3203ed</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_bitref&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aea2386292f7358617418de4954fd15d1</anchor>
      <arglist>(sc_bitref&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac3b1b471bfae8f49e09764721bca342b</anchor>
      <arglist>(::std::istream &amp;, sc_bitref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab5a55f08f62f53ecd3030ac442f83799</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7762f6d94c5fc0e5d3ee70100ba48835</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1a17a497bbe7a7e47cae999637cb958d</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a66f2f9773a2b549bd96316736fe77930</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a08081f739cf5286904aa703f34368076</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab9b022e3917c47a8794637d869da921f</anchor>
      <arglist>(const char *, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac3cf85728b4a5fbca2432fce59f9a2fb</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1d4a952f36b3da0854e68eb5306fc891</anchor>
      <arglist>(const sc_logic &amp;, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1f1eef971a95114816e10d9866762cf7</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afaa63a7bbabf6e35455b2a690236f086</anchor>
      <arglist>(bool, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a302d08f7807e43083b03f42327439d99</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7eb5a5ba70bf61752d80ef89f493abf2</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5116ef6772a191df1ce90339cf4cbd50</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a02ad8f45bdd3236a0c542c54e7f83dbb</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a00a69d1b94f6b303d586b758953024d7</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac9b5d60e7345363d7623b2246f67256c</anchor>
      <arglist>(const char *, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8592cb9f249e9043697d4f9b3c467b73</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7158f591a5c538f13c747e11b21bb778</anchor>
      <arglist>(const sc_logic &amp;, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a534dcb835a4720bdd91eeaeb5cacf0e6</anchor>
      <arglist>(sc_subref_r&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a40365c424c1584678e218a29a785a5ce</anchor>
      <arglist>(bool, sc_subref_r&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0fc7962993db3d0e8b6f58aee2d1d14c</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a72473e2d13301e00a004d1f5db4e210e</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9e8c763b1a48a1850696b0eff80f8112</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af9cdaf405ff20a5dfbf2eb50423f967e</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6620dd89349c47dd7f7cf82fd6b111bd</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9e87fcecd1e398ce33d732e2badc45cf</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>acc45c87d25c869670f0329fb5bb371f8</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a14fd6df1ba7bd561a7480145f19ce281</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afe406dae5c319ea585830e4a1cfa936e</anchor>
      <arglist>(sc_subref&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad4bc0d9f123e16cedd29a3e17e374e64</anchor>
      <arglist>(const char *, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a81d48a40f19d9dd18cd5eafa7073f83b</anchor>
      <arglist>(sc_subref&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a558fa8c2eff0d9ebc1f9c8e6d6472c58</anchor>
      <arglist>(const sc_logic &amp;, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0b96272597c30fffbe060de69addf540</anchor>
      <arglist>(sc_subref&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae1ec021063938b6c286593c2a3372f19</anchor>
      <arglist>(bool, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af64856ff14f5de2caf30a2e995c35831</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6810d3344f01425a832b22c77272ffc7</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a43206b4b80dcd311c3b5bcf1d311178a</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a811283a8ae707179b127c0da7b1f0775</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa365e53e5ec7237004d7d15a6fcb4c94</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6637834b50f88a16dd20b491aa13e029</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1212d11cd9c207329aa698c5b8d2a330</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac31f939147de43ee9d63dcb993d4c5c0</anchor>
      <arglist>(sc_subref_r&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a528c262ee46e1e1e4ba42c59848a21f3</anchor>
      <arglist>(sc_subref&lt; T &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad1a3f319b3e1bd169ff886c3e0cbc7d8</anchor>
      <arglist>(const char *, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a411f15827676bb160b9d04359a13e17e</anchor>
      <arglist>(sc_subref&lt; T &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5bee9e7b5cc2b9364d7433b2c6cb8737</anchor>
      <arglist>(const sc_logic &amp;, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_subref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a57659569d6ab1c7f5033116c142f3c08</anchor>
      <arglist>(sc_subref&lt; T &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_subref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a678e9a6a8c193a81a6143efb44608208</anchor>
      <arglist>(bool, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4a2c7126d0a4d686a071ce3a31ebc02f</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_subref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae9d19a7d0bcb151f9b400673ec7cdc05</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aaad9649d241271db46fe10491c47d1a9</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a88f9faad8c6e27fe2aa9e8928c187f92</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7fce1575881c89babc6022e720cc479e</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_subref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad443b0bd7cf77e94269e3de7aee35ab5</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8a69c9965b1d8767101762dcb6042216</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_subref&lt; T1 &gt;, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9be7ee0081f383e696a5e6392cf9396e</anchor>
      <arglist>(sc_subref&lt; T1 &gt;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae0a982c3235696715a986c4da032fe5d</anchor>
      <arglist>(::std::istream &amp;, sc_subref&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac9706834b530dd042d5ea750e769a57e</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>acabae9f6caca445a1990aba801a6231e</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a10c08618f10cd89f9eec9270131593ad</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aee7e2c3b1eb664dac0a44ec6d09ae16a</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a400c70f73c82bb65c0b93473c6c6d5d0</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1d284514176c13fa9b314d1186de90d1</anchor>
      <arglist>(const char *, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8e78ec7da94c5e58d58eeb6d3672cbd9</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3be49867a56f1f06b4525dad34a00855</anchor>
      <arglist>(const sc_logic &amp;, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a08c5462a7a0d1543ea08baad6f61a5c0</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2acbabfadfe10290256868d33ee0c24c</anchor>
      <arglist>(bool, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac4d617c8e9a9074ec2c456e1b3c92669</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3a541920fa37fbc8879a0027fba6626c</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab2f60b6abc2a67b6a29bc05b9971d9f7</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>acae846ebbb35cafb437a20a0f30c5213</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad20d165ec30a6c85cdeb9af4ff182d19</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aff3b50394ebc21692b65cec619599859</anchor>
      <arglist>(const char *, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae41f08b67af456094ade7f8e7bbd191d</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5541b2f65c8f05deb8d41ac7c9bcbb49</anchor>
      <arglist>(const sc_logic &amp;, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0d53307c625d3727944862a613770d8e</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7596ccc6f508e56489a570ee3ee8b734</anchor>
      <arglist>(bool, sc_concref_r&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aeaa4e7662edfbd3ae91c474e95a58382</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9520a280d48a0d4ee8287fbe4cd338b2</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af4026ad59c859fd0c389dafab0448560</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9b7f491aec1f02765665d43024d29f35</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a88965d7b9b2e9e96363d5d251e53a36d</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa11cdd8b4824d62f9ac7b30585f48235</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7bab858ac27bda49bffc4e33fcbfd872</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a67d3aa4c9f1721c094442ee864241a73</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a763c84ab67f2e9c65f1b7311ff8f9195</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3fd1efd1074fabf4b71f140b716e0a22</anchor>
      <arglist>(const char *, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aaf3c2ec104c6d7f54327d7a265926975</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae8886cab28a21b7822951260da641abc</anchor>
      <arglist>(const sc_logic &amp;, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a64b5d6025508b41e2ae793b38c3c2528</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae60687edaca633da56393f5c466ec3de</anchor>
      <arglist>(bool, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a37213a3b84647cb8f21242701fa6326d</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8f5fb909db95eabb429c23783a344bce</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_bitref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a21256602b22279850cd4a74333f73a25</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1bf94b308ac36794df41d3631a71ab66</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_subref_r&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae70190d912d0ced7b8971adf63e00a11</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a073aa2b8b1b82bec42a2450260171952</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_concref_r&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1235c8e0e0c323f26572612252255454</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adff391de87eb9b631cd77e770b4cbd34</anchor>
      <arglist>(sc_concref_r&lt; T1, T2 &gt;, sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac4269641953c2ac9d8e85133f6c04ca2</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3d71ac5db88c59b7247fb9801347efd4</anchor>
      <arglist>(const char *, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aeb45615effb16db3e1f333e63881ff9b</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1c5b4e946e3547e415a1f5ed7da46a13</anchor>
      <arglist>(const sc_logic &amp;, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_concref_r&lt; T1, T2 &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae709314167cfc7291475de5b7f8bdfc7</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_concref_r&lt; T1, T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab09e3dd5465e10bad7c6e155d35f8598</anchor>
      <arglist>(bool, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>acc1d62ff4990e9020f8228479239d50c</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac421f1b8303521e6e0b39744ec9fe840</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad0c72151aa5ed9b4453fa3faad7f1470</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a88cd16cf36f26b1250cd116c4a2f032f</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8d2c6b4cc478cb8a9394dad92cbeb701</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_bitref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8f7915f4c0e3fe4d19446d796be3bf28</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_subref&lt; T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af3c962512719144042afc26a018d5c8c</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_concref&lt; T3, T4 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; sc_concref&lt; T1, T2 &gt;, T3 &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>acf2d1769ddcfddbdf44a35721a4feabd</anchor>
      <arglist>(sc_concref&lt; T1, T2 &gt;, sc_proxy&lt; T3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a35b2e9a5e7c495e2664b0dfcd85c27c7</anchor>
      <arglist>(::std::istream &amp;, sc_concref&lt; T1, T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3f4ac6c2019b09892ef39a8361d92937</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a606053819c20bc655544e80ee21268f4</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae1b905aa7ca267e83118a38597dd8a4e</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a70d934f75442a579f512c3a6f66d1153</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a543a131e89dffdefa7285dd8144ac1dc</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a672c1005e61816ccc65c00f7a3fdce50</anchor>
      <arglist>(const char *, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a574450a7553b2e0083ebcecf58d907f8</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a79e9609977cfc2e03ab39d181c0dc58c</anchor>
      <arglist>(const sc_logic &amp;, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a88d2d98f5e66f4dcb5291061d621f50f</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9048f5e66588f65c60e03db0ce42674d</anchor>
      <arglist>(bool, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae35c449a5094b9c31fd9c498ea094fe9</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac89e5d0df7a32dd6e8e0d7a73a47b6a1</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa0076b0ab9a5455bcf8ff44fe9a56971</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7469a7a18ec5a4f0434c2611f0e2e210</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abf0cbad6b2d05f6a010af0bfc5cd75e8</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a75171853c5ffed35a5405158619a06c0</anchor>
      <arglist>(const char *, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5f85cf25c9da5f0873809362fc628707</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8da755bd8659876bbd7f6f0a4fe83b38</anchor>
      <arglist>(const sc_logic &amp;, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7d97866544c2ff4d568f6a231d208178</anchor>
      <arglist>(const sc_proxy&lt; T &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a99998f94c0ce6c32ad437dcede5726dd</anchor>
      <arglist>(bool, const sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6a45e924aa2dc4fe1c3cd075c53bce64</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9565ff98c386c059b8df66dc7837eb92</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4977209d2853d012169e7e34e58d1d25</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adc0e3e2d82a56b5e5117c704ecb29c7b</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7be267b5b8e5fb44342c5deb84efbc2f</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af38e0e17f61aaa7ce6f792657a5c361f</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a821fd3959dd2b3b4a59dfca7a8bef0d7</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab0d9ba5ff6fe44e67ff911bbfea9a18e</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad0440604d54a5ad4a078f8f65c63bc65</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a01052f8967da6e35cbf5bec2063b3c2b</anchor>
      <arglist>(const char *, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3fd795249e3789a74dd62b9ba53cd204</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1c5fc5a94137adc1953d51fa053b3652</anchor>
      <arglist>(const sc_logic &amp;, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9f18e340a373e451fd5660361dbb6d81</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, T &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a731935abd59222ba54d861b8600e3a0e</anchor>
      <arglist>(bool, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1d98d02b56cdf1df9f1e82941b30d122</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_bitref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af35dbda5506312596382e165a40f5993</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_bitref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad3659dc31eb662c4c9b930a9d1c7eee2</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_subref_r&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a49b9e679d38f48d1ce66398b6c238a8a</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_subref_r&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a075e5c65ddbe18ba7ad0cc41766b1784</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, sc_concref_r&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a340def548a6538874aec07155ddf9e11</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_concref_r&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad1d043888f4221072b3c33a67d4aba09</anchor>
      <arglist>(const sc_proxy&lt; T1 &gt; &amp;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T1, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>acbc563182ad467a798557e7faf46591e</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, const sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7c8b3ddbc663f7205b9e7990a1a6c975</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, const char *)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac9f81ab2a6c15d712f2e3c1404e037e3</anchor>
      <arglist>(const char *, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_lv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9a1ad4c519e64a24f8ae760c71bf3efa</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, const sc_logic &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_lv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a65083b0124075a2dd18d3fdd6127bb16</anchor>
      <arglist>(const sc_logic &amp;, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; T, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac98cdbddd0554bdc00de2d621b64b9d5</anchor>
      <arglist>(sc_proxy&lt; T &gt; &amp;, bool)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, T &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aea14782f31e90f6197121d2645ade3d2</anchor>
      <arglist>(bool, sc_proxy&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afc921e3ac11fbf364a8b998cc3cb352f</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_subref&lt; T2 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a887117f11ae0050cbaae26a49ea4893f</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af63f0946c46b9f955f3143821385d1de</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, T2 &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2f4982bc8d7c70412e0bd78a575f6a35</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_bitref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a635ec0670993cad06d12e8851711a5fd</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_bitref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_subref&lt; T2 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa9004b0f4e4021cbe0b083d212843661</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_subref&lt; T2 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, sc_concref&lt; T2, T3 &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4b1dc414e18dacf4c16a7edbc70ad67c</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_concref&lt; T2, T3 &gt;)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref&lt; T1, T2 &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a64028e5ea6310e2072e7212b32859b06</anchor>
      <arglist>(sc_proxy&lt; T1 &gt; &amp;, sc_proxy&lt; T2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8b1d4a0e7a36e3ecb96ded1199603a81</anchor>
      <arglist>(::std::istream &amp;is, sc_bitref&lt; X &gt; a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9989b31fbf8fc4c48c98f8114fb2038c</anchor>
      <arglist>(::std::istream &amp;is, sc_subref&lt; X &gt; a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a52ab69e2c5a9e57275c4960e3e2bbaf7</anchor>
      <arglist>(::std::istream &amp;is, sc_concref&lt; X, Y &gt; a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a61fbb8dfad96b358875d2da6f9afe40a</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afa4f11c07555ffcc0fc97e15c772c236</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_logic</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a712fb799189610ca33f8542faa614091</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a682e704d226b970e4996557c3a7e64d0</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5f44cb6c8d3c779db140c9f8e06f4b5c</anchor>
      <arglist>(const sc_logic &amp;a, const sc_logic &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4e82825ebdc1cecc1a36d56859fc21ee</anchor>
      <arglist>(::std::ostream &amp;os, const sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a16bb18a7a6d0caaa6bb8eee27ad2837d</anchor>
      <arglist>(::std::istream &amp;is, sc_logic &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aba7ad83515afe83d333670863527e2b4</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9924a36086efd2c97b00a20a4a4a5f49</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator|=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1faecf0db01159662c449f77ae038d63</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7ab12a17f8438b7aecb8c4dbcb350dcf</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>operator^=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a513cb0b408e84ec87a9d9366a1be7d3c</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a45d78f0d8308fdfb760f2303633fdf01</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>lrotate</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1fe7bd132ceef9dbe2a7a48785e5a89b</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;x, int n)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>rrotate</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aaef5d4342471b8b39c4f912d0c790698</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;x, int n)</arglist>
    </member>
    <member kind="function">
      <type>sc_lv_base</type>
      <name>reverse</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa3fd63ef0bd40d8914e8bd5ac5ff418f</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a14eca5ca6f6376cc71a6355ca5238a5d</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac44b28dfc2aca8a5e01724d2e4b5d8a6</anchor>
      <arglist>(sc_bitref_r&lt; T &gt; a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0452300124c6776c2da0a0a6277a6b34</anchor>
      <arglist>(bool a, sc_bitref_r&lt; T &gt; b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a851c358d173fbb59aedc6e5160d948b3</anchor>
      <arglist>(sc_bitref_r&lt; T &gt; a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a862cfea9929ef89afb2f942f614cbd2b</anchor>
      <arglist>(bool a, sc_bitref_r&lt; T &gt; b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aab41f6a85439ed53c5c0d6e2a085c323</anchor>
      <arglist>(sc_bitref&lt; T &gt; a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a31efed4ef02150fba0b0ba6ca550e212</anchor>
      <arglist>(bool a, sc_bitref&lt; T &gt; b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bitref_r&lt; T &gt;, sc_bv_base &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a62b30a1d257eecf1048f18e2fc84a9fb</anchor>
      <arglist>(sc_bitref&lt; T &gt; a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>sc_concref_r&lt; sc_bv_base, sc_bitref_r&lt; T &gt; &gt;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac6f4fc5f297fefa125e04b0d8d0ed481</anchor>
      <arglist>(bool a, sc_bitref&lt; T &gt; b)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>sc_proxy_out_of_bounds</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8dc1fef075ccb13beaad8ba47cd5d550</anchor>
      <arglist>(const char *msg=NULL, int64 val=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_p_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab19c521447708135e53f3061392c368e</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0d9bb67bf2d6103a56c634852dfb3674</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SC_API std::string</type>
      <name>convert_to_bin</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab17fd94e7cfcdfce201af45dde0b9ed3</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>SC_API std::string</type>
      <name>convert_to_fmt</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3343cd9eeaa9a3baf852aed88f25e543</anchor>
      <arglist>(const std::string &amp;s, sc_numrep numrep, bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a45816c9590a94aca06c1f189c855b89d</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_words_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a43dc0c3f82468be76295de7ffe67ff95</anchor>
      <arglist>(const X &amp;x, int wi, sc_digit &amp;x_dw, sc_digit &amp;x_cw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_words_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a464ca38a9d1338847b903ecdde3b6807</anchor>
      <arglist>(X &amp;x, int wi, sc_digit x_dw, sc_digit x_cw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extend_sign_w_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae38b1e6b91be552ded23cd661edfaa9b</anchor>
      <arglist>(X &amp;x, int wi, bool sign)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6a505dc35902d6296779a490d1495e5f</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a323315704ce928228719f4fa443313a5</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1fef86621e00ed4c2efb80b832b3438b</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_v_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad41f86308be3469097df4e959c88db5e</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>b_and_assign_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a93199ba7220cb2c44fde338c816b2a1e</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>b_or_assign_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a280df14eb675937223d31d9d0f01a984</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;px, const sc_proxy&lt; Y &gt; &amp;py)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>b_xor_assign_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa9eb01407c36ea40f99f0c702c0ed444</anchor>
      <arglist>(sc_proxy&lt; X &gt; &amp;a, const sc_proxy&lt; Y &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_proxy&lt; X &gt;::value_type</type>
      <name>and_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad05bdd5291b54f5fba9798ba11d46c23</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_proxy&lt; X &gt;::value_type</type>
      <name>nand_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae6f5a5440839dc6ea982f17928e83727</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_proxy&lt; X &gt;::value_type</type>
      <name>or_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a259706f3eac3e4c70de123e5be79e1c0</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_proxy&lt; X &gt;::value_type</type>
      <name>nor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a83111b85def0b1dab8ee044692bb0092</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_proxy&lt; X &gt;::value_type</type>
      <name>xor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3b1de6eae3d82b0de9142a19d4e33477</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_proxy&lt; X &gt;::value_type</type>
      <name>xnor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae67746c712128eb78f7656260f6384b2</anchor>
      <arglist>(const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3ac97060d3df193032602ac1d3ab3668</anchor>
      <arglist>(::std::ostream &amp;os, const sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac624d5ae86991cceb09dbac5431433c6</anchor>
      <arglist>(::std::istream &amp;is, sc_proxy&lt; X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b_not</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9a955bc53408f7a3b67e0e7e96f599ac</anchor>
      <arglist>(sc_fix &amp;c, const sc_fix &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b_not</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a105427a5d4f4e3bd62c2aeef146b2033</anchor>
      <arglist>(sc_fix_fast &amp;c, const sc_fix_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9f28f612a1193481340c21eadae8a76b</anchor>
      <arglist>(const sc_fxcast_switch &amp;a, const sc_fxcast_switch &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac178878fbad4e4ea748f2d29ac88176f</anchor>
      <arglist>(const sc_fxcast_switch &amp;a, const sc_fxcast_switch &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3e1b5cc1aeb26a9d0462017492d83c82</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxcast_switch &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SC_API std::string</type>
      <name>to_string</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a87f1e6294298ce3eb442615d215713ee</anchor>
      <arglist>(sc_enc)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad62d2da907a9ae127d65dd93bdadbea4</anchor>
      <arglist>(::std::ostream &amp;os, sc_enc enc)</arglist>
    </member>
    <member kind="function">
      <type>SC_API std::string</type>
      <name>to_string</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0f99b2860921e8fe18b4a41d745b4e14</anchor>
      <arglist>(sc_q_mode)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aded8fcdead48a9ca37af5666bef449bd</anchor>
      <arglist>(::std::ostream &amp;os, sc_q_mode q_mode)</arglist>
    </member>
    <member kind="function">
      <type>SC_API std::string</type>
      <name>to_string</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3a1a3abd60c13e92da2d9bea4aacc30e</anchor>
      <arglist>(sc_o_mode)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4afbd495740aeb3c4e32bae0828ec183</anchor>
      <arglist>(::std::ostream &amp;os, sc_o_mode o_mode)</arglist>
    </member>
    <member kind="function">
      <type>SC_API std::string</type>
      <name>to_string</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab385966a049aeca0e7c6775cd4c503ab</anchor>
      <arglist>(sc_switch)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a20c8343621227b27dd6ee9a798968c38</anchor>
      <arglist>(::std::ostream &amp;os, sc_switch sw)</arglist>
    </member>
    <member kind="function">
      <type>SC_API std::string</type>
      <name>to_string</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae75fc196b2e389cd3bfee5174fbe1359</anchor>
      <arglist>(sc_fmt)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4568d751d4ba57c01ab4b4372249dfdf</anchor>
      <arglist>(::std::ostream &amp;os, sc_fmt fmt)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a60456f652dccac110221a18de305ff3b</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum_bitref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a76de39680115a50eb3a5a1d38d2a948f</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum_bitref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a42ee6d1eb22a15d9aa7414b4df08536b</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum_fast_bitref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ada24e9069826a012de8d91c27cf8d5a4</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum_fast_bitref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a30463f85f209410827263125383421e4</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a01b2ca4c8c83bafd984f35db6f78a643</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8dceb3e7982ff593d2c3b55f39bc91e6</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum_fast_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3022ac2131e8a0587802d1d045449fa5</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum_fast_subref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a11bf5965abed66b3e761ae72eeb94cd0</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxnum &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2c48d5493cb4af546a93f1d8e78658e9</anchor>
      <arglist>(sc_fxnum &amp;c, const sc_fxnum &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5124baa8cc8ce1062492f4fedbbfe6bb</anchor>
      <arglist>(const sc_fxnum &amp;a, const sc_fxnum &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab134d1299b107a847340552f3c7199cd</anchor>
      <arglist>(const sc_fxnum &amp;a, const sc_fxval &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2e7bfea9d337fabf4a07f921f6af8532</anchor>
      <arglist>(const sc_fxval &amp;a, const sc_fxnum &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9060045e5b705f2b71a6389a033170bc</anchor>
      <arglist>(const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a45bf4cd7391c3e3c6243d6e18f00c093</anchor>
      <arglist>(const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8e9a274cadb18414dcbada92a383cca8</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a783c5d3a7d9130b280aade86b1a3a13b</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a05e4628de672ebbf569727d275a39e09</anchor>
      <arglist>(sc_fxnum &amp;c, const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a949dd60e2b454c7ee30915c96834880d</anchor>
      <arglist>(sc_fxnum &amp;c, const sc_fxnum &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3ddc311293b3be89082bc650cc9c3f87</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1089fed5a37967de5601512b56474cb4</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a091952271ce53c1642f87cc5df61f491</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxnum_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>acc439cdbfe603a211914e1f7e442475b</anchor>
      <arglist>(sc_fxnum_fast &amp;c, const sc_fxnum_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a825b70095de576c5ef8ec89134ee2511</anchor>
      <arglist>(const sc_fxnum_fast &amp;a, const sc_fxnum_fast &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1a6c1f4130b646ebb24ab4fa34dc1ef8</anchor>
      <arglist>(const sc_fxnum_fast &amp;a, const sc_fxval_fast &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5362bb1320de358c18390bf870a26e32</anchor>
      <arglist>(const sc_fxval_fast &amp;a, const sc_fxnum_fast &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a38a56b544ce9a0eb21144bbf0ded9475</anchor>
      <arglist>(const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abbf8990fc93f515d78cf5b3c2165aba2</anchor>
      <arglist>(const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac739e4382ff824deb61e47505a2b7250</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa701ad8002f0787931a72b712e03836a</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac1bc8f0c659c5c410d265faf207bf694</anchor>
      <arglist>(sc_fxnum_fast &amp;c, const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a67004778acc4b3bef9d4e7478925b7ca</anchor>
      <arglist>(sc_fxnum_fast &amp;c, const sc_fxnum_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a08327c04f1f596b6d5a04a0d51acb4cc</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxnum_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aec9ba9e9c2e6c092296a417fc4d79a38</anchor>
      <arglist>(::std::istream &amp;is, sc_fxnum_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab78be5087d037d1a7e56cbaecd89f9a2</anchor>
      <arglist>(const sc_fxtype_params &amp;a, const sc_fxtype_params &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0561b8a64aeb14ae141b087e10f620b8</anchor>
      <arglist>(const sc_fxtype_params &amp;a, const sc_fxtype_params &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a06057f8453d2505feb6b7bd05255528e</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxtype_params &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af432f76dc658be1bfdb48fa5381bd1f0</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxval &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae114c96fb73f9a0035091dee183f3477</anchor>
      <arglist>(const sc_fxval &amp;a, const sc_fxval &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abb259d9e83f9d10cdda02923f19201fe</anchor>
      <arglist>(/, div, int64) DEFN_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9db290257eb17a9a83abded8ebce5b17</anchor>
      <arglist>(/, div, const sc_int_base &amp;) DEFN_BIN_OP_T(/</arglist>
    </member>
    <member kind="function">
      <type>uint64 const sc_uint_base &amp;</type>
      <name>DEFN_BIN_OP_T</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aac9c9c0e73c76773dd5457a60bfc78ce</anchor>
      <arglist>(/, div, const sc_signed &amp;) inline sc_fxval operator&lt;&lt;(const sc_fxval &amp;a</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1c2002e397c5d3df3ec72cc3cd24e7eb</anchor>
      <arglist>(const sc_fxval &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a807d44a1bc74c1e361dbb894b4af096f</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxval &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a31a9a495d590c38c61e6e0e0c29dfa8b</anchor>
      <arglist>(sc_fxval &amp;c, const sc_fxval &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7a2c87c2e7128180611205e1204782f4</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxval &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad54d02f64ef58a224d6813efc66d2fbc</anchor>
      <arglist>(::std::istream &amp;is, sc_fxval &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neg</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a04da20360528ce2fcc03e05ae859d35d</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxval_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9f4829d85ea01e56723899a208623b08</anchor>
      <arglist>(const sc_fxval_fast &amp;a, const sc_fxval_fast &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9c65b9c54bda12b4108644140a5e06b2</anchor>
      <arglist>(const sc_fxval_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>sc_fxval_fast</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad0df9ae26de1d67f91736e9a4247865f</anchor>
      <arglist>(const sc_fxval_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lshift</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5e3592df81d5a22a9c59f3ae9b3e31f9</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxval_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rshift</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abc14ce12146bd4239bb5999e593d4d30</anchor>
      <arglist>(sc_fxval_fast &amp;c, const sc_fxval_fast &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae19af53d0197204e1fccbcb56a1f8e53</anchor>
      <arglist>(::std::ostream &amp;os, const sc_fxval_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aeabf5dcceb321bac81969ac5555ce5f3</anchor>
      <arglist>(::std::istream &amp;is, sc_fxval_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b_not</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aceb1e4e55b023f8ab6d1a531e4e16a63</anchor>
      <arglist>(sc_ufix &amp;c, const sc_ufix &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b_not</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7707d5e3a59012124dacabe28635d0d8</anchor>
      <arglist>(sc_ufix_fast &amp;c, const sc_ufix_fast &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scfx_pow2</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa63fb8186f45368abbacb5ea2184594b</anchor>
      <arglist>(int exp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uint64_to_double</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a24fe139e3129d25b9177241dca681fd8</anchor>
      <arglist>(uint64 a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complement</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a09a929a414f496ff57e4016e94d77ac3</anchor>
      <arglist>(scfx_mant &amp;target, const scfx_mant &amp;source, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa9043fd24fd8a5cc2c4ac46cec2da4ea</anchor>
      <arglist>(scfx_mant &amp;mant)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>multiply</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad17b71c62e289724f07f456700a7642d</anchor>
      <arglist>(scfx_rep &amp;, const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_MAX_WL_)</arglist>
    </member>
    <member kind="function">
      <type>SC_API scfx_rep *</type>
      <name>neg_scfx_rep</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9b437bcd78e3dffa62477dd29ffe724f</anchor>
      <arglist>(const scfx_rep &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SC_API scfx_rep *</type>
      <name>mult_scfx_rep</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a70de1bc614895af1132445c550a61a97</anchor>
      <arglist>(const scfx_rep &amp;a, const scfx_rep &amp;b, int max_wl=SC_DEFAULT_MAX_WL_)</arglist>
    </member>
    <member kind="function">
      <type>SC_API scfx_rep *</type>
      <name>div_scfx_rep</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a751b4272676162d7eae7b990ed60c362</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_DIV_WL_)</arglist>
    </member>
    <member kind="function">
      <type>SC_API scfx_rep *</type>
      <name>add_scfx_rep</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6a44ea0cb9b3bb528854031e8ebded9e</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_MAX_WL_)</arglist>
    </member>
    <member kind="function">
      <type>SC_API scfx_rep *</type>
      <name>sub_scfx_rep</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac9ac5933c1cc3d22ac9333e644335eb4</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;, int max_wl=SC_DEFAULT_MAX_WL_)</arglist>
    </member>
    <member kind="function">
      <type>SC_API scfx_rep *</type>
      <name>lsh_scfx_rep</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a778b676d17ae0d5b03ecd4ca670d8ba8</anchor>
      <arglist>(const scfx_rep &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>SC_API scfx_rep *</type>
      <name>rsh_scfx_rep</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4182b7807312959eb7bc95a75e88ea42</anchor>
      <arglist>(const scfx_rep &amp;a, int b)</arglist>
    </member>
    <member kind="function">
      <type>SC_API int</type>
      <name>cmp_scfx_rep</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4ed16159b3c5fb16cf546bc79ec6871e</anchor>
      <arglist>(const scfx_rep &amp;, const scfx_rep &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>quantization_scfx_rep</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae0de0c2a3f5b93193136b4e229545ac0</anchor>
      <arglist>(const scfx_rep &amp;a, const scfx_params &amp;params, bool &amp;q_flag)</arglist>
    </member>
    <member kind="function">
      <type>scfx_rep *</type>
      <name>overflow_scfx_rep</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aedee9c1296e8602f54f946c2609db455</anchor>
      <arglist>(const scfx_rep &amp;a, const scfx_params &amp;params, bool &amp;o_flag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scfx_find_msb</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad060c75dcac3bff34aaad7566c504269</anchor>
      <arglist>(unsigned long x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scfx_find_lsb</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a67d1e070e7cff85c5c808d469162d06e</anchor>
      <arglist>(unsigned long x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scfx_parse_sign</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a395131cdd634e91be42cebea8a21ea40</anchor>
      <arglist>(const char *&amp;s, bool &amp;sign_char)</arglist>
    </member>
    <member kind="function">
      <type>sc_numrep</type>
      <name>scfx_parse_prefix</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d77d34c773e6671de262ab48fb1f615</anchor>
      <arglist>(const char *&amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scfx_parse_base</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab57cc226d2e1dbc481e59f0411d305ec</anchor>
      <arglist>(const char *&amp;s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scfx_is_equal</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a536b6b070ed4b614b8dfc9a5cbed8144</anchor>
      <arglist>(const char *a, const char *b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scfx_is_nan</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3c9d47d97ab0c1a50bc186bbcf55804b</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scfx_is_inf</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a16c2b3ec391561205e471a2cdde5df32</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scfx_exp_start</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afb5534e36031b78f84c0b7c425796bb0</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scfx_is_digit</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1a70667adefc25d20dc089f8ed320ba0</anchor>
      <arglist>(char c, sc_numrep numrep)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scfx_to_digit</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8f4dbf3f304359315fc31cb12f1eb1cd</anchor>
      <arglist>(char c, sc_numrep numrep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_print_nan</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac6a45c9eddf266f175cdf8633b368ba2</anchor>
      <arglist>(scfx_string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_print_inf</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a31ec84c4d33e92f314f8627eae2b7f96</anchor>
      <arglist>(scfx_string &amp;s, bool negative)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_print_prefix</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4ba0eeab8fbd76ed63d8bfcf36fcb3a1</anchor>
      <arglist>(scfx_string &amp;s, sc_numrep numrep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_print_exp</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6759f57610516dc3ef24f3f701940fdc</anchor>
      <arglist>(scfx_string &amp;s, int exp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_tc2csd</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a127e274476a2d0d37b99d473cf143d4a</anchor>
      <arglist>(scfx_string &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scfx_csd2tc</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a582fc0daca35ddc7d2d8d65e940e5e20</anchor>
      <arglist>(scfx_string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_dump</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa4d28145e41a0743c05ab19bd490726b</anchor>
      <arglist>(int source_hod, sc_digit *source_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_big_add</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6b28af8f523dc5ce0e6b5ec44150ee70</anchor>
      <arglist>(RESULT &amp;result, const LEFT &amp;left, const RIGHT &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, true, WR, true &gt;::add_result</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4251565fff87c3777e1f50c87576695e</anchor>
      <arglist>(const sc_bigint&lt; WL &gt; &amp;left, const sc_bigint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, false, WR, true &gt;::add_result</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae8b131197e3ccfa376b511c4c8ce181f</anchor>
      <arglist>(const sc_biguint&lt; WL &gt; &amp;left, const sc_bigint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, true, WR, false &gt;::add_result</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af278f38966c34c88b9126be0e0443b33</anchor>
      <arglist>(const sc_bigint&lt; WL &gt; &amp;left, const sc_biguint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, false, WR, false &gt;::add_result</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a45617016dfa8c7b092e3c46c9816ea08</anchor>
      <arglist>(const sc_biguint&lt; WL &gt; &amp;left, const sc_biguint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_big_and</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a42d63a6d02d087c99229759873201525</anchor>
      <arglist>(RESULT &amp;result, const LEFT &amp;left, const RIGHT &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, true, WR, true &gt;::bit_result</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7174aebbe8ee283dc8073d8491426464</anchor>
      <arglist>(const sc_bigint&lt; WL &gt; &amp;left, const sc_bigint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, false, WR, true &gt;::bit_result</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3ae190cf5f0f1b59bfbdf3f639880bc5</anchor>
      <arglist>(const sc_biguint&lt; WL &gt; &amp;left, const sc_bigint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, true, WR, false &gt;::bit_result</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5e10f790a5c7c3ca5fb2b48e169d88e8</anchor>
      <arglist>(const sc_bigint&lt; WL &gt; &amp;left, const sc_biguint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, false, WR, false &gt;::bit_result</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0445cf7656fb0a57e6b80d39836e176d</anchor>
      <arglist>(const sc_biguint&lt; WL &gt; &amp;left, const sc_biguint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_big_or</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a001ec68d721b6cf0095d2744fb9c0a12</anchor>
      <arglist>(RESULT &amp;result, const LEFT &amp;left, const RIGHT &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, true, WR, true &gt;::bit_result</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae647d36c2801733d88e19df0a1c1a190</anchor>
      <arglist>(const sc_bigint&lt; WL &gt; &amp;left, const sc_bigint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, false, WR, true &gt;::bit_result</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aba1dcbe3f11ee6d86c334c242b69353b</anchor>
      <arglist>(const sc_biguint&lt; WL &gt; &amp;left, const sc_bigint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, true, WR, false &gt;::bit_result</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a33d97e70dca2d3e66d18438f52078d81</anchor>
      <arglist>(const sc_bigint&lt; WL &gt; &amp;left, const sc_biguint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, false, WR, false &gt;::bit_result</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8196323711fa06e199138a63f5dc8747</anchor>
      <arglist>(const sc_biguint&lt; WL &gt; &amp;left, const sc_biguint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_big_xor</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab23a4a1b000e8f49a1b9b3971b6789f2</anchor>
      <arglist>(RESULT &amp;result, const LEFT &amp;left, const RIGHT &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, true, WR, true &gt;::bit_result</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae4ccb0acf6e897fcd00ce618c20690f4</anchor>
      <arglist>(const sc_bigint&lt; WL &gt; &amp;left, const sc_bigint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, false, WR, true &gt;::bit_result</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0b698130ffc1abb4c42c29e37a4f127d</anchor>
      <arglist>(const sc_biguint&lt; WL &gt; &amp;left, const sc_bigint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, true, WR, false &gt;::bit_result</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa29df0bc0127f2466ffb792e8acc2445</anchor>
      <arglist>(const sc_bigint&lt; WL &gt; &amp;left, const sc_biguint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, false, WR, false &gt;::bit_result</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9fe28b08b92806947766017d4649c07c</anchor>
      <arglist>(const sc_biguint&lt; WL &gt; &amp;left, const sc_biguint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_big_divide</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa64a2cc18038ef7da7b08c3935b4f925</anchor>
      <arglist>(RESULT &amp;result, const LEFT &amp;left, const RIGHT &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, true, WR, true &gt;::div_result</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a34239f6ccfaffef8ab48dc5d55eebda7</anchor>
      <arglist>(const sc_bigint&lt; WL &gt; &amp;numer, const sc_bigint&lt; WR &gt; &amp;denom)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, false, WR, true &gt;::div_result</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae427787b11be355aa89852d0dfc6b318</anchor>
      <arglist>(const sc_biguint&lt; WL &gt; &amp;numer, const sc_bigint&lt; WR &gt; &amp;denom)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, true, WR, false &gt;::div_result</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a33817db95fee9e5a7530a0b840b013b7</anchor>
      <arglist>(const sc_bigint&lt; WL &gt; &amp;numer, const sc_biguint&lt; WR &gt; &amp;denom)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, false, WR, false &gt;::div_result</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a688b42d218c4fd12618d06a6707324ac</anchor>
      <arglist>(const sc_biguint&lt; WL &gt; &amp;numer, const sc_biguint&lt; WR &gt; &amp;denom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_big_modulo</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8c8535458d1e14b685db1c4386652f6a</anchor>
      <arglist>(RESULT &amp;result, const LEFT &amp;left, const RIGHT &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, true, WR, true &gt;::mod_result</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6746f5793a16a44ab1e8891fe5f5ee78</anchor>
      <arglist>(const sc_bigint&lt; WL &gt; &amp;numer, const sc_bigint&lt; WR &gt; &amp;denom)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, false, WR, true &gt;::mod_result</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a36611422c6a08b67824c1997ab2d87ed</anchor>
      <arglist>(const sc_biguint&lt; WL &gt; &amp;numer, const sc_bigint&lt; WR &gt; &amp;denom)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, true, WR, false &gt;::mod_result</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6fd7c68be799754f42bf369b6225e29a</anchor>
      <arglist>(const sc_bigint&lt; WL &gt; &amp;numer, const sc_biguint&lt; WR &gt; &amp;denom)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, false, WR, true &gt;::mod_result</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad6b31d32bb48d83dc358c51a47649eee</anchor>
      <arglist>(const sc_biguint&lt; WL &gt; &amp;numer, const sc_biguint&lt; WR &gt; &amp;denom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_big_multiply</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad234a777e8b4931f3f95e5a4047f93f1</anchor>
      <arglist>(RESULT &amp;result, const LEFT &amp;left, const RIGHT &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, true, WR, true &gt;::mul_result</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adfda12658fea797711e6339875455ebf</anchor>
      <arglist>(const sc_bigint&lt; WL &gt; &amp;left, const sc_bigint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, false, WR, true &gt;::mul_result</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae6056d72d739e2a90be498dafc302c82</anchor>
      <arglist>(const sc_biguint&lt; WL &gt; &amp;left, const sc_bigint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, true, WR, false &gt;::mul_result</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4be1dfc00125d6a94eb9345883094adb</anchor>
      <arglist>(const sc_bigint&lt; WL &gt; &amp;left, const sc_biguint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, false, WR, false &gt;::mul_result</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afcbce3c06fa36bc75c05c24fc3cdd553</anchor>
      <arglist>(const sc_biguint&lt; WL &gt; &amp;left, const sc_biguint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sc_big_subtract</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af0d7da9ab3121a088e3ef4c2fb77e5fd</anchor>
      <arglist>(RESULT &amp;result, const LEFT &amp;left, const RIGHT &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, true, WR, true &gt;::sub_result</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7030c1f68464ee580c3ca992df33726c</anchor>
      <arglist>(const sc_bigint&lt; WL &gt; &amp;left, const sc_bigint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, false, WR, true &gt;::sub_result</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4bb7c71118ff4f766295a79804657ad3</anchor>
      <arglist>(const sc_biguint&lt; WL &gt; &amp;left, const sc_bigint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, true, WR, false &gt;::sub_result</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4f23a307371d2124d31101e086ebd898</anchor>
      <arglist>(const sc_bigint&lt; WL &gt; &amp;left, const sc_biguint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_big_op_info&lt; WL, false, WR, false &gt;::sub_result</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af1061a177e3585bebb47f877d67f59b3</anchor>
      <arglist>(const sc_biguint&lt; WL &gt; &amp;left, const sc_biguint&lt; WR &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a52b8e52f2a13bfb2b5cca397e5afc26b</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aebe2864ca0d95e72a56d849fbfae788a</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a79b4a602c7bb291b498f301e39bc1530</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8d64c7d8fd8762c112ae46f211503f77</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad86414a8d27d2afdcd786263470ec367</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0f7fab02514c9a007eb3b7c034b799bc</anchor>
      <arglist>(const sc_int_base &amp;a, const sc_int_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5dacb064934221d9739d26eb79ad2435</anchor>
      <arglist>(::std::ostream &amp;, const sc_int_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a99dc1fcb8cbcfcc9b4573ce0b4a43b8c</anchor>
      <arglist>(::std::istream &amp;, sc_int_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af250861c4d32efd36f06c371094bc84a</anchor>
      <arglist>(::std::ostream &amp;, const sc_int_subref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7e91f3bb8aadab2174910a7241430ec8</anchor>
      <arglist>(::std::istream &amp;, sc_int_subref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5319026c98ad4c8709d46d71f6853218</anchor>
      <arglist>(::std::ostream &amp;, const sc_int_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a390ce01ad76eae1166b0bd17de43112c</anchor>
      <arglist>(::std::istream &amp;, sc_int_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a67f370080f954dd2800d815e8d60e2bb</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7bdbd2a8fd306ecd9489060b5e864158</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa252e6366ff6f6fcf4c0e7dc602691c2</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a68efb66b2fa515e736a330ce1e3ad1a8</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abf2bb45fa6058e0efd14d9e8910ad528</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afdae976a89c3486d7ed31a602365061a</anchor>
      <arglist>(const sc_int_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2101f276e1032f6fdc800bd264ac30a5</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5b36262df9731c8c89dec5c4c2e4f7cf</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a89a7968ee39893c9d1b23d202ade4cc6</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0da1abf56530e17137eda7c30bdd3ddd</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aea04231f49b7604846c402ec5b67d084</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8f41c1b52975945aa86d1e982e684137</anchor>
      <arglist>(const sc_int_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SC_API bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5e80b1727959387741abd575d52067b0</anchor>
      <arglist>(const sc_length_param &amp;a, const sc_length_param &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>SC_API bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a14382086c4d26b5e1e6bbacd15d4f746</anchor>
      <arglist>(const sc_length_param &amp;a, const sc_length_param &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3224f22e8d6c2d681d721fe4a8f8aa81</anchor>
      <arglist>(::std::ostream &amp;os, const sc_length_param &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>parse_binary_bits</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a44d371ab207bac8a518ea1b2d47d136c</anchor>
      <arglist>(const char *src_p, int dst_n, sc_digit *data_p, sc_digit *ctrl_p=0)</arglist>
    </member>
    <member kind="function">
      <type>SC_API void</type>
      <name>parse_hex_bits</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a32e44cabdece23642983435964f58040</anchor>
      <arglist>(const char *src_p, int dst_n, sc_digit *data_p, sc_digit *ctrl_p=0)</arglist>
    </member>
    <member kind="function">
      <type>sc_digit</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3678e6dd6f1ececfa99a4ecaae1c096e</anchor>
      <arglist>(sc_digit h, sc_digit l)</arglist>
    </member>
    <member kind="function">
      <type>sc_carry</type>
      <name>one_and_ones</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a945932f066d1b2f078fdb228ff542d06</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>sc_carry</type>
      <name>one_and_zeros</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5580f565a0e2a643eb898ef44e98bfba</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>from_uint</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a574898cc8e46dfbe5f10fc9ccb0e9fbd</anchor>
      <arglist>(int ulen, sc_digit *u, Type v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>div_by_zero</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac3160b2aadd5ced8617ab79fbc075701</anchor>
      <arglist>(Type s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trim</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae39d90eee9a739f9a056e62c5ec4ee65</anchor>
      <arglist>(small_type added, int nb, int nd, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>safe_set</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7e918b0b135007df6bafde052f01146a</anchor>
      <arglist>(int i, bool v, sc_digit *d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nan</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0dec71a35d5224dc94e0843bd5ee0a9c</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inf</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0a04862b3d71c219a969e30e50b53bff</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>is_bad_double</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8009343f22a641b2941c1ff23bb4fff5</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8a5ebaebcc121b358abf4f43d53ae111</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ade732476893f3ed0defaa4f91d9234aa</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af3e3a7882415d48272128f0fb3be5ff6</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa906123942560e156eb9ec54aeb71b24</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2e933c9a737a546b7c92480bc13fc457</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a27d21d553bcf6c63c63ee7c79db86157</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abe6e4892af63492b73b349325a7953d6</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a60ad710017826549cc1dbda66e531403</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad4998883be2f6f17c8d1a5a5039a9059</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a71290fc83bd317336159d9522c1400f1</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a927656a5ceb07efbac89b571948dd7d2</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1f61ff1b1e82356d419dfb7044b21259</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a02fc6cb70b845549a9d8ad086b43a3a7</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a559e88fc8fa77723c7dd2c7d1bbb11ea</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4ea33c2b61b354fa32cff3857d29eb25</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af123255225a3b17b7504ac04fc520da5</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab32a4699623e834650c98ec95012d867</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a74e140565fb2c7e48da1332c00f0ff26</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac1948393eb627985f21cb22772cef5f1</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aaf0129b0c3b3965ac7692db289d5dd16</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7111d93c16fb3a397084d5d90b33bde5</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a29b40df1f0524d0f0e198a1f60218af9</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af87caaa5f09e069726dae272155fc530</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3944e3051ffa514ba5ce2d5f6d59d0e0</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a40fa50e4c6501407829d8e1d9f3c2f99</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad6d895896e771e8a5340c94360e0c780</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afbfaf0793e49fa6952304f3ebc7a4362</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aaf956ad2dd9e59aa9820aea0b08091fb</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2b3fcf1f87d07c9b840b1f5e0ae50b73</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa61b895cec92fc71d75e7454c3254f71</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abb5c04f81d077ad07b861eb6e9206110</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9ba04de111346dc184d28569f1324657</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aaf30a4aa1896b094e2654281a5aa2516</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9a48c4d839f020007920f1ab8e335d7f</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2a1570d12046f7f72a49af3c2f281b43</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab76c4832cc4d43721479f6b86018495c</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1ea37abc4ea3b76727b6177c15f3c139</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2f414b082e94f420f1f9f404643e4c62</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab9b8cd622cdf037b21f5fa57a71c6086</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9f7f98c5b2b012a7aaf7e62632ed0c9e</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a89a50fcfe364ef8d0c9c558feefd76f5</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac6e855f5dc48787cef9f7907a0a4e5f4</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af2c24a54502702278a35c09cc48033cf</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2d0308755a5043f7baf27a53f6812ab5</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aee4c7cc578f2ca63eda7e059bc0eb86e</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6512b951f53af1a06e021e9e6e882ffe</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6f3be661da19c4fd0a6dc3efa27ac266</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0b37a5c206a7f1b46b0847c54ae82170</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adabbb9584acc9b1bec4ff5ad79b21426</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0c80b08845d027f26e0e3f622053f3e2</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa43e3223e3ebfced282180c7f57924b8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a61796fee9fc2850fbf6adca93c651646</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad418102a775bffc790273e6ef8b2afca</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a066b2e433cccf85c0ba9d674adc28854</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a122c6ba71ee8b52f59efc11bc5a999e7</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a74261e9c7c41e0f2d8fb8505ff526f5a</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2a57cf548bfe6128f0e485cb5f4a6e80</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abbf78c98dd312f6bb45700147efceadc</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aab09ed995155ddf65025c5de93cb944d</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9bbe71ed63de741897835786962d12a4</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab0c7611b98d5d1ea37399f00803c7184</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3d2327d002bc2471a767ae33eac8880d</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1d0c7af763f077b08d022e0651d62521</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3c7dc2fe848bfbc15c47f6b30b226cd6</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a52dc53242cc70560795bcc10afd68ff6</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af0a121650ece2df71f7d2e2f01e9db4b</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8e32cadb98a8e6b4d03e7cbd083bf8ef</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7f16a36f1a3b4369e5a5d3e90535874e</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0e52bc0eb45a470b32ee5131bd8c344f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af904eb81adbb37aec9b2ed540ddec660</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a591292d8db5de8203511b4bbe9422f2d</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac5e589004b08b3d976ee7e0380ac2f5a</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2daa24417b7abd74513cc76bf95a69db</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a295d332aab8bb248825c2c9213a899a2</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abd92c847577c19ea4d0e698e1a49098e</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0a3bfaf6d241e1b486a720f6a6f1af23</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a09e88cd0948a334eb1100ad3a2bc464f</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abbdd132a2725dd383ab1129dcf1c0893</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa517fbb2ba5e5abb5b9404276fcb7c74</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6b47811373462e88b26eca40f294945b</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a83c8697d5af0f6bfe86f9ba3a8dcfd34</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae64395538ee8b5515fb68b4d34f589dc</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a49856756a74bfd36c1ad6b6d52381f24</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ada9dedfbf66d1e03d0f7d324ce0954e4</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a436c6dd699416825ae710c253a771e45</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a13fd8482c22327a7273d6747c6b6a9db</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1106b0a94e6f4faa3d2bcacdb36c023b</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a574091c00872bc62e98486df7a92ac7b</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a157b74589362ec91ab81d7d271cf66c1</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0e8cb119a458f7c66192bf7203a59853</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>acea6192eb8b510b4ff1841b9ddd0134a</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a17e53bb55ac88ad5197a7535081f809e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a93b7dab84b517b5d7d299146a329cb52</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a645141c77b8b2c0734084b27e2875a68</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aac622d954072aafc31ab23eca23641de</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a23bf317588266ec0d9388657251dadde</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>affa27614949033774c34a13c33e77829</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a36684576b2222dbdbf3b1579a88fbb81</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8330aed20693a6ecd2c27912cae9e412</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa9946bf0edd2f7556f9c1a44a68d81dd</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af926ab920c76bc64fec05bcee548d2ad</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7ab12281765df8abf0edb9fe3fb783da</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9d32be39787f18366681ba023f679b6b</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab1d9685e22a64f78c891d94e911ea04c</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a156e23eb1be70647e0567e9ca2133c7f</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a137d21d2eab0c3f71ae8c40cc99c68b5</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae3252e2ca0c9a6afed686dc0af4e8512</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a80611cc168a56223edbdffb8139cebf3</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a433143115c214a9c6f39a281b3f167a1</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1960b99d8e510eb786f9df8e597ded89</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8d736ac0b9feb278fe31fd8bb35663d6</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aaaed7218523322801dd60383a20323d6</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a43682795dde2ab573e2dc9edcc7ba73a</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab51c4b789123d1b83a8e60cb047b044b</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6f754dc5be4281f1220d95ad7ffc1df8</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aafaa4de3db3b63388675fd04dd16b667</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>acec2b832337c2bcfd54187b439b746f0</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af5c47957a1e605a0035dad1aefbfc0a2</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aaaa7ccfecd9f527e4bc1f3e1e7e51998</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab3acb5b62bfc205d7b0efa0c8c58531a</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2aadbf88f114bcb6fa5a01433766c49e</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3a458b29493b6e6ad7c5a4abc76247c0</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a374153852c17a06d8485983b3e433305</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abaa49297cb6467b769c1fb30239cbcef</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6b56aff43cc47abe64f6e0b4333b94eb</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0092e44cd9d1539e6dedc9c4a82e0409</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a98cec3dff69c66e7dbb7463feb4a5522</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4a25ab8e5f54efe4dc4c10155f3ec9c8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab89b321aa213c94070242f2a55487602</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad316463f984b225552ccf28845a07cb1</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4956e17535bce1903d57cedd2841081a</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>acf94ab5bca2ca703825f5c9d2b7ed6f6</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6588088b1be984a8ac24b4e4a11fd157</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afc4e06f5d4c30c3e69ddd11435ea01a6</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad596de875881c650e17dbb8b05627f54</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ace563d77925095cb3f1b6d5f43830569</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae68c2c6723baf9a2b4189e7176ad6efa</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>acb25ca525a192e18bba40a6ed67223e8</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a65fba56dcc2b22637fab352334632535</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac88bb506e9f7fb6662c590ff001529b0</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1d336d1d2449adddb590e8ae106049fe</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2a405bafb1b998d104376c8ce88ad7a3</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a46b8c659ea494cd52d127eebaa172c88</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a488bdca116291bdc3dc19e131cfd3960</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab62dd38b395e05f52b045c14f107169c</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9ce6cfb836bc8f35423ce46df4ac0a66</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3a4be195bcb30c5e1f13aa4e81bb5189</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aca026650783a039f8ad78d020796dc93</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab09e0991e6e8f786812d8fd51c2e30df</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab260ef54e7c2e30f1815e0070180a074</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad2332dc6ad1bffe3c70d41ced9f44f76</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a80a58ec5ec6ca9967932bab716df0617</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af40530023bb558667382b13ea329a633</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8c73313e000ee7a3ba6b7f76da6d77a3</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a68915f408cd9fe3f27f027510ccfcd05</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa2a01a4b49241bf6ac020fd49de9213c</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a670369d4e7a59eaa55424573046b81ef</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6cc7d8639affc8b657d850529d449f2a</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a816871f75d21a67607d9d948861ed92b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac0a7b07f78bbace4e60b70b765b314b9</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac3dd43c5b8846cd193ccd630542fd9d9</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a51e3025be27391cc9db3ad26a2b8448d</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae33e97b9be643d5528a70c9fedbaf8a5</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abf8eb261eb44dfcff842c52c85745bab</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9c30679cf269fac7b993dfb6720ddf67</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a847858ff4cec90245fc6ae7d590a09d6</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a780f291a4dc43ee0ecf1d2f2beb6336c</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a433d2fa95ed076b3a1b38995d643d249</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad4b7976c1129f50666d8ee6c18c7848e</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4be867890bda39085e6d2a4ab1b31585</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a85e974eea688161c986d49b5f36a3fba</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a354304df47e399b411ae2f6c80d135c6</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad5fe60c1b4b57f16cff3881d1916b2f2</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2e475e62fffa595aa59b85c781d2333b</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4eb7201609b78794faf96abf49d82d70</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a43054b6060705565e4dee47499d51eb8</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a72f129dd1dfce19c1ffa9fb1fa66e9c9</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a96cbc1b8cbc70794c971b243a94c50b8</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adfadc9e53779f17c05a17d4763149b17</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a462f6ee420d1c41c816dcd6c75186e93</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abf177423dfbb343c1d42aaff4c81514e</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a775c22928efd67ab5c10544cd51e65c6</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a31b40b06e87c06d56a7e7ad2d95ee567</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac1548743ad7841191c07773bd199248d</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5dd367404a371cb58bba49bd21cbb131</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9ec3a349c78bd84c232db9f218d51627</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0c6398c0785e201520533802ddd8dfbe</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3002660e920c6d977313fa464e55e925</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aea5848e17dd5da37eb0742b9f76c3243</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3a484909dcfbb34585f74df43f4e1c9f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3b0b231da18a8db6fbc8a9af7214a793</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a88d6a4fd1a70f68718d74e380e8b034c</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af448fc3c6bf26b05b219d94a243ea05c</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad3537a9ecac732f5be6d95d86336b28f</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad40f7cd1efed16f57ca40df4c1674d84</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a175fbf3e0e5f5a4a5d57ddf0b3da92c0</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a061240521a0f04c0d71c320a84be2830</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a07f1e95c083b486354b4b3d2d5cb4817</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a047a48f94e5adab22235d5f46ed75b8d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa294428a913abc9f37238f3ccd104b4b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aecb65621c5db0d0ea32702b44ba8e979</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aad511bed4fba5b6f1ce62e82e2698eb3</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af1cd139770c1e96729c5880fb431c84a</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a11e4853a6b4e75531fa86a5f66acaf41</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac9d2cbec3e8edf5ed622867b86a484de</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a569bfb401b59e23823a2c57b6bca6918</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad114ed9491416f495b596d7c00c4d550</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abe09062d67eaaa3f5767abd72dd0f731</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a572c048fdf44840548d2b16971a13f54</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8e58f7e40b9104747062c01b65bda79b</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a13b10245babd01b41c86b5d547e3d949</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7929cb947a4556ebafd056f757de72a5</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6cf8345d83abd9518e14fd757bf88b30</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a88f159aaabe55603d9b693b8f16496f2</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1a7c942e2d8e0bc59250bfc1a493500e</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af93d6477d099981c264067d525c0ed6e</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adcd16aca453247352bfc1ab6f9ced00a</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a025f4bf6e82225618dc09e2f4197a71d</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a82e6e33173e644bae377d7b46bbfca1f</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab20800451138782844fe894f75bdb487</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab9b232fbde028ae86ae4e9057682258e</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad2e8b28836a724b47facb73aaa2440a9</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3b5095ce28377d3db2d8ad96b09402de</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab9b1be7b3ff471e29f793849ba78937b</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_signed</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a516325a2c46b2ae3e6d16586f3b9209c</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a30f571f264256a26c9619f586218ad94</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abf732efc4a0383907535da4bb9b5c1a8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a520585e53f8599df31ccd4d6f7ff01e7</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6a606d2fdb58536c2e312f2a22e1bfc1</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3db09a82c3ed55be6f402c22c7028f27</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa2009621d822a07c4a3c6bc0891ad380</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aec35ef3e4609214ac91d9b4aafa0f20d</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa0e96fa1c92cddb01a2046b90ff2a872</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a252578962da88589e6134c8fc39397c7</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac02affb267c837be89d6c8418aa329f5</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af53742e75989b00641a5fa62845c4727</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3daad34a5a0f3e828b620f4702bd8863</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af4aab254a440d0412a4de8fc786c5a85</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a87a7b469baf8af1df6c6da37ec70d6c5</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac1e47879c0b1b8248c707144e50e3392</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a571a3e5c445321f7ac96f7118b5103d9</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afd1916b35b6ad5154cdbb3a3b71d448f</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adfcd09e82054a0e3235b9b4569211a16</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0f631ba44c3a8f2cd8cfa446e2030135</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a976817503a61038bff8c1a4eed3a8753</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa465fdbdfd27082f6b31afab6a906a11</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1ca58b0dd043a84cda447cb79872271c</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a82aa2335bd03791a2bd151ddccf5b129</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3634e71d230dd66503bab47db3afc56c</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a153d0c76ce0017310f26a248e0ef4771</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a95db8b1c13907d4c650e6518100f5e93</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d7a81b574d24a93d7787d7675de40af</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adad08794c1f1a3b589b9f153fd2a7320</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8baa0b53b6b5f7d85a0c16d11a4a5c0b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aeb9c93e06c6e7654ff56d743f3df8368</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab68179823e7d14ef6a2de08b99e077e6</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>acd2f30620660d60cfe13acd90e698e89</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1d9ba9ac2099e322fe0a42810d7a651a</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a88148b4757ad113e500e6068e12fe938</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6ae266d22b7e1056ff69b1635c7cb6bd</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab9f9b8770e935ec90eb0653e561bef66</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a62af4dc06e1720a8100bc3e57f5c75c5</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9cf65f9356fc465c04a55d760d9c7dbe</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7d99f16f107a12c839c11cea046d99e6</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afec38b82af962d11bc180298523e29c5</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5aae203b22a18c00fb3e2ec38c21582d</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5d9f898ee7d3b3b8e0afded665000ed1</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0e9e1bb6bf69a9e407742a44ff084b9b</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad217a31aa21bfc877919e622cfe86a6c</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2a2b3350becea4a3af2ac400b9b08445</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1ee022facbc29961eb7e13e1aac35906</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a37f29a52bb7d2a70d4ed7b53d293a4b6</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3352d14353f6c8e229e983098dd5fc56</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aec5e0b0bbc2059a59b17718d344253e2</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a981700214dc56a8c950bf11d7f64c51f</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6c8e687a61d56fea91e6fe66b0c83dcf</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a05ac389f6c50ef2c96a1d81ace3f9fdc</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a48b2f6f3574c27e62a664d33b536be9f</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a397bb54479bb3a2b246daad6a0162c42</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abf46f6545541e498924c78f626aaec42</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a10568cb22bfadbcd4dd498554e26a8e8</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae1f909f0b7aaf05245af806cbc7f1b3b</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af594cc60e297a3f34c5cf2e19a1f7834</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa770906231eebbe76cc4ffa387454bfe</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a33725a9d273bdfa642f816746b58dc06</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>acb3c9c66333cf5ab336f5a897200d88c</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0d5a837abce0d2e75b420cd6f70d10d8</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af866c0a277e1c47e34f81d04f3c854c1</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1e8bcb58dffd069ab8d9ea7d5088054e</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a927dd69cb2028208f4fbcf496a1146ac</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa270fc5a0aecc85af7b240396fbbffb7</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7965ba2604afbb819e292b0d7645200b</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ada7caf214b6254e5a6dca2b85783c5a6</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aef9b6abb468056514085bddc03ffce98</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8b4dacd0c2b4f9fa4b6b88dfe2dfd567</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac092fcac1e3151dcea7ea42ce5b34ed9</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7c6a67565dcd2ca042c99a7fc80d06ca</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3f2179898da480a1eeca73eae47d623a</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a50b7a9b3da010f5dc8bf485e3d35a42c</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a845d0bc3a46071dd0d494daf5d8a2562</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9964e0c341e1258d0b60e4657993081a</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae75f8a798fb1d5a5d0f2bd4a9257e3b7</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab5812f93e776020c81707d522b1be29b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a113063047043e8960f4034ca042fc057</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a14cd4c56f6fd90592cdad7916694a485</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2de50edef15fdd82a3e4d23c5c934c39</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aed8792a41fdf10c216ddf7403873417d</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae9d32106951c99fc931eb521856af8be</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a47a6643e089f482e6c054b54f2ad49b2</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a77f9b176c63fc1343ec5016daaf3ebcb</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aeb25208e41089875eccfde5039e54080</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa3cdf35562ea1f0c587d440d0da8f5ed</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac7109410fa295247b41afe0be88be642</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afe5ddfba14b2e5a8b16e1235e8363860</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab7dba30c4940b0d8f21ec070aba0238a</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac9c130b8f04e27dc970c3d101b377ecf</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab3900c341108f1051e7628223a96bb2e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af50eb800ec456d85ff2b81855bf8e9f5</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a715ecf2a073d408aab4646906d00d6fb</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abac845e22d23e60303bbc1f37ebeaaef</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a447105046d066f01f77681e32385840f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a42b86b401706dced896685c89df0db15</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a42eae054190735fdf26b9af32015f6a8</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a88012335319abc7cd38047e4bd370738</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a86d70efd9cc10d04d89c6322283a9c7b</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac5dca28f0073c8e5d60be2a956ea6207</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab869048a455aad3cda063d9fdaf35f3f</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a409f418b209b9fdb16926d320c772671</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3df939f9419130696549b1662d5ce971</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7f3cb0fe91299e3359d54ad9204bb8db</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8862fa3d10529b445b98adec1a77856e</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a583651dc7f5535ae485645f1151fcfd5</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aace7ae48e8770f63254dc9538d0b3dc1</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a835f6cad0a9060a4387869f99121ed07</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a61d02d0288567bafaa739b777839529b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aeb57f496c733fb85c2b8b93749138e81</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac188f7f6cd6d18956ab64c4b70951a93</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adb14e46593bf6bbb40c5f19ddeb017f8</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adab8b21985b7c06859e054b047efeb95</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a957b8ce464cd42a77485458a864646a8</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5d0a644910ef3dfb7f04fef0d4394a8a</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7cb79c495ebe262a078005ed8877abab</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6dc30f4f8c2c0e5ac6dd18189af715d5</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5c9d887f8703bccc8143b3e2b54a867f</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aae8f26702f404b1853da90c9d36aa999</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3f36545c55cea38c30b766e04ade11c4</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a13ccfd24b0be44841773e417ca87cec9</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa0851c762353b3560a76e0a19cfd5b0a</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a218f70f0ee7865214a662a0b2bfd3a66</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad9090304906b5833207a9eead706df29</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa3811a1852bba68a981519ca693f0053</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a44f9893052d5ea06ece012c83200c2c7</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a385dc0ca78a75efd3b671895a7eb3b7c</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5a91090037c1b1be9c222376937db575</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac351cba649a95be7ae76a6a2a6a892db</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a753cca41c2d989cc0e4450db44f97848</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3180cf7dec76849457e6cefa4d89d57e</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a785d83fdaa55e05626602329479064fa</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1edc82e778500d77b982e93427150562</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0b6bf26fde03a7c6d6700d4d540f00e9</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab57ccee1738e8c9a87e8ce8f9488f40e</anchor>
      <arglist>(const sc_signed &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa3d9609e40ded8b4e61f51c18019941b</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a451a7da7735cd70c69ba3e0a0d08a071</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac4704e69fbab10d445eb9643d36e5d4b</anchor>
      <arglist>(int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3c47985bd2fc1a3659389d6d83870100</anchor>
      <arglist>(long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9efd8c1b8e1271105ef7c082bf1b27cc</anchor>
      <arglist>(int64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1fb43be2b04a969a44760e5478e73903</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a36e196aeabab04866c8278290ff24c63</anchor>
      <arglist>(unsigned int u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3423bc1af3739b711eafe628279bfe84</anchor>
      <arglist>(uint64 u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2ed901f139c13f1d2c9d98a50a305e25</anchor>
      <arglist>(unsigned long u, const sc_signed &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab0b9d4f942d6d1280469da4c1f3afaa2</anchor>
      <arglist>(const sc_signed &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa795c91565dd6250e32657500918d846</anchor>
      <arglist>(const sc_signed &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8ccfe13d713dddefe55aaf60360e2f31</anchor>
      <arglist>(const sc_signed &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2bf9778141f2daddaa496220bc0cc74e</anchor>
      <arglist>(const sc_signed &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aea9b41be64082e4bd56a8ec71d7e7c9a</anchor>
      <arglist>(const sc_signed &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad4d354718790b3c3a9eaccb64d4934d4</anchor>
      <arglist>(const sc_signed &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1a12082a17a22a2c7f6a4a5e25883d31</anchor>
      <arglist>(const sc_signed &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a445ccc84ec44ab72c5158231744e2d68</anchor>
      <arglist>(const sc_signed &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af77e712066e5ad83badcd66feb9373bc</anchor>
      <arglist>(const sc_signed &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7b782dcf05f1193b5af05733481c4a97</anchor>
      <arglist>(const sc_int_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a60fc41fc34c903a4bde0cb2b09c4e305</anchor>
      <arglist>(int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af5e6d0d4ad5104f87d42f79636a5bbc4</anchor>
      <arglist>(long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa17242162cbe2e55cbc0b5c1122216b1</anchor>
      <arglist>(int64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a555fad29a639db470c928bbfe21eee6c</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_int_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4823c53f3db99b6fae49ea39037d2e4f</anchor>
      <arglist>(const sc_unsigned &amp;u, int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a89d0ad6e15de5e151011ad033e536618</anchor>
      <arglist>(const sc_unsigned &amp;u, long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a92194bc157f08db6a06f4d48bd59dbb5</anchor>
      <arglist>(const sc_unsigned &amp;u, int64 v)</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_signed</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa383bf5a963b8c2f4654f30d9ea9c298</anchor>
      <arglist>(const sc_signed &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa1040f372892223836d254b42d3fb538</anchor>
      <arglist>(const sc_signed &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_signed</type>
      <name>operator-</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8625bd66aef8a344dcff104543ebb702</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_signed</type>
      <name>operator~</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a55c8ab6867bb2ec6062fedee07d3ff17</anchor>
      <arglist>(const sc_signed &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac6551b802c1f82788c332691786cfdb5</anchor>
      <arglist>(::std::ostream &amp;, const sc_signed_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a583a9e5889adaa7b01e9e84f8cec3593</anchor>
      <arglist>(::std::istream &amp;, sc_signed_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a116071d9671307a5d43d1c6ed115894d</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a94d62dcdaa3330814556c6c5c03b6abc</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a72f78e654a24839006c4d1beb814c5e8</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa89b1dc554df2fb0d9faf0c5b4697a84</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa2a9fc8b2160032b450708c506092706</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a97086ad0db39eac3bbbd9d587a415da3</anchor>
      <arglist>(const sc_signed_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6c3cdf34ba14238ad5e4c8cbecf69052</anchor>
      <arglist>(::std::ostream &amp;, const sc_signed_subref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>acbb9e7a11318ad08488628787d7fbbf7</anchor>
      <arglist>(::std::istream &amp;, sc_signed_subref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a036a9b5ca361de1699eb27fc1b3bd322</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a089bd8e11101c83f74fcb9f701f71f5e</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afb434ad1b6bacf4169ac69823d2bffa5</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a507a5bb978549743456c5897099d19e8</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abf9e407de67b149c79125089da920169</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa4b755ae510c74aac8725d448baf519e</anchor>
      <arglist>(const sc_signed &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aec7b744b16c0cb8f8c0daa8bd3fa2183</anchor>
      <arglist>(::std::ostream &amp;, const sc_signed &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a74175e5390f018322d28904ee0f4758e</anchor>
      <arglist>(::std::istream &amp;, sc_signed &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4ceeca9c71703fadee5a77060a569237</anchor>
      <arglist>(const sc_unsigned &amp;left, const sc_uint_base &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9fb0f61a267f400c21ce6c71c243eaf3</anchor>
      <arglist>(const sc_uint_base &amp;left, const sc_unsigned &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3fb6bae19ca5d2616534bb6f98d9be3e</anchor>
      <arglist>(const sc_unsigned &amp;left, const sc_uint_base &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a49d73e8cdc1d03d25a0f4668a7c38eb9</anchor>
      <arglist>(const sc_uint_base &amp;left, const sc_unsigned &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6a1e3f442570959d39630c695939b548</anchor>
      <arglist>(const sc_unsigned &amp;left, const sc_uint_base &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae6801b87ef6729e2742e5741f54f5e36</anchor>
      <arglist>(const sc_uint_base &amp;left, const sc_unsigned &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a36e5699d99e6aa8eb84f4b5bebc18440</anchor>
      <arglist>(const sc_unsigned &amp;left, const sc_uint_base &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a344dfd067e676315920f1faa360990ae</anchor>
      <arglist>(const sc_uint_base &amp;left, const sc_unsigned &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a26d4240e8abc40131676485af7420404</anchor>
      <arglist>(const sc_unsigned &amp;left, const sc_uint_base &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aef7cd325c4cd59932f6791fcbc081a63</anchor>
      <arglist>(const sc_uint_base &amp;left, const sc_unsigned &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a518cccc40665a4463b7240f258c85225</anchor>
      <arglist>(const sc_unsigned &amp;left, const sc_uint_base &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a62b91009648968a128eb60ee1f9cbf1f</anchor>
      <arglist>(const sc_uint_base &amp;left, const sc_unsigned &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a135a2f50dc4f7f5810c882f12cb842b7</anchor>
      <arglist>(const sc_unsigned &amp;left, const sc_uint_base &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4e6547364e10a10b99d2dee3948f5ad8</anchor>
      <arglist>(const sc_uint_base &amp;left, const sc_unsigned &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>sc_signed</type>
      <name>operator~</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad2006fdefca2dac9f13237f7314652ba</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a43406b86ef66259e456891b3a0f788ed</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d4572459846ba9f89d5a294871189a3</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a512b1b0fd5242cc38c48a28ca2e89f49</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aba50061cdd2ee31e89749c46800925fe</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a92121a8fd116bbabf6336f0fa7eab888</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab2a4dd0ee86661ae9c8cda0ba2e44835</anchor>
      <arglist>(const sc_uint_base &amp;a, const sc_uint_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4e3ae86014565b49296c14cf414c0b75</anchor>
      <arglist>(::std::ostream &amp;, const sc_uint_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac1634e3c0e79a7ed4d778416c2e3a69a</anchor>
      <arglist>(::std::istream &amp;, sc_uint_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aef5027779ec3593e68e3ff32a0ec3039</anchor>
      <arglist>(::std::ostream &amp;, const sc_uint_subref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a64edd3a50c359d812856c97a601d0321</anchor>
      <arglist>(::std::istream &amp;, sc_uint_subref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2f79d9ff12cff1f5e50db41743e47bec</anchor>
      <arglist>(::std::ostream &amp;, const sc_uint_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a26e8ac638cab84e7f7c49724c05d1a1e</anchor>
      <arglist>(::std::istream &amp;, sc_uint_base &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a22eeccbf4d9c48639dd195211a769657</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5db8680f9b4a2b815fe733e78ae89e06</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aeade562ae63dec48ca4b7af20bb411e8</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0989c490343a7d848d46d33d84831a09</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac60f4dfc7ba1315cc229df7b34cf048d</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aee27e3090fac6203a0be06ed848609b2</anchor>
      <arglist>(const sc_uint_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aff1c3898ed37eea41a978eff67a1b3d4</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afcf17439e5ef462db824daa1ed155673</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adf04a62e64afa5e9935205eb8543efb6</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aad7d87d137b6eae57718d3bfdccd5811</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a686158e18dcfa7fcf2b421d69ad56e98</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1578e8f9ef9c87bed861ab8fbf29b74f</anchor>
      <arglist>(const sc_uint_base &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac5309120f762d753422ae078c6b845fa</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad1fc5877b4f5dc8e5fe4792057375bc9</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a611755b8714294c14bb1ffa84304cb4d</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac721fa1086363a999582e6a81fa827ab</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af96c53ca056909cd760f6df0f0038f12</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1d2af93180d6c1d95b84a76924b038a8</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aeb5432d9b0c9b3e0b4762cb36b144dac</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aeb08979d283ca55ed1573c9848c38bad</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>add3330256e18d40ea052f0ad58394ca3</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6043651777a60e5b34026de36d60d648</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a818c509efb515ee72f191af7b80f5cc0</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4706e6fca6a7617171700108e4a39788</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2e94ae0fa5b58ce678bf634ee31556a5</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator*</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9685706737fa5540eec9bac5f5bbfb00</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4016c2bdaf4e9198042051e8581b5c23</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>acb50c82b842bab7f24705bd73f2953a9</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2e2b0746c1886a891280f568a01da96d</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afb30da76f0b91a3b32afe15d30546d9e</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8b70af447776c2d4bd218951c34aa19f</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ade95aa18ebb759020139ebada7d399de</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator/</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a66768eb076c7191778d0efff38cad223</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a45c79af7b9000586d9a99c6833dd6555</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a77d95afb8e9a6e0bc25f1d0e21a8bcbc</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af980d9ecdaf7170cdb85096aabb3ecbb</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aad8816b337e30f1b2ec333072ad58150</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2bd47404304038ee02276ba0320d5eaf</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1b59b337afd8c0efec8bfec7943e699c</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator%</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac5cb4b8ae40ad18e8eebdaf0f9d6e366</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9354056715323071b8d4fb7cd969bdbc</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1f8ded3bb4b8a0b987ed9e3a8fd072a5</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0bef0202ca5ca6c4a6f4d89b2149bbc2</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a82d7ba9acd715231a6a323dd0345bbad</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a41aabe9eaa2f82f7712524cbbd01dce2</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4c9bd3c293e2d02f935672ae3cc49617</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator&amp;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3e9f92f7a14ea89aac393b1800e82833</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aedd25de4745bb8ec5158cd8d4ba4b2b6</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a66a2529f5efa9d001f0559c492cc4255</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adbfa039d4858e0f6990083c808779823</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae86edc99b2e7ae78dd61d4c7dd076e19</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a337633e06d7d413029c09c14823ace4b</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0cc1720e9e57faa231753db93a94c55b</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator|</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a939dfad387edffb0af61bdb45824c87e</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad49df0e191aa8a69145e2ce6f54306d3</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>accbf6534a25d7a1ef19a2242be9522ab</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad9b5b8865b79943c396602cb32f75e8c</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa5da9d1401522a99971455f610d6e656</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0c45991bbc6b4e04631a30a84b61502f</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ace0efd46f8279d0656b45facdd8d0f22</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP const sc_unsigned</type>
      <name>operator^</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>acd01f945b36eeaa8666298c9d349ea2a</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a84a160f0029f51dc6cbdbcfeb959b9bb</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adbd0edd5a3b9bdf085404eaac70b27ae</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6f59ba5138fecf201855fc9b9929436f</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae67145883c1455ea78383a39ac8cc0b0</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a824eb3b9a817c737f3e14e37511f9042</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab29deee2bdd25e1a7b3a04d2c67b9dc5</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab4def76ff630f1fcc3ba85d612dbd9d8</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0066a62b1ff2b908fd94413780df346b</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator==</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2b37d230c9b9d153ed06c03938a6d109</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a30faf1e33ed3923197a9e8a76ff2b452</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af40f0840e59ac107cd6a21524fe9ca32</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3a33ca786691add3a1c29fe2dd388c21</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a803dfacc8039a078ebef3b6952962745</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0c5786c8390bf527acebf035c1983abd</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a87f4c2f6e0c6f1edf3a56d6ecc590842</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae9435f3f0fd56838b2de389ff1509ed8</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a73de4e6f7f449fe208787c570072fdbd</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator!=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad9e5749731e6896243861c4835288103</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0e6311b245f3ddc86d63aed5c2efd503</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aeec0f2f9d7b635ac01cc23cc358b9f06</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a95d588210ef8cdbf394ebee1459d6eb2</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8aa0c2575b426cf55b906100b152fae1</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7c415da1cb75749035cfb67074fdf116</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a90024cbc4917989431bcc447f7265e4f</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a776390b3f3d604a97422ecd6529ece5f</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad25c3ab8b973bb82b4e9a0b26377e469</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a317a214fb21f3807088a84fe2e81b76d</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aba0bb11d53d75831cfdd9f0b750f4d92</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6a6b4e3f08437677de3de0edb9330668</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a72c5bb4992fecee74f58ee217a16e35a</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5ac02c74f647d8c5c56be350b142c5db</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa283b1f071ac2a3d5e6c68056b53a746</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0074954f1bfa246877bb2eb0009795f5</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6bccb10836f00dc1b0d73bc641e4ca57</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab7b23d0f1920f62c922fd10ae8b04c03</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a04781168a6492b8de0e24d97bf4bcade</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad3e7dcfe6e10d07ceba1e763e9f0c078</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab38ffc9dfca93ae1092ecb6dd96433b3</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1822229937b4a11d1c33f05d7bde01ea</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a181cbc06f9d08d61dc0f220469377c02</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aae6abc9a319194c92304dd3aba2f64a5</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a656e594a7072f838ac4cb33faceabda6</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad58a88b1e47614215122070f3f206eeb</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae487ee869d773eb293947326d32ac4fc</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9d021c964279942ceeb1b3df93638bb2</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a13238aa61a6533c7e5c335082765a578</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7fc49b18823b9dcd14f0c82fd585f130</anchor>
      <arglist>(const sc_uint_base &amp;u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3c81cba58034ecf50f522338119fa06e</anchor>
      <arglist>(unsigned int u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>add5f1bec8ee39d8a0be277820ea0de4f</anchor>
      <arglist>(uint64 u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af11fb6cb15fe675e067b3d9a0a6fecf2</anchor>
      <arglist>(unsigned long u, const sc_unsigned &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab68faa52aa6d2aee4e911fd93973bce1</anchor>
      <arglist>(const sc_unsigned &amp;u, const sc_uint_base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a27afbd9352119827fd899e74bea90ba9</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4cd25ae8835998f792214c4fd6dea494</anchor>
      <arglist>(const sc_unsigned &amp;u, uint64 v)</arglist>
    </member>
    <member kind="function">
      <type>SCFP bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7ca6b2f7abd1c222998c30ccaa7634d1</anchor>
      <arglist>(const sc_unsigned &amp;u, unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>SC_API sc_unsigned</type>
      <name>operator+</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2ef70e00467a599ba8219bf0a94a5211</anchor>
      <arglist>(const sc_unsigned &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa7f80f8d0cc9b3b09aace56a509d051a</anchor>
      <arglist>(::std::ostream &amp;, const sc_unsigned_bitref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4773ec05c9b003b4d65f4f93da69fbbf</anchor>
      <arglist>(::std::istream &amp;, sc_unsigned_bitref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a15f271f656a8984c5002d6686a07f1c1</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1caf212099fa875ac753382dc0f3842f</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a506f453469d54ef02fa1f5466a3150fc</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a35138fe2992efd722659a58a7f566536</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a85c1a93fc5452076d30420e97632c278</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a324cf35fc38329f8e895e69eeb6a2c18</anchor>
      <arglist>(const sc_unsigned_subref_r &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af43f16a060d004ef5cd1919feeb2a9c1</anchor>
      <arglist>(::std::ostream &amp;, const sc_unsigned_subref_r &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0bf8ced9b6741a252e1852a3e256ccc6</anchor>
      <arglist>(::std::istream &amp;, sc_unsigned_subref &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9e4875d06b6def9be4bbdf69004232a1</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6b1728df1b9a0de2cfbe22785edd296b</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a922527903a54e1e4ff0071a25dca48cb</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a793f4b813c95573ae3d7417bb29ed572</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a556cddcda4441f04f1c659a269eefc16</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a16a24919eab09d23a1c69cfe70f90f8b</anchor>
      <arglist>(const sc_unsigned &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3c57019c3e9aeabd37f511dc1b92cc0d</anchor>
      <arglist>(::std::ostream &amp;, const sc_unsigned &amp;)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2a56b836dc0f93138744dc0b13ba179a</anchor>
      <arglist>(::std::istream &amp;, sc_unsigned &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vector_skip_leading_ones</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6b7204d266f06bbbc6adeafc47490826</anchor>
      <arglist>(const int hod, const sc_digit *digits_p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vector_skip_leading_zeros</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2ee25a72b46db91996b85c87f3c762f0</anchor>
      <arglist>(const int hod, const sc_digit *digits_p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vector_find_significant_hod</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abb7eec62b8d14069763e789b1bbf1e0f</anchor>
      <arglist>(int hod, const sc_digit *digits)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_add</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a463fb97e93b049b077cb8651e5ce0bfd</anchor>
      <arglist>(const int longer_hod, const sc_digit *longer_p, const int shorter_hod, const sc_digit *shorter_p, const int result_hod, sc_digit *result_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_and</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aef5c3df137fcf5198f21795714884549</anchor>
      <arglist>(const int longer_hod, const sc_digit *longer_p, const int shorter_hod, const sc_digit *shorter_p, sc_digit *result_p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vector_and_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a573bdcad1587943bfe0ecbcc6036d114</anchor>
      <arglist>(const int bits_n, const sc_digit *target_p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vector_and_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a23d4850777082fdd82455dc67c0c11f6</anchor>
      <arglist>(const sc_digit *target_p, const int left_i, const int right_i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vector_compare</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a062679224ae88a696d2285f40b444d36</anchor>
      <arglist>(const int left_hod, const sc_digit *left_p, const int right_hod, const sc_digit *right_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_copy</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a804ce433d72e63198e138295747c11c7</anchor>
      <arglist>(const int from_n, const sc_digit *from_p, const int to_n, sc_digit *to_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_copy</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae98aa6409c83d5c41a93efd1a0d5572d</anchor>
      <arglist>(int digits_n, const sc_digit *from_p, sc_digit *to_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_extract</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a67d2c9b5723a3e230f5cc11b9f917c7d</anchor>
      <arglist>(const sc_digit *source_p, sc_digit *destination_p, const int high_bit, const int low_bit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_fill</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0ce13cbd9940d076b96c487ad3a76913</anchor>
      <arglist>(const sc_digit fill, const int to_hod, sc_digit *to_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_fill_bits</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3da5ff08d08cff98d2a5f9a99ed52675</anchor>
      <arglist>(sc_digit fill, sc_digit *target_p, const int high_bit, const int low_bit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_ones_complement</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6a6c2ac9dddf05c3d0ac4a99188e5f87</anchor>
      <arglist>(const int target_hod, sc_digit *target_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_ones_complement</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a01d1013199dcb55b3db8f59a9a63723e</anchor>
      <arglist>(const int source_hod, const sc_digit *source_p, sc_digit *target_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_reverse_bits</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab7e8f039bbfb58a356d95a07cfc9c0a1</anchor>
      <arglist>(sc_digit *target_p, int high_i, int low_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_insert_bits</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac9fcd7c632949eb035c1ccca7a5251e5</anchor>
      <arglist>(const int from_digits_n, const sc_digit *from_p, sc_digit *to_p, const int high_bit_i, const int low_bit_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_multiply</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa82ea2f20cd54a020aef959474f1723a</anchor>
      <arglist>(int left_hod, const sc_digit *left_p, int right_hod, const sc_digit *right_p, int result_hod, sc_digit *result_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_or</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6695c47afaae24b340a4870a9d553995</anchor>
      <arglist>(const int longer_hod, const sc_digit *longer_p, const int shorter_hod, const sc_digit *shorter_p, sc_digit *result_p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vector_or_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9d745b2f94aae10a5fc626d590e40fd4</anchor>
      <arglist>(const int bits_n, const sc_digit *target_p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vector_or_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5676aff89e39685778d990e7f5be3478</anchor>
      <arglist>(const sc_digit *target_p, const int left_i, const int right_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_shift_left</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad4b6864d02132c7ddecf67243f4ba6e9</anchor>
      <arglist>(const int from_digits_n, const sc_digit *from_p, const int to_digits_n, sc_digit *to_p, const int shift_n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_shift_left</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aed76a0fcd1cbbf3c588b3163036ffcf6</anchor>
      <arglist>(const int target_n, sc_digit *target_p, const int shift_n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_shift_right</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>add5bfc813129811e0cdc5153bd5f02f3</anchor>
      <arglist>(const int target_n, sc_digit *target_p, int bits_n, const sc_digit fill)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_subtract_longer</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afd40c987ab81b6995c7c7750d9282d31</anchor>
      <arglist>(const int longer_hod, const sc_digit *longer_p, const int shorter_hod, const sc_digit *shorter_p, const int result_hod, sc_digit *result_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_subtract_shorter</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a123cd51f8bbee26e20787f97e5f563b5</anchor>
      <arglist>(const int longer_hod, const sc_digit *longer_p, const int shorter_hod, const sc_digit *shorter_p, const int result_hod, sc_digit *result_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_twos_complement</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9722589bb90430e1038c0f18fbce44b9</anchor>
      <arglist>(const int target_n, sc_digit *target_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_twos_complement</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8eb448c3cb44809a4087c4b990d6993c</anchor>
      <arglist>(const int source_hod, const sc_digit *source_p, sc_digit *target_p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vector_divide</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aaf26c59fcd2bcedfa78427d99e83e124</anchor>
      <arglist>(const int numerator_n, const sc_digit *numerator_p, const int denominator_n, const sc_digit *denominator_p, const int quotient_n, sc_digit *quotient_p, const int remainder_n, sc_digit *remainder_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_xor</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a370bad2cb9c5693ade43db50a0768c1f</anchor>
      <arglist>(const int longer_hod, const sc_digit *longer_p, const int shorter_hod, const sc_digit *shorter_p, sc_digit *result_p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vector_xor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a980347456f31aa6a887c1abf80d0d633</anchor>
      <arglist>(const int bits_n, const sc_digit *target_p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vector_xor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a194f3fd33e32aa3538e7846c204cd384</anchor>
      <arglist>(const sc_digit *target_p, const int left_i, const int right_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_zero</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7435cadf0131a9aed3f3b514aae2b983</anchor>
      <arglist>(int from_i, int to_i, sc_digit *target_p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>and_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3b63945310f83b83ece57a904d03047a</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nand_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a225a0db712d929a6a9a3bf49e093d1dd</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>or_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a071c953a8ec70dc9bc9bc7a7f19b265b</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1865de7fb2f58a9dde27fb7db34a53b6</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5b3f982f3a65758dc783dbfa01f6aac6</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>xnor_reduce</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a0257198d05c106d31606deea7f2d8e15</anchor>
      <arglist>(const sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae686e5795fbefe6b3b97f64e522597f2</anchor>
      <arglist>(const sc_concatref &amp;target, uint64 shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a200a6958a66b4b7e48be78e4c3f6544c</anchor>
      <arglist>(const sc_concatref &amp;target, int64 shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4afedaecc0acf2113e7f71ef3b28667c</anchor>
      <arglist>(const sc_concatref &amp;target, unsigned long shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a07c19b61fa11e64f24121b539394a29c</anchor>
      <arglist>(const sc_concatref &amp;target, int shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4482738a647f09dc16cbd508c48a8d78</anchor>
      <arglist>(const sc_concatref &amp;target, unsigned int shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ac20e0ad62bf0181b49914fd3fdc42547</anchor>
      <arglist>(const sc_concatref &amp;target, long shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a3ff016d78e454c3f683de2bf44e18fb2</anchor>
      <arglist>(const sc_concatref &amp;target, uint64 shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae2fab2d7efae7aea5b8f59380743cde0</anchor>
      <arglist>(const sc_concatref &amp;target, int64 shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a56c81fb47e42cea717fb955411d786d8</anchor>
      <arglist>(const sc_concatref &amp;target, unsigned long shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad0f6798d896b8b8f514628fb0e926c4b</anchor>
      <arglist>(const sc_concatref &amp;target, int shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aea9af377b19f2962d083edcb1aa01fc7</anchor>
      <arglist>(const sc_concatref &amp;target, unsigned int shift)</arglist>
    </member>
    <member kind="function">
      <type>const sc_unsigned</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1ac1a12595cb38c1e2e1e2aab081dd9f</anchor>
      <arglist>(const sc_concatref &amp;target, long shift)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aca643759dfbf64cbb267a0ca42f37996</anchor>
      <arglist>(::std::ostream &amp;os, const sc_concatref &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a268bfbfbe7d29b2cbb40041c2d8289a5</anchor>
      <arglist>(::std::istream &amp;is, sc_concatref &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sc_dt::sc_concatref *</type>
      <name>temporary_concatref</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5a6f2aab236e628096d5a53d6f56e220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_concatref &amp;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8aa9deac35e8ee2e6f68c62cbcc5665f</anchor>
      <arglist>(sc_dt::sc_value_base &amp;a, sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8631bf2fd4ab437cdf59172ec4af28d4</anchor>
      <arglist>(const sc_dt::sc_value_base &amp;a, const sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9556ec522f0181c575a5312a9a127e9b</anchor>
      <arglist>(const sc_dt::sc_value_base &amp;a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>concat</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a14916c7753c58472b099a73608a43de2</anchor>
      <arglist>(bool a, const sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>sc_dt::sc_concatref &amp;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae16fb4c0d2273d0ce3fcb15aae0ecefd</anchor>
      <arglist>(sc_dt::sc_value_base &amp;a, sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a7e70c1051905efd590dfe4460c9048ea</anchor>
      <arglist>(const sc_dt::sc_value_base &amp;a, const sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad40c7432a09c44b19d83a6cc283b0e52</anchor>
      <arglist>(const sc_dt::sc_value_base &amp;a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>const sc_dt::sc_concatref &amp;</type>
      <name>operator,</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a97c2313994a1af16e073987a47f6b904</anchor>
      <arglist>(bool a, const sc_dt::sc_value_base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>sc_min</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6cb4684e5692dd4775e0ae72516a9c35</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>sc_max</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9581de8910dbf6afa1f540eba7492667</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const T</type>
      <name>sc_abs</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a70309af0a57c62146ef043406ee357ed</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>to_string</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a6fe94d1205dc903ae30475295a4d245b</anchor>
      <arglist>(sc_numrep)</arglist>
    </member>
    <member kind="function">
      <type>sc_numrep</type>
      <name>sc_io_base</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1f355c7597d7d5f816995e423793b673</anchor>
      <arglist>(systemc_ostream &amp;stream_object, sc_numrep def_base)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sc_io_show_base</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2233872176ec9edaa57c52b427954878</anchor>
      <arglist>(systemc_ostream &amp;stream_object)</arglist>
    </member>
    <member kind="variable">
      <type>class SC_API</type>
      <name>sc_logic</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a95112e04d7c739c12211dde79071eedc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const sc_logic</type>
      <name>SC_LOGIC_0</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a25005703c75ba468a44b9ea0049ca020</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const sc_logic</type>
      <name>SC_LOGIC_1</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abdf9e0f09e061d1555405455bbe82fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const sc_logic</type>
      <name>SC_LOGIC_Z</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ab13df6d63ebe69825d595166e6bd62db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const sc_logic</type>
      <name>SC_LOGIC_X</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a27ddf1f8f8c822de2e92b32187242685</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const sc_logic</type>
      <name>sc_logic_0</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9939afb4ad3a190c37c6cfae3db19cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const sc_logic</type>
      <name>sc_logic_1</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2ebde04b326927bc2f0491f46a452465</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const sc_logic</type>
      <name>sc_logic_Z</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad83b8fc992264f7c2d2b60b388bb6dfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const sc_logic</type>
      <name>sc_logic_X</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9949ec7524434b94c0a0cefabdb61d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>template class SC_API</type>
      <name>sc_proxy&lt; sc_lv_base &gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a952e9da9ee035a3316d1d4b23923ba19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>template class SC_API</type>
      <name>sc_proxy&lt; sc_bv_base &gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a59631777117251d86e6c21dbc00c9c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DIGIT_SIZE</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a261fdf19c94eb645624e551676a4b3c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_digit</type>
      <name>SC_DIGIT_ZERO</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a41db220f73561037e0eceb8e1ab849e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_digit</type>
      <name>SC_DIGIT_ONE</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a19ba673c32e3feda2b82b949f2cafa99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_digit</type>
      <name>SC_DIGIT_TWO</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abe43fee2acd67acf70eecbc3ae561664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>template class SC_API</type>
      <name>sc_global&lt; sc_fxcast_switch &gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a932a0b481c5435f0ab02a82d999d0c37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>template class SC_API</type>
      <name>sc_context&lt; sc_fxcast_switch &gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a60d2446604e8a000ade1ad3abb0435c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_WL_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5c710cfefc3e2479e0409a4a73e67e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_IWL_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5175a68ec521b2e60d4851732dbf95fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_q_mode</type>
      <name>SC_BUILTIN_Q_MODE_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a27f91512aea0915fd1516f67f0ec583c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_o_mode</type>
      <name>SC_BUILTIN_O_MODE_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a15ae90f315a8a65d2103b357df7e1192</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_N_BITS_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aac37b82256b6ec89e1f12b7771e6cde1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_WL_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a12b02013145ae31ea2a6abaa1fd54f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_IWL_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a76d2025776aba97329359a6fb84b7943</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_q_mode</type>
      <name>SC_DEFAULT_Q_MODE_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a5c2d016b13dfc62ab0fb86e3d41a8bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_o_mode</type>
      <name>SC_DEFAULT_O_MODE_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa450d625be656c8cd2b7b800a8376a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_N_BITS_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afccd3909356b1dbf4b8f848928b3bd03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_switch</type>
      <name>SC_BUILTIN_CAST_SWITCH_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad6ec30d471c7a129add9afba693650f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const sc_switch</type>
      <name>SC_DEFAULT_CAST_SWITCH_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a487b0566485d3c509821dc6abdcf1f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_DIV_WL_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af892a30c60b809ee4cf06e18c61c1246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_CTE_WL_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a414bf34e3f516ed0080701932ac210c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_BUILTIN_MAX_WL_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a70266da6c35d8b6d62f55e8c1dfc3bbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_DIV_WL_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a000561825be47f3eb33a9169937de0b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_CTE_WL_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adbdbfc6e843d840671cc2a8c314d4819</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SC_DEFAULT_MAX_WL_</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8a76f43ffcab4af73b52d3e1e128745c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>template class SC_API</type>
      <name>sc_global&lt; sc_fxtype_params &gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a46fca0b40e463e779390299713b3fd2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>template class SC_API</type>
      <name>sc_context&lt; sc_fxtype_params &gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abb1c2b83a4871857e8fd8b7004bb17b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>div</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a12114c547c96d81851980cc9dd7829cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64 const sc_uint_base int</type>
      <name>b</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>adf3ee606b574990426012b8c6cc286f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_DOUBLE_BIAS</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa15d1db6dde3e56e3b7f56cc8c4c3338</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SCFX_IEEE_DOUBLE_E_MAX</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a67b6c725c1bd21c1224e06acd8622235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SCFX_IEEE_DOUBLE_E_MIN</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2403f43817bd898d7b5e1e50a7dc9351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_DOUBLE_M_SIZE</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9eec5b400f57cad95902df53b28f53c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_DOUBLE_M0_SIZE</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a73a9d2d31ee139d8c43bdf0576cc0a3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_DOUBLE_M1_SIZE</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a1aa9bcc69f8f57d6dd5dfec6e72958bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_DOUBLE_E_SIZE</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4d4a1ec8357398ed60abef614c0751af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_FLOAT_BIAS</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aa54b10bf631227df8da768c4e6b99d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SCFX_IEEE_FLOAT_E_MAX</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a76e745625b89b8e91d2ed90c6c8294e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SCFX_IEEE_FLOAT_E_MIN</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a180cbdc86768018a143b9fa0cc67fd28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_FLOAT_M_SIZE</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afeca4b01739deaa4c4e5b159e8a3dda9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>SCFX_IEEE_FLOAT_E_SIZE</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a92e243f3ce790b0a4e163d2e181e072e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>SCFX_POW10_TABLE_SIZE</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae12f193164fb7ce3732c2c1e497ac24d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>min_mant</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4f480fe345956f9a5947f5720cfccd37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>bits_in_int</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>abe9ff4cc791b13b00baee44646dc3306</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>bits_in_word</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>afa90f722a8aa6b18569f37d2b7d68206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SC_API const uint_type</type>
      <name>mask_int</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ad0c0dba74a3a9c344328ec28f1d947e1</anchor>
      <arglist>[SC_INTWIDTH][SC_INTWIDTH]</arglist>
    </member>
    <member kind="variable">
      <type>template class SC_API</type>
      <name>sc_global&lt; sc_length_param &gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>af58363cda106c0ef7944237e42024ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>template class SC_API</type>
      <name>sc_context&lt; sc_length_param &gt;</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>aee947e2cf6de2a99e14be69cf3c77309</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr uint64</type>
      <name>UINT64_ZERO</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a8d30f0e699d40aba57f023cedb65425e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr uint64</type>
      <name>UINT64_ONE</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>ae78b5dcd3cf7225966ca6615117f8c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr uint64</type>
      <name>UINT64_32ONES</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a58e47add25c28322982be9e3a8e894a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr small_type</type>
      <name>NB_DEFAULT_BASE</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a99f8c7ce23091661a9c9e9b0d08d7bc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr uint64</type>
      <name>UINT_ZERO</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9b9bbd90580ef3d2dd05d84e542c7789</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr uint64</type>
      <name>UINT_ONE</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a507b2caa54f8e7c7dc763ca16475a36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>byte_one_bits</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a858e9cebbc6d1aab9953c8bcbc9317f0</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="variable">
      <type>sc_digit_heap SC_API</type>
      <name>sc_temporary_digits</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a454b3089436035f64d522ed28aa9a917</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>sc_unnamed</name>
    <filename>a00456.html</filename>
  </compound>
</tagfile>
